
bin/Debug/Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00001f58  00001fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00001f30  00001f30  00001fc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000572  008001d8  008001d8  000020c4  2**0
                  ALLOC
  4 .stab         0000207c  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000109c  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  000051dc  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005200  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00005240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00005834  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00005dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00005df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <__vector_18>
      4c:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e5       	ldi	r30, 0x58	; 88
      7c:	ff e1       	ldi	r31, 0x1F	; 31
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 3d       	cpi	r26, 0xD8	; 216
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a8 ed       	ldi	r26, 0xD8	; 216
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 34       	cpi	r26, 0x4A	; 74
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 46 04 	call	0x88c	; 0x88c <main>
      9e:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
 *    - Reads from EEPROM to local storage
 *    - update EEPROM with default data
 *    - sets config_modified to 0
 ************************************************/
void config_init()
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62

  // wait for the eeprom to not be busy
  while (eeprom_isbusy())
      ae:	00 00       	nop
      b0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <eeprom_isbusy>
      b4:	89 2b       	or	r24, r25
      b6:	e1 f7       	brne	.-8      	; 0xb0 <config_init+0xa>
    ;

  /* init config w/ eeprom read */
  eeprom_readbuf(0x0040, (unsigned char *)&config, sizeof(config));
      b8:	42 e1       	ldi	r20, 0x12	; 18
      ba:	64 e7       	ldi	r22, 0x74	; 116
      bc:	72 e0       	ldi	r23, 0x02	; 2
      be:	80 e4       	ldi	r24, 0x40	; 64
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 9a 01 	call	0x334	; 0x334 <eeprom_readbuf>
  /* while the data is not valid */
  while (!config_is_data_valid())
      c6:	04 c0       	rjmp	.+8      	; 0xd0 <config_init+0x2a>
  {
    /* fix the data in eeprom*/
    config_write_defaults();
      c8:	0e 94 b9 00 	call	0x172	; 0x172 <config_write_defaults>
    config_read();
      cc:	0e 94 ce 00 	call	0x19c	; 0x19c <config_read>
    ;

  /* init config w/ eeprom read */
  eeprom_readbuf(0x0040, (unsigned char *)&config, sizeof(config));
  /* while the data is not valid */
  while (!config_is_data_valid())
      d0:	0e 94 9d 00 	call	0x13a	; 0x13a <config_is_data_valid>
      d4:	89 2b       	or	r24, r25
      d6:	c1 f3       	breq	.-16     	; 0xc8 <config_init+0x22>
  {
    /* fix the data in eeprom*/
    config_write_defaults();
    config_read();
  }
  config_modified = 0;
      d8:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
}
      dc:	00 00       	nop
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <config_update>:
 *    - update checksum for the config
 *    - writes new config to EEPROM
 *    - modified_config is set 0
 ************************************************/
void config_update()
{
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
  /* if eeprom is busy or !modified just return */
  if (eeprom_isbusy() || !config_modified)
      ec:	0e 94 f7 01 	call	0x3ee	; 0x3ee <eeprom_isbusy>
      f0:	89 2b       	or	r24, r25
      f2:	a1 f4       	brne	.+40     	; 0x11c <config_update+0x38>
      f4:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
      f8:	88 23       	and	r24, r24
      fa:	81 f0       	breq	.+32     	; 0x11c <config_update+0x38>
    return;
  /* update the checksum */
  update_checksum((unsigned char *)&config, sizeof(config));
      fc:	62 e1       	ldi	r22, 0x12	; 18
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	84 e7       	ldi	r24, 0x74	; 116
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	0e 94 b2 04 	call	0x964	; 0x964 <update_checksum>
  /* write config to eeprom */
  eeprom_writebuf(0x0040, (unsigned char *)&config, sizeof(config));
     108:	42 e1       	ldi	r20, 0x12	; 18
     10a:	64 e7       	ldi	r22, 0x74	; 116
     10c:	72 e0       	ldi	r23, 0x02	; 2
     10e:	80 e4       	ldi	r24, 0x40	; 64
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 42 01 	call	0x284	; 0x284 <eeprom_writebuf>
  /* clear the modified flag */
  config_modified = 0;
     116:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
     11a:	01 c0       	rjmp	.+2      	; 0x11e <config_update+0x3a>
 ************************************************/
void config_update()
{
  /* if eeprom is busy or !modified just return */
  if (eeprom_isbusy() || !config_modified)
    return;
     11c:	00 00       	nop
  update_checksum((unsigned char *)&config, sizeof(config));
  /* write config to eeprom */
  eeprom_writebuf(0x0040, (unsigned char *)&config, sizeof(config));
  /* clear the modified flag */
  config_modified = 0;
}
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <config_set_modified>:
 * Returns: None.
 * Changes:
 *    - sets config as modified and ready to update
 ************************************************/
void config_set_modified()
{
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
  config_modified = 1;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
}
     132:	00 00       	nop
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <config_is_data_valid>:
 * 
 * Returns: None.
 * Changes: None.
 ************************************************/
int config_is_data_valid()
{
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(config.token, "ASU") && is_checksum_valid((unsigned char *)&config, sizeof(config));
     142:	6d e5       	ldi	r22, 0x5D	; 93
     144:	71 e0       	ldi	r23, 0x01	; 1
     146:	84 e7       	ldi	r24, 0x74	; 116
     148:	92 e0       	ldi	r25, 0x02	; 2
     14a:	0e 94 3a 05 	call	0xa74	; 0xa74 <cmp_str>
     14e:	89 2b       	or	r24, r25
     150:	59 f0       	breq	.+22     	; 0x168 <config_is_data_valid+0x2e>
     152:	62 e1       	ldi	r22, 0x12	; 18
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	84 e7       	ldi	r24, 0x74	; 116
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <is_checksum_valid>
     15e:	89 2b       	or	r24, r25
     160:	19 f0       	breq	.+6      	; 0x168 <config_is_data_valid+0x2e>
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <config_is_data_valid+0x32>
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
}
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <config_write_defaults>:
 * Returns: None.
 * Changes:
 *    - writes config to eeprim 0x0040
 ************************************************/
void config_write_defaults()
{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
  /* upate_checksum() for defaults*/
  update_checksum((unsigned char *)&config_defaults, sizeof(config_defaults));
     17a:	62 e1       	ldi	r22, 0x12	; 18
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0e 94 b2 04 	call	0x964	; 0x964 <update_checksum>
  /* write defaults to eeprom */
  eeprom_writebuf(0x0040, (unsigned char *)&config_defaults, sizeof(config_defaults));
     186:	42 e1       	ldi	r20, 0x12	; 18
     188:	60 e0       	ldi	r22, 0x00	; 0
     18a:	71 e0       	ldi	r23, 0x01	; 1
     18c:	80 e4       	ldi	r24, 0x40	; 64
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 42 01 	call	0x284	; 0x284 <eeprom_writebuf>
}
     194:	00 00       	nop
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <config_read>:
 * Returns: None.
 * Changes:
 *    - Populates the provided buffer with data read from the EEPROM.
 ************************************************/
void config_read()
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
  eeprom_readbuf(0x0040, (unsigned char *)&config, sizeof(config));
     1a4:	42 e1       	ldi	r20, 0x12	; 18
     1a6:	64 e7       	ldi	r22, 0x74	; 116
     1a8:	72 e0       	ldi	r23, 0x02	; 2
     1aa:	80 e4       	ldi	r24, 0x40	; 64
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 9a 01 	call	0x334	; 0x334 <eeprom_readbuf>
     1b2:	00 00       	nop
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <eeprom_unlock>:
 * Arguments ...
 * Returns ...
 * Changes ...
 */
void eeprom_unlock() {
  EECR |= (1 << EEMPE);  /* Write logical one to EEMPE */
     1ba:	fa 9a       	sbi	0x1f, 2	; 31
  EECR |= (1 << EEPE); /* Start eeprom write by setting EEPE */
     1bc:	f9 9a       	sbi	0x1f, 1	; 31
}
     1be:	08 95       	ret

000001c0 <__vector_22>:
 * Returns: Nothing 
 * Changes:
 *    - Sends data to EEPROM.
 *    - Disables EEPROM interrupts after the final byte is sent.
 ************************************************/
void __vector_22() {
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	2f 93       	push	r18
     1cc:	3f 93       	push	r19
     1ce:	4f 93       	push	r20
     1d0:	5f 93       	push	r21
     1d2:	6f 93       	push	r22
     1d4:	7f 93       	push	r23
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
     1da:	af 93       	push	r26
     1dc:	bf 93       	push	r27
     1de:	ef 93       	push	r30
     1e0:	ff 93       	push	r31
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62

  /* if you haven't written all characters in then keep writing */
  /* should we check to see if it is ready to write? */
  if (bufidx < writesize) {
     1ea:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <bufidx>
     1ee:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <writesize>
     1f2:	98 17       	cp	r25, r24
     1f4:	78 f5       	brcc	.+94     	; 0x254 <__vector_22+0x94>
    /* set high byte */
    EEARH = (writeaddr >> 8) & 0xFF;
     1f6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <writeaddr>
     1fa:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <writeaddr+0x1>
     1fe:	29 2f       	mov	r18, r25
     200:	33 27       	eor	r19, r19
     202:	82 e4       	ldi	r24, 0x42	; 66
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18
    /* set low byte */
    EEARL = writeaddr & 0xFF;
     20a:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <writeaddr>
     20e:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <writeaddr+0x1>
     212:	81 e4       	ldi	r24, 0x41	; 65
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
    /* write data to the eeprom buffer */
    EEDR = writebuf[bufidx];
     21a:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <bufidx>
     21e:	28 2f       	mov	r18, r24
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	80 e4       	ldi	r24, 0x40	; 64
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	22 57       	subi	r18, 0x72	; 114
     228:	3b 4f       	sbci	r19, 0xFB	; 251
     22a:	f9 01       	movw	r30, r18
     22c:	20 81       	ld	r18, Z
     22e:	fc 01       	movw	r30, r24
     230:	20 83       	st	Z, r18
    /* unlock eeprom and start the write */
    eeprom_unlock();
     232:	0e 94 dd 00 	call	0x1ba	; 0x1ba <eeprom_unlock>
    /* go to the next letter in buffer and write to the next address */
    bufidx++;
     236:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <bufidx>
     23a:	8f 5f       	subi	r24, 0xFF	; 255
     23c:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <bufidx>
    writeaddr++;
     240:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <writeaddr>
     244:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <writeaddr+0x1>
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <writeaddr+0x1>
     24e:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <writeaddr>
    /* disable interrupts */
    disable_interrupt();
    /* make ready to write another */
    write_busy = 0;
  }
}
     252:	04 c0       	rjmp	.+8      	; 0x25c <__vector_22+0x9c>
    bufidx++;
    writeaddr++;
  } else {

    /* disable interrupts */
    disable_interrupt();
     254:	0e 94 17 02 	call	0x42e	; 0x42e <disable_interrupt>
    /* make ready to write another */
    write_busy = 0;
     258:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <write_busy>
  }
}
     25c:	00 00       	nop
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	ff 91       	pop	r31
     264:	ef 91       	pop	r30
     266:	bf 91       	pop	r27
     268:	af 91       	pop	r26
     26a:	9f 91       	pop	r25
     26c:	8f 91       	pop	r24
     26e:	7f 91       	pop	r23
     270:	6f 91       	pop	r22
     272:	5f 91       	pop	r21
     274:	4f 91       	pop	r20
     276:	3f 91       	pop	r19
     278:	2f 91       	pop	r18
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <eeprom_writebuf>:
 * Returns: None.
 * Changes:
 *    - Populates the write buffer with the provided data.
 ************************************************/
void eeprom_writebuf(unsigned int addr, unsigned char *buf,
                     unsigned char size) {
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	00 d0       	rcall	.+0      	; 0x28a <eeprom_writebuf+0x6>
     28a:	00 d0       	rcall	.+0      	; 0x28c <eeprom_writebuf+0x8>
     28c:	00 d0       	rcall	.+0      	; 0x28e <eeprom_writebuf+0xa>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	9b 83       	std	Y+3, r25	; 0x03
     294:	8a 83       	std	Y+2, r24	; 0x02
     296:	7d 83       	std	Y+5, r23	; 0x05
     298:	6c 83       	std	Y+4, r22	; 0x04
     29a:	4e 83       	std	Y+6, r20	; 0x06
 /* check that write_busy is 0 */
  if (write_busy > 0) {
     29c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <write_busy>
     2a0:	88 23       	and	r24, r24
     2a2:	e1 f5       	brne	.+120    	; 0x31c <eeprom_writebuf+0x98>
    return;
  }
  if ((addr + size) > 0x3FF) {
     2a4:	8e 81       	ldd	r24, Y+6	; 0x06
     2a6:	28 2f       	mov	r18, r24
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	8a 81       	ldd	r24, Y+2	; 0x02
     2ac:	9b 81       	ldd	r25, Y+3	; 0x03
     2ae:	82 0f       	add	r24, r18
     2b0:	93 1f       	adc	r25, r19
     2b2:	81 15       	cp	r24, r1
     2b4:	94 40       	sbci	r25, 0x04	; 4
     2b6:	a0 f5       	brcc	.+104    	; 0x320 <eeprom_writebuf+0x9c>
    return;
  }
  cache_write(addr, buf, size);
     2b8:	2c 81       	ldd	r18, Y+4	; 0x04
     2ba:	3d 81       	ldd	r19, Y+5	; 0x05
     2bc:	8a 81       	ldd	r24, Y+2	; 0x02
     2be:	9b 81       	ldd	r25, Y+3	; 0x03
     2c0:	4e 81       	ldd	r20, Y+6	; 0x06
     2c2:	b9 01       	movw	r22, r18
     2c4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <cache_write>
  /* the EEPROM is now writing */
  write_busy = 1;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <write_busy>
  /* change the write address */
  writeaddr = addr;
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	9b 81       	ldd	r25, Y+3	; 0x03
     2d2:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <writeaddr+0x1>
     2d6:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <writeaddr>
  /* start reading from the beginning of the buffer */
  bufidx = 0;
     2da:	10 92 8e 06 	sts	0x068E, r1	; 0x80068e <bufidx>

  /* copy buf to writebuf and configure writesize */
  for (unsigned char i = 0; i < size; i++) {
     2de:	19 82       	std	Y+1, r1	; 0x01
     2e0:	13 c0       	rjmp	.+38     	; 0x308 <eeprom_writebuf+0x84>
    writebuf[i] = buf[i];
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	88 2f       	mov	r24, r24
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	2c 81       	ldd	r18, Y+4	; 0x04
     2ea:	3d 81       	ldd	r19, Y+5	; 0x05
     2ec:	28 0f       	add	r18, r24
     2ee:	39 1f       	adc	r19, r25
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	88 2f       	mov	r24, r24
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	82 57       	subi	r24, 0x72	; 114
     2fc:	9b 4f       	sbci	r25, 0xFB	; 251
     2fe:	fc 01       	movw	r30, r24
     300:	20 83       	st	Z, r18
  writeaddr = addr;
  /* start reading from the beginning of the buffer */
  bufidx = 0;

  /* copy buf to writebuf and configure writesize */
  for (unsigned char i = 0; i < size; i++) {
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	8f 5f       	subi	r24, 0xFF	; 255
     306:	89 83       	std	Y+1, r24	; 0x01
     308:	99 81       	ldd	r25, Y+1	; 0x01
     30a:	8e 81       	ldd	r24, Y+6	; 0x06
     30c:	98 17       	cp	r25, r24
     30e:	48 f3       	brcs	.-46     	; 0x2e2 <eeprom_writebuf+0x5e>
    writebuf[i] = buf[i];
  }

  writesize = size;
     310:	8e 81       	ldd	r24, Y+6	; 0x06
     312:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <writesize>

  /* enable the EEPROM ready interrupts */
  enable_interrupt();
     316:	0e 94 06 02 	call	0x40c	; 0x40c <enable_interrupt>
     31a:	03 c0       	rjmp	.+6      	; 0x322 <eeprom_writebuf+0x9e>
 ************************************************/
void eeprom_writebuf(unsigned int addr, unsigned char *buf,
                     unsigned char size) {
 /* check that write_busy is 0 */
  if (write_busy > 0) {
    return;
     31c:	00 00       	nop
     31e:	01 c0       	rjmp	.+2      	; 0x322 <eeprom_writebuf+0x9e>
  }
  if ((addr + size) > 0x3FF) {
    return;
     320:	00 00       	nop

  writesize = size;

  /* enable the EEPROM ready interrupts */
  enable_interrupt();
}
     322:	26 96       	adiw	r28, 0x06	; 6
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <eeprom_readbuf>:
 * 
 * Returns: None.
 * Changes:
 *    - Populates the provided buffer with data read from the EEPROM.
 ************************************************/
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	00 d0       	rcall	.+0      	; 0x33a <eeprom_readbuf+0x6>
     33a:	00 d0       	rcall	.+0      	; 0x33c <eeprom_readbuf+0x8>
     33c:	00 d0       	rcall	.+0      	; 0x33e <eeprom_readbuf+0xa>
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	9b 83       	std	Y+3, r25	; 0x03
     344:	8a 83       	std	Y+2, r24	; 0x02
     346:	7d 83       	std	Y+5, r23	; 0x05
     348:	6c 83       	std	Y+4, r22	; 0x04
     34a:	4e 83       	std	Y+6, r20	; 0x06
  if (size > 64) {
     34c:	8e 81       	ldd	r24, Y+6	; 0x06
     34e:	81 34       	cpi	r24, 0x41	; 65
     350:	08 f0       	brcs	.+2      	; 0x354 <eeprom_readbuf+0x20>
     352:	41 c0       	rjmp	.+130    	; 0x3d6 <eeprom_readbuf+0xa2>
    /* write error. buffer is too big */
    return;
  }
  while (eeprom_isbusy())
     354:	0a c0       	rjmp	.+20     	; 0x36a <eeprom_readbuf+0x36>
  {
    if (cache_get(addr, buf, size)) { return; }
     356:	2c 81       	ldd	r18, Y+4	; 0x04
     358:	3d 81       	ldd	r19, Y+5	; 0x05
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	9b 81       	ldd	r25, Y+3	; 0x03
     35e:	4e 81       	ldd	r20, Y+6	; 0x06
     360:	b9 01       	movw	r22, r18
     362:	0e 94 ca 03 	call	0x794	; 0x794 <cache_get>
     366:	88 23       	and	r24, r24
     368:	c1 f5       	brne	.+112    	; 0x3da <eeprom_readbuf+0xa6>
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {
  if (size > 64) {
    /* write error. buffer is too big */
    return;
  }
  while (eeprom_isbusy())
     36a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <eeprom_isbusy>
     36e:	89 2b       	or	r24, r25
     370:	91 f7       	brne	.-28     	; 0x356 <eeprom_readbuf+0x22>
  {
    if (cache_get(addr, buf, size)) { return; }
  }
  for (unsigned char i = 0; i < size; i++) {
     372:	19 82       	std	Y+1, r1	; 0x01
     374:	2b c0       	rjmp	.+86     	; 0x3cc <eeprom_readbuf+0x98>
    /* set high byte */
    EEARH = (addr >> 8) & 0xFF;
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	9b 81       	ldd	r25, Y+3	; 0x03
     37a:	29 2f       	mov	r18, r25
     37c:	33 27       	eor	r19, r19
     37e:	82 e4       	ldi	r24, 0x42	; 66
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
    /* set low byte */
    EEARL = addr & 0xFF;
     386:	81 e4       	ldi	r24, 0x41	; 65
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	2a 81       	ldd	r18, Y+2	; 0x02
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
    /* set mode to read */
    EECR |= (1 << EERE);
     390:	8f e3       	ldi	r24, 0x3F	; 63
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	fc 01       	movw	r30, r24
     396:	20 81       	ld	r18, Z
     398:	8f e3       	ldi	r24, 0x3F	; 63
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	21 60       	ori	r18, 0x01	; 1
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
    /* write from register to buffer */
    buf[i] = EEDR;
     3a2:	20 e4       	ldi	r18, 0x40	; 64
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	88 2f       	mov	r24, r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	4c 81       	ldd	r20, Y+4	; 0x04
     3ae:	5d 81       	ldd	r21, Y+5	; 0x05
     3b0:	84 0f       	add	r24, r20
     3b2:	95 1f       	adc	r25, r21
     3b4:	f9 01       	movw	r30, r18
     3b6:	20 81       	ld	r18, Z
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
    addr++;
     3bc:	8a 81       	ldd	r24, Y+2	; 0x02
     3be:	9b 81       	ldd	r25, Y+3	; 0x03
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	9b 83       	std	Y+3, r25	; 0x03
     3c4:	8a 83       	std	Y+2, r24	; 0x02
  }
  while (eeprom_isbusy())
  {
    if (cache_get(addr, buf, size)) { return; }
  }
  for (unsigned char i = 0; i < size; i++) {
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	8f 5f       	subi	r24, 0xFF	; 255
     3ca:	89 83       	std	Y+1, r24	; 0x01
     3cc:	99 81       	ldd	r25, Y+1	; 0x01
     3ce:	8e 81       	ldd	r24, Y+6	; 0x06
     3d0:	98 17       	cp	r25, r24
     3d2:	88 f2       	brcs	.-94     	; 0x376 <eeprom_readbuf+0x42>
     3d4:	03 c0       	rjmp	.+6      	; 0x3dc <eeprom_readbuf+0xa8>
 *    - Populates the provided buffer with data read from the EEPROM.
 ************************************************/
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {
  if (size > 64) {
    /* write error. buffer is too big */
    return;
     3d6:	00 00       	nop
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <eeprom_readbuf+0xa8>
  }
  while (eeprom_isbusy())
  {
    if (cache_get(addr, buf, size)) { return; }
     3da:	00 00       	nop
    EECR |= (1 << EERE);
    /* write from register to buffer */
    buf[i] = EEDR;
    addr++;
  }
}
     3dc:	26 96       	adiw	r28, 0x06	; 6
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <eeprom_isbusy>:
 *    - 0: EEPROM is not busy (write_busy == 0).
 *    - 1: EEPROM is busy (write_busy == 1).
 * 
 * Changes: None.
 ************************************************/
int eeprom_isbusy() {
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
  return  write_busy == 1;
     3f6:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <write_busy>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	91 30       	cpi	r25, 0x01	; 1
     3fe:	09 f0       	breq	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	88 2f       	mov	r24, r24
     404:	90 e0       	ldi	r25, 0x00	; 0
}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <enable_interrupt>:
 * 
 * Changes:
 *    - Sets the interrupt enable flag or specific interrupt registers, 
 *      allowing the system to respond to interrupt events.
 ************************************************/
void enable_interrupt() { 
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
  EECR |= (1 << EERIE); 
     414:	8f e3       	ldi	r24, 0x3F	; 63
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	fc 01       	movw	r30, r24
     41a:	20 81       	ld	r18, Z
     41c:	8f e3       	ldi	r24, 0x3F	; 63
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	28 60       	ori	r18, 0x08	; 8
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
}
     426:	00 00       	nop
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <disable_interrupt>:
 * 
 * Changes:
 *    - Sets the interrupt disable flag or specific interrupt registers, 
 *      allowing the system to respond to interrupt events.
 ************************************************/
void disable_interrupt() { EECR &= ~(1 << EERIE); }
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	8f e3       	ldi	r24, 0x3F	; 63
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	20 81       	ld	r18, Z
     43e:	8f e3       	ldi	r24, 0x3F	; 63
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	27 7f       	andi	r18, 0xF7	; 247
     444:	fc 01       	movw	r30, r24
     446:	20 83       	st	Z, r18
     448:	00 00       	nop
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <cache_init>:
};


struct cache_struct cache[CACHE_SIZE];
unsigned char cache_counter = 0;
void cache_init() {
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <cache_init+0x6>
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
    for(int i =0; i < CACHE_SIZE; i++) 
     45a:	1a 82       	std	Y+2, r1	; 0x02
     45c:	19 82       	std	Y+1, r1	; 0x01
     45e:	18 c0       	rjmp	.+48     	; 0x490 <cache_init+0x40>
    {
        /* set all cache to invalid state */
        cache[i].index = 0xFF;
     460:	29 81       	ldd	r18, Y+1	; 0x01
     462:	3a 81       	ldd	r19, Y+2	; 0x02
     464:	c9 01       	movw	r24, r18
     466:	96 95       	lsr	r25
     468:	98 2f       	mov	r25, r24
     46a:	88 27       	eor	r24, r24
     46c:	97 95       	ror	r25
     46e:	87 95       	ror	r24
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	86 57       	subi	r24, 0x76	; 118
     47e:	9d 4f       	sbci	r25, 0xFD	; 253
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18


struct cache_struct cache[CACHE_SIZE];
unsigned char cache_counter = 0;
void cache_init() {
    for(int i =0; i < CACHE_SIZE; i++) 
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	9a 83       	std	Y+2, r25	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	9a 81       	ldd	r25, Y+2	; 0x02
     494:	18 16       	cp	r1, r24
     496:	19 06       	cpc	r1, r25
     498:	1c f7       	brge	.-58     	; 0x460 <cache_init+0x10>
    {
        /* set all cache to invalid state */
        cache[i].index = 0xFF;
    }
}
     49a:	00 00       	nop
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <cache_write>:

// add to cache
void cache_write(unsigned int addr, unsigned char *buf, unsigned char size) {
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	2b 97       	sbiw	r28, 0x0b	; 11
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	98 87       	std	Y+8, r25	; 0x08
     4bc:	8f 83       	std	Y+7, r24	; 0x07
     4be:	7a 87       	std	Y+10, r23	; 0x0a
     4c0:	69 87       	std	Y+9, r22	; 0x09
     4c2:	4b 87       	std	Y+11, r20	; 0x0b
    if (size > BUFSIZE) {
        return;
    }
    /* create a variable to store available index */
    unsigned char available_idx = 0;
     4c4:	19 82       	std	Y+1, r1	; 0x01
    unsigned char last_seen_idx = 0;
     4c6:	1a 82       	std	Y+2, r1	; 0x02
    
    // go through the list of cache items
    for(int i = 0; i < CACHE_SIZE; i++) 
     4c8:	1c 82       	std	Y+4, r1	; 0x04
     4ca:	1b 82       	std	Y+3, r1	; 0x03
     4cc:	b2 c0       	rjmp	.+356    	; 0x632 <cache_write+0x18c>
    {
        // if the address exists already overwrite it
        if (cache[i].addr == addr) 
     4ce:	2b 81       	ldd	r18, Y+3	; 0x03
     4d0:	3c 81       	ldd	r19, Y+4	; 0x04
     4d2:	c9 01       	movw	r24, r18
     4d4:	96 95       	lsr	r25
     4d6:	98 2f       	mov	r25, r24
     4d8:	88 27       	eor	r24, r24
     4da:	97 95       	ror	r25
     4dc:	87 95       	ror	r24
     4de:	82 0f       	add	r24, r18
     4e0:	93 1f       	adc	r25, r19
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	85 57       	subi	r24, 0x75	; 117
     4ec:	9d 4f       	sbci	r25, 0xFD	; 253
     4ee:	fc 01       	movw	r30, r24
     4f0:	80 81       	ld	r24, Z
     4f2:	91 81       	ldd	r25, Z+1	; 0x01
     4f4:	2f 81       	ldd	r18, Y+7	; 0x07
     4f6:	38 85       	ldd	r19, Y+8	; 0x08
     4f8:	28 17       	cp	r18, r24
     4fa:	39 07       	cpc	r19, r25
     4fc:	09 f0       	breq	.+2      	; 0x500 <cache_write+0x5a>
     4fe:	56 c0       	rjmp	.+172    	; 0x5ac <cache_write+0x106>
        {
            for (unsigned char j = 0; j < size; j++) 
     500:	1d 82       	std	Y+5, r1	; 0x05
     502:	24 c0       	rjmp	.+72     	; 0x54c <cache_write+0xa6>
            {
                cache[i].data[j] = buf[j];
     504:	8d 81       	ldd	r24, Y+5	; 0x05
     506:	88 2f       	mov	r24, r24
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	29 85       	ldd	r18, Y+9	; 0x09
     50c:	3a 85       	ldd	r19, Y+10	; 0x0a
     50e:	82 0f       	add	r24, r18
     510:	93 1f       	adc	r25, r19
     512:	fc 01       	movw	r30, r24
     514:	90 81       	ld	r25, Z
     516:	8d 81       	ldd	r24, Y+5	; 0x05
     518:	48 2f       	mov	r20, r24
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	69 2f       	mov	r22, r25
     51e:	2b 81       	ldd	r18, Y+3	; 0x03
     520:	3c 81       	ldd	r19, Y+4	; 0x04
     522:	c9 01       	movw	r24, r18
     524:	96 95       	lsr	r25
     526:	98 2f       	mov	r25, r24
     528:	88 27       	eor	r24, r24
     52a:	97 95       	ror	r25
     52c:	87 95       	ror	r24
     52e:	82 0f       	add	r24, r18
     530:	93 1f       	adc	r25, r19
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	84 0f       	add	r24, r20
     53c:	95 1f       	adc	r25, r21
     53e:	82 57       	subi	r24, 0x72	; 114
     540:	9d 4f       	sbci	r25, 0xFD	; 253
     542:	fc 01       	movw	r30, r24
     544:	60 83       	st	Z, r22
    for(int i = 0; i < CACHE_SIZE; i++) 
    {
        // if the address exists already overwrite it
        if (cache[i].addr == addr) 
        {
            for (unsigned char j = 0; j < size; j++) 
     546:	8d 81       	ldd	r24, Y+5	; 0x05
     548:	8f 5f       	subi	r24, 0xFF	; 255
     54a:	8d 83       	std	Y+5, r24	; 0x05
     54c:	9d 81       	ldd	r25, Y+5	; 0x05
     54e:	8b 85       	ldd	r24, Y+11	; 0x0b
     550:	98 17       	cp	r25, r24
     552:	c0 f2       	brcs	.-80     	; 0x504 <cache_write+0x5e>
            {
                cache[i].data[j] = buf[j];
            }
            cache[i].size = size;
     554:	2b 81       	ldd	r18, Y+3	; 0x03
     556:	3c 81       	ldd	r19, Y+4	; 0x04
     558:	c9 01       	movw	r24, r18
     55a:	96 95       	lsr	r25
     55c:	98 2f       	mov	r25, r24
     55e:	88 27       	eor	r24, r24
     560:	97 95       	ror	r25
     562:	87 95       	ror	r24
     564:	82 0f       	add	r24, r18
     566:	93 1f       	adc	r25, r19
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	83 57       	subi	r24, 0x73	; 115
     572:	9d 4f       	sbci	r25, 0xFD	; 253
     574:	2b 85       	ldd	r18, Y+11	; 0x0b
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
            cache[i].index = cache_counter++;
     57a:	40 91 d9 01 	lds	r20, 0x01D9	; 0x8001d9 <cache_counter>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	84 0f       	add	r24, r20
     582:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <cache_counter>
     586:	2b 81       	ldd	r18, Y+3	; 0x03
     588:	3c 81       	ldd	r19, Y+4	; 0x04
     58a:	c9 01       	movw	r24, r18
     58c:	96 95       	lsr	r25
     58e:	98 2f       	mov	r25, r24
     590:	88 27       	eor	r24, r24
     592:	97 95       	ror	r25
     594:	87 95       	ror	r24
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	86 57       	subi	r24, 0x76	; 118
     5a4:	9d 4f       	sbci	r25, 0xFD	; 253
     5a6:	fc 01       	movw	r30, r24
     5a8:	40 83       	st	Z, r20
            return;
     5aa:	a3 c0       	rjmp	.+326    	; 0x6f2 <cache_write+0x24c>
        }

        // if current cache[i].index is < last_seen_idx
        if (cache[i].index < last_seen_idx || (cache[i].index == 0xFF)) 
     5ac:	2b 81       	ldd	r18, Y+3	; 0x03
     5ae:	3c 81       	ldd	r19, Y+4	; 0x04
     5b0:	c9 01       	movw	r24, r18
     5b2:	96 95       	lsr	r25
     5b4:	98 2f       	mov	r25, r24
     5b6:	88 27       	eor	r24, r24
     5b8:	97 95       	ror	r25
     5ba:	87 95       	ror	r24
     5bc:	82 0f       	add	r24, r18
     5be:	93 1f       	adc	r25, r19
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	86 57       	subi	r24, 0x76	; 118
     5ca:	9d 4f       	sbci	r25, 0xFD	; 253
     5cc:	fc 01       	movw	r30, r24
     5ce:	80 81       	ld	r24, Z
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	89 17       	cp	r24, r25
     5d4:	a0 f0       	brcs	.+40     	; 0x5fe <cache_write+0x158>
     5d6:	2b 81       	ldd	r18, Y+3	; 0x03
     5d8:	3c 81       	ldd	r19, Y+4	; 0x04
     5da:	c9 01       	movw	r24, r18
     5dc:	96 95       	lsr	r25
     5de:	98 2f       	mov	r25, r24
     5e0:	88 27       	eor	r24, r24
     5e2:	97 95       	ror	r25
     5e4:	87 95       	ror	r24
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	86 57       	subi	r24, 0x76	; 118
     5f4:	9d 4f       	sbci	r25, 0xFD	; 253
     5f6:	fc 01       	movw	r30, r24
     5f8:	80 81       	ld	r24, Z
     5fa:	8f 3f       	cpi	r24, 0xFF	; 255
     5fc:	a9 f4       	brne	.+42     	; 0x628 <cache_write+0x182>
        {
            last_seen_idx = cache[i].index;
     5fe:	2b 81       	ldd	r18, Y+3	; 0x03
     600:	3c 81       	ldd	r19, Y+4	; 0x04
     602:	c9 01       	movw	r24, r18
     604:	96 95       	lsr	r25
     606:	98 2f       	mov	r25, r24
     608:	88 27       	eor	r24, r24
     60a:	97 95       	ror	r25
     60c:	87 95       	ror	r24
     60e:	82 0f       	add	r24, r18
     610:	93 1f       	adc	r25, r19
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	86 57       	subi	r24, 0x76	; 118
     61c:	9d 4f       	sbci	r25, 0xFD	; 253
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
     622:	8a 83       	std	Y+2, r24	; 0x02
            available_idx = i;
     624:	8b 81       	ldd	r24, Y+3	; 0x03
     626:	89 83       	std	Y+1, r24	; 0x01
    /* create a variable to store available index */
    unsigned char available_idx = 0;
    unsigned char last_seen_idx = 0;
    
    // go through the list of cache items
    for(int i = 0; i < CACHE_SIZE; i++) 
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	9c 81       	ldd	r25, Y+4	; 0x04
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	8b 83       	std	Y+3, r24	; 0x03
     632:	8b 81       	ldd	r24, Y+3	; 0x03
     634:	9c 81       	ldd	r25, Y+4	; 0x04
     636:	18 16       	cp	r1, r24
     638:	19 06       	cpc	r1, r25
     63a:	0c f0       	brlt	.+2      	; 0x63e <cache_write+0x198>
     63c:	48 cf       	rjmp	.-368    	; 0x4ce <cache_write+0x28>
        }
    } // address not found
    
    // if the address wasn't found and there is space in the cache, write to the first available
    // if the address wasn't found and there is no space, delete the first one. first in first out
    cache[available_idx].addr = addr;
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	28 2f       	mov	r18, r24
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	c9 01       	movw	r24, r18
     646:	96 95       	lsr	r25
     648:	98 2f       	mov	r25, r24
     64a:	88 27       	eor	r24, r24
     64c:	97 95       	ror	r25
     64e:	87 95       	ror	r24
     650:	82 0f       	add	r24, r18
     652:	93 1f       	adc	r25, r19
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	85 57       	subi	r24, 0x75	; 117
     65e:	9d 4f       	sbci	r25, 0xFD	; 253
     660:	2f 81       	ldd	r18, Y+7	; 0x07
     662:	38 85       	ldd	r19, Y+8	; 0x08
     664:	fc 01       	movw	r30, r24
     666:	31 83       	std	Z+1, r19	; 0x01
     668:	20 83       	st	Z, r18
    cache[available_idx].index = cache_counter++;
     66a:	40 91 d9 01 	lds	r20, 0x01D9	; 0x8001d9 <cache_counter>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	84 0f       	add	r24, r20
     672:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <cache_counter>
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	28 2f       	mov	r18, r24
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	c9 01       	movw	r24, r18
     67e:	96 95       	lsr	r25
     680:	98 2f       	mov	r25, r24
     682:	88 27       	eor	r24, r24
     684:	97 95       	ror	r25
     686:	87 95       	ror	r24
     688:	82 0f       	add	r24, r18
     68a:	93 1f       	adc	r25, r19
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	86 57       	subi	r24, 0x76	; 118
     696:	9d 4f       	sbci	r25, 0xFD	; 253
     698:	fc 01       	movw	r30, r24
     69a:	40 83       	st	Z, r20
    for (unsigned char i = 0; i < size; i++) 
     69c:	1e 82       	std	Y+6, r1	; 0x06
     69e:	25 c0       	rjmp	.+74     	; 0x6ea <cache_write+0x244>
    {
        cache[available_idx].data[i] = buf[i];
     6a0:	8e 81       	ldd	r24, Y+6	; 0x06
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	29 85       	ldd	r18, Y+9	; 0x09
     6a8:	3a 85       	ldd	r19, Y+10	; 0x0a
     6aa:	82 0f       	add	r24, r18
     6ac:	93 1f       	adc	r25, r19
     6ae:	fc 01       	movw	r30, r24
     6b0:	90 81       	ld	r25, Z
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	8e 81       	ldd	r24, Y+6	; 0x06
     6ba:	48 2f       	mov	r20, r24
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	69 2f       	mov	r22, r25
     6c0:	c9 01       	movw	r24, r18
     6c2:	96 95       	lsr	r25
     6c4:	98 2f       	mov	r25, r24
     6c6:	88 27       	eor	r24, r24
     6c8:	97 95       	ror	r25
     6ca:	87 95       	ror	r24
     6cc:	82 0f       	add	r24, r18
     6ce:	93 1f       	adc	r25, r19
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	84 0f       	add	r24, r20
     6da:	95 1f       	adc	r25, r21
     6dc:	82 57       	subi	r24, 0x72	; 114
     6de:	9d 4f       	sbci	r25, 0xFD	; 253
     6e0:	fc 01       	movw	r30, r24
     6e2:	60 83       	st	Z, r22
    
    // if the address wasn't found and there is space in the cache, write to the first available
    // if the address wasn't found and there is no space, delete the first one. first in first out
    cache[available_idx].addr = addr;
    cache[available_idx].index = cache_counter++;
    for (unsigned char i = 0; i < size; i++) 
     6e4:	8e 81       	ldd	r24, Y+6	; 0x06
     6e6:	8f 5f       	subi	r24, 0xFF	; 255
     6e8:	8e 83       	std	Y+6, r24	; 0x06
     6ea:	9e 81       	ldd	r25, Y+6	; 0x06
     6ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ee:	98 17       	cp	r25, r24
     6f0:	b8 f2       	brcs	.-82     	; 0x6a0 <cache_write+0x1fa>
    {
        cache[available_idx].data[i] = buf[i];
    }
}
     6f2:	2b 96       	adiw	r28, 0x0b	; 11
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <cache_del>:

// delete from cache
void cache_del(unsigned int addr) {
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	00 d0       	rcall	.+0      	; 0x70a <cache_del+0x6>
     70a:	00 d0       	rcall	.+0      	; 0x70c <cache_del+0x8>
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	9c 83       	std	Y+4, r25	; 0x04
     712:	8b 83       	std	Y+3, r24	; 0x03
    // go through the list of cache items
    for(int i = 0; i < CACHE_SIZE; i++) 
     714:	1a 82       	std	Y+2, r1	; 0x02
     716:	19 82       	std	Y+1, r1	; 0x01
     718:	31 c0       	rjmp	.+98     	; 0x77c <cache_del+0x78>
    {
        // if the address exists already overwrite INDEX
        if (cache[i].addr == addr) 
     71a:	29 81       	ldd	r18, Y+1	; 0x01
     71c:	3a 81       	ldd	r19, Y+2	; 0x02
     71e:	c9 01       	movw	r24, r18
     720:	96 95       	lsr	r25
     722:	98 2f       	mov	r25, r24
     724:	88 27       	eor	r24, r24
     726:	97 95       	ror	r25
     728:	87 95       	ror	r24
     72a:	82 0f       	add	r24, r18
     72c:	93 1f       	adc	r25, r19
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	85 57       	subi	r24, 0x75	; 117
     738:	9d 4f       	sbci	r25, 0xFD	; 253
     73a:	fc 01       	movw	r30, r24
     73c:	80 81       	ld	r24, Z
     73e:	91 81       	ldd	r25, Z+1	; 0x01
     740:	2b 81       	ldd	r18, Y+3	; 0x03
     742:	3c 81       	ldd	r19, Y+4	; 0x04
     744:	28 17       	cp	r18, r24
     746:	39 07       	cpc	r19, r25
     748:	a1 f4       	brne	.+40     	; 0x772 <cache_del+0x6e>
        {
            cache[i].index = 0xFF;
     74a:	29 81       	ldd	r18, Y+1	; 0x01
     74c:	3a 81       	ldd	r19, Y+2	; 0x02
     74e:	c9 01       	movw	r24, r18
     750:	96 95       	lsr	r25
     752:	98 2f       	mov	r25, r24
     754:	88 27       	eor	r24, r24
     756:	97 95       	ror	r25
     758:	87 95       	ror	r24
     75a:	82 0f       	add	r24, r18
     75c:	93 1f       	adc	r25, r19
     75e:	88 0f       	add	r24, r24
     760:	99 1f       	adc	r25, r25
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	86 57       	subi	r24, 0x76	; 118
     768:	9d 4f       	sbci	r25, 0xFD	; 253
     76a:	2f ef       	ldi	r18, 0xFF	; 255
     76c:	fc 01       	movw	r30, r24
     76e:	20 83       	st	Z, r18
            return;
     770:	0a c0       	rjmp	.+20     	; 0x786 <cache_del+0x82>
}

// delete from cache
void cache_del(unsigned int addr) {
    // go through the list of cache items
    for(int i = 0; i < CACHE_SIZE; i++) 
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	9a 83       	std	Y+2, r25	; 0x02
     77a:	89 83       	std	Y+1, r24	; 0x01
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	9a 81       	ldd	r25, Y+2	; 0x02
     780:	18 16       	cp	r1, r24
     782:	19 06       	cpc	r1, r25
     784:	54 f6       	brge	.-108    	; 0x71a <cache_del+0x16>
        {
            cache[i].index = 0xFF;
            return;
        }
    } // address not found
}
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <cache_get>:

// read from cache
unsigned char cache_get(unsigned int addr, unsigned char *buf, unsigned char size) {
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	28 97       	sbiw	r28, 0x08	; 8
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	f8 94       	cli
     7a2:	de bf       	out	0x3e, r29	; 62
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	9d 83       	std	Y+5, r25	; 0x05
     7aa:	8c 83       	std	Y+4, r24	; 0x04
     7ac:	7f 83       	std	Y+7, r23	; 0x07
     7ae:	6e 83       	std	Y+6, r22	; 0x06
     7b0:	48 87       	std	Y+8, r20	; 0x08
    // go through the list of cache items
    for(int i = 0; i < CACHE_SIZE; i++) 
     7b2:	1a 82       	std	Y+2, r1	; 0x02
     7b4:	19 82       	std	Y+1, r1	; 0x01
     7b6:	49 c0       	rjmp	.+146    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
    {
        // if the address exists already overwrite INDEX
        if (cache[i].addr == addr) 
     7b8:	29 81       	ldd	r18, Y+1	; 0x01
     7ba:	3a 81       	ldd	r19, Y+2	; 0x02
     7bc:	c9 01       	movw	r24, r18
     7be:	96 95       	lsr	r25
     7c0:	98 2f       	mov	r25, r24
     7c2:	88 27       	eor	r24, r24
     7c4:	97 95       	ror	r25
     7c6:	87 95       	ror	r24
     7c8:	82 0f       	add	r24, r18
     7ca:	93 1f       	adc	r25, r19
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	85 57       	subi	r24, 0x75	; 117
     7d6:	9d 4f       	sbci	r25, 0xFD	; 253
     7d8:	fc 01       	movw	r30, r24
     7da:	80 81       	ld	r24, Z
     7dc:	91 81       	ldd	r25, Z+1	; 0x01
     7de:	2c 81       	ldd	r18, Y+4	; 0x04
     7e0:	3d 81       	ldd	r19, Y+5	; 0x05
     7e2:	28 17       	cp	r18, r24
     7e4:	39 07       	cpc	r19, r25
     7e6:	61 f5       	brne	.+88     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
        {
            for (unsigned char j = 0; j < size; j++) 
     7e8:	1b 82       	std	Y+3, r1	; 0x03
     7ea:	24 c0       	rjmp	.+72     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
            {
                buf[j] = cache[i].data[j]; 
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	48 2f       	mov	r20, r24
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	29 81       	ldd	r18, Y+1	; 0x01
     7f4:	3a 81       	ldd	r19, Y+2	; 0x02
     7f6:	c9 01       	movw	r24, r18
     7f8:	96 95       	lsr	r25
     7fa:	98 2f       	mov	r25, r24
     7fc:	88 27       	eor	r24, r24
     7fe:	97 95       	ror	r25
     800:	87 95       	ror	r24
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	84 0f       	add	r24, r20
     810:	95 1f       	adc	r25, r21
     812:	82 57       	subi	r24, 0x72	; 114
     814:	9d 4f       	sbci	r25, 0xFD	; 253
     816:	fc 01       	movw	r30, r24
     818:	40 81       	ld	r20, Z
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	2e 81       	ldd	r18, Y+6	; 0x06
     822:	3f 81       	ldd	r19, Y+7	; 0x07
     824:	82 0f       	add	r24, r18
     826:	93 1f       	adc	r25, r19
     828:	24 2f       	mov	r18, r20
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
    for(int i = 0; i < CACHE_SIZE; i++) 
    {
        // if the address exists already overwrite INDEX
        if (cache[i].addr == addr) 
        {
            for (unsigned char j = 0; j < size; j++) 
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	8f 5f       	subi	r24, 0xFF	; 255
     832:	8b 83       	std	Y+3, r24	; 0x03
     834:	9b 81       	ldd	r25, Y+3	; 0x03
     836:	88 85       	ldd	r24, Y+8	; 0x08
     838:	98 17       	cp	r25, r24
     83a:	c0 f2       	brcs	.-80     	; 0x7ec <cache_get+0x58>
            {
                buf[j] = cache[i].data[j]; 
            }
            return 1;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	0c c0       	rjmp	.+24     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
}

// read from cache
unsigned char cache_get(unsigned int addr, unsigned char *buf, unsigned char size) {
    // go through the list of cache items
    for(int i = 0; i < CACHE_SIZE; i++) 
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	9a 83       	std	Y+2, r25	; 0x02
     848:	89 83       	std	Y+1, r24	; 0x01
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	9a 81       	ldd	r25, Y+2	; 0x02
     84e:	18 16       	cp	r1, r24
     850:	19 06       	cpc	r1, r25
     852:	0c f0       	brlt	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     854:	b1 cf       	rjmp	.-158    	; 0x7b8 <cache_get+0x24>
                buf[j] = cache[i].data[j]; 
            }
            return 1;
        }
    } // address not found
 return 0;
     856:	80 e0       	ldi	r24, 0x00	; 0
}
     858:	28 96       	adiw	r28, 0x08	; 8
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <enable_global_interrupts>:

#define SREG (*(volatile unsigned char *)0x5F)
#define I_BIT 7

void enable_global_interrupts()
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
  SREG |= (1 << I_BIT);  /* Set the I bit to enable interrupts */
     872:	8f e5       	ldi	r24, 0x5F	; 95
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	fc 01       	movw	r30, r24
     878:	20 81       	ld	r18, Z
     87a:	8f e5       	ldi	r24, 0x5F	; 95
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	20 68       	ori	r18, 0x80	; 128
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
}
     884:	00 00       	nop
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <main>:

int main()
{
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	00 d0       	rcall	.+0      	; 0x892 <main+0x6>
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
  enable_global_interrupts();
     896:	0e 94 35 04 	call	0x86a	; 0x86a <enable_global_interrupts>
  /* variable to track if the eeprom has been dumped */
  int dumped = 0;
     89a:	1a 82       	std	Y+2, r1	; 0x02
     89c:	19 82       	std	Y+1, r1	; 0x01
  /*  init uart */
  uart_init();
     89e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <uart_init>
  /*  init config */
  config_init();
     8a2:	0e 94 53 00 	call	0xa6	; 0xa6 <config_init>
  /*  init led */
  led_init();
     8a6:	0e 94 44 06 	call	0xc88	; 0xc88 <led_init>
  /*  init log */
  log_init();
     8aa:	0e 94 76 06 	call	0xcec	; 0xcec <log_init>
  /*  init rtc */
  rtc_init();
     8ae:	0e 94 3c 08 	call	0x1078	; 0x1078 <rtc_init>
  /*  init vpd */
  vpd_init();
     8b2:	0e 94 80 05 	call	0xb00	; 0xb00 <vpd_init>

  cache_init();
     8b6:	0e 94 28 02 	call	0x450	; 0x450 <cache_init>

  /*  led blink pattern "--- -.-" */
  led_set_blink("--- -.-");
     8ba:	81 e6       	ldi	r24, 0x61	; 97
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <led_set_blink>
  /*  set RTC date/time to "01/01/2019 00:00:00" */
  rtc_set_by_datestr("01/01/2019 00:00:00");
     8c2:	89 e6       	ldi	r24, 0x69	; 105
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <rtc_set_by_datestr>

  /*  write the mandatory SER line and name to uart \n */
  uart_writestr("SER 486 Project 2 – DaVonte Carter vault\n\r");
     8ca:	8d e7       	ldi	r24, 0x7D	; 125
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 ed 0b 	call	0x17da	; 0x17da <uart_writestr>
  /*  read/Write the model to uart \n */
  uart_writestr(vpd.model);
     8d2:	83 e9       	ldi	r24, 0x93	; 147
     8d4:	96 e0       	ldi	r25, 0x06	; 6
     8d6:	0e 94 ed 0b 	call	0x17da	; 0x17da <uart_writestr>
  uart_writestr("\n\r");
     8da:	8a ea       	ldi	r24, 0xAA	; 170
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 ed 0b 	call	0x17da	; 0x17da <uart_writestr>
  /*  read/Write the manufactuer to uart \n */
  uart_writestr(vpd.manufacturer);
     8e2:	8f e9       	ldi	r24, 0x9F	; 159
     8e4:	96 e0       	ldi	r25, 0x06	; 6
     8e6:	0e 94 ed 0b 	call	0x17da	; 0x17da <uart_writestr>
  uart_writestr("\n\r");
     8ea:	8a ea       	ldi	r24, 0xAA	; 170
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 ed 0b 	call	0x17da	; 0x17da <uart_writestr>
  /*  read/write the token to uart \n */
  uart_writestr(vpd.token);
     8f2:	8f e8       	ldi	r24, 0x8F	; 143
     8f4:	96 e0       	ldi	r25, 0x06	; 6
     8f6:	0e 94 ed 0b 	call	0x17da	; 0x17da <uart_writestr>
  uart_writestr("\n\r");
     8fa:	8a ea       	ldi	r24, 0xAA	; 170
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 ed 0b 	call	0x17da	; 0x17da <uart_writestr>

  /*  set the config_use_static_ip to 1 */
  config.use_static_ip = 1;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <config+0xc>
  /*  set the config modified state */
  config_set_modified();
     908:	0e 94 92 00 	call	0x124	; 0x124 <config_set_modified>
  /*  clear the event log */
  log_clear();
     90c:	0e 94 c2 07 	call	0xf84	; 0xf84 <log_clear>

  /*  add 3 recods to event log values: 0xaa, 0xbb, and 0xc */
  log_add_record(0xaa);
     910:	8a ea       	ldi	r24, 0xAA	; 170
     912:	0e 94 71 07 	call	0xee2	; 0xee2 <log_add_record>
  log_add_record(0xbb);
     916:	8b eb       	ldi	r24, 0xBB	; 187
     918:	0e 94 71 07 	call	0xee2	; 0xee2 <log_add_record>
  log_add_record(0xcc);
     91c:	8c ec       	ldi	r24, 0xCC	; 204
     91e:	0e 94 71 07 	call	0xee2	; 0xee2 <log_add_record>

  while (1)
  {
    /*  update the blink fsm every */
    led_update();
     922:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <led_update>

    /*  if (log has changed && eeprom is not busy) */
    /*  update the log in EEPROM */
    if (!eeprom_isbusy())
     926:	0e 94 f7 01 	call	0x3ee	; 0x3ee <eeprom_isbusy>
     92a:	89 2b       	or	r24, r25
     92c:	11 f4       	brne	.+4      	; 0x932 <__stack+0x33>
    {
      log_update();
     92e:	0e 94 3b 07 	call	0xe76	; 0xe76 <log_update>
    }

    /*  if (config has changed && eeprom is not busy) */
    /*  update config in EEPROM */
    if (!eeprom_isbusy())
     932:	0e 94 f7 01 	call	0x3ee	; 0x3ee <eeprom_isbusy>
     936:	89 2b       	or	r24, r25
     938:	11 f4       	brne	.+4      	; 0x93e <__stack+0x3f>
    {
      config_update();
     93a:	0e 94 72 00 	call	0xe4	; 0xe4 <config_update>
    }
    
    /* dump memory once and only once*/
    if ((!eeprom_isbusy()) && (!dumped))
     93e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <eeprom_isbusy>
     942:	89 2b       	or	r24, r25
     944:	71 f7       	brne	.-36     	; 0x922 <__stack+0x23>
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	9a 81       	ldd	r25, Y+2	; 0x02
     94a:	89 2b       	or	r24, r25
     94c:	51 f7       	brne	.-44     	; 0x922 <__stack+0x23>
    {
      dump_eeprom(0, 0x100);
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	71 e0       	ldi	r23, 0x01	; 1
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 b1 0c 	call	0x1962	; 0x1962 <dump_eeprom>
      dumped = 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
  log_add_record(0xcc);

  while (1)
  {
    /*  update the blink fsm every */
    led_update();
     962:	df cf       	rjmp	.-66     	; 0x922 <__stack+0x23>

00000964 <update_checksum>:
 * Returns: None.
 * Changes:
 *    - Populates the provided buffer with data read from the EEPROM.
 ************************************************/
void update_checksum(unsigned char *data, unsigned int size)
{
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	28 97       	sbiw	r28, 0x08	; 8
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	9e 83       	std	Y+6, r25	; 0x06
     97a:	8d 83       	std	Y+5, r24	; 0x05
     97c:	78 87       	std	Y+8, r23	; 0x08
     97e:	6f 83       	std	Y+7, r22	; 0x07
    unsigned int sum = 0;
     980:	1a 82       	std	Y+2, r1	; 0x02
     982:	19 82       	std	Y+1, r1	; 0x01
    unsigned int i;

    /* Sum all bytes except the last one */
    for (i = 0; i < size - 1; i++)
     984:	1c 82       	std	Y+4, r1	; 0x04
     986:	1b 82       	std	Y+3, r1	; 0x03
     988:	15 c0       	rjmp	.+42     	; 0x9b4 <update_checksum+0x50>
    {
        sum += (unsigned char)data[i];
     98a:	2d 81       	ldd	r18, Y+5	; 0x05
     98c:	3e 81       	ldd	r19, Y+6	; 0x06
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	9c 81       	ldd	r25, Y+4	; 0x04
     992:	82 0f       	add	r24, r18
     994:	93 1f       	adc	r25, r19
     996:	fc 01       	movw	r30, r24
     998:	80 81       	ld	r24, Z
     99a:	88 2f       	mov	r24, r24
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	29 81       	ldd	r18, Y+1	; 0x01
     9a0:	3a 81       	ldd	r19, Y+2	; 0x02
     9a2:	82 0f       	add	r24, r18
     9a4:	93 1f       	adc	r25, r19
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
{
    unsigned int sum = 0;
    unsigned int i;

    /* Sum all bytes except the last one */
    for (i = 0; i < size - 1; i++)
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	9c 81       	ldd	r25, Y+4	; 0x04
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	9c 83       	std	Y+4, r25	; 0x04
     9b2:	8b 83       	std	Y+3, r24	; 0x03
     9b4:	8f 81       	ldd	r24, Y+7	; 0x07
     9b6:	98 85       	ldd	r25, Y+8	; 0x08
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	2b 81       	ldd	r18, Y+3	; 0x03
     9bc:	3c 81       	ldd	r19, Y+4	; 0x04
     9be:	28 17       	cp	r18, r24
     9c0:	39 07       	cpc	r19, r25
     9c2:	18 f3       	brcs	.-58     	; 0x98a <update_checksum+0x26>
    {
        sum += (unsigned char)data[i];
    }

    /* Calculate the checksum  */
    data[size - 1] = (unsigned char)(-(sum & 0xFF));
     9c4:	49 81       	ldd	r20, Y+1	; 0x01
     9c6:	8f 81       	ldd	r24, Y+7	; 0x07
     9c8:	98 85       	ldd	r25, Y+8	; 0x08
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	2d 81       	ldd	r18, Y+5	; 0x05
     9ce:	3e 81       	ldd	r19, Y+6	; 0x06
     9d0:	82 0f       	add	r24, r18
     9d2:	93 1f       	adc	r25, r19
     9d4:	24 2f       	mov	r18, r20
     9d6:	21 95       	neg	r18
     9d8:	fc 01       	movw	r30, r24
     9da:	20 83       	st	Z, r18
}
     9dc:	00 00       	nop
     9de:	28 96       	adiw	r28, 0x08	; 8
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <is_checksum_valid>:
 * Returns: None.
 * Changes:
 *    - Populates the provided buffer with data read from the EEPROM.
 ************************************************/
int is_checksum_valid(unsigned char *data, unsigned int size)
{
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	28 97       	sbiw	r28, 0x08	; 8
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	9e 83       	std	Y+6, r25	; 0x06
     a06:	8d 83       	std	Y+5, r24	; 0x05
     a08:	78 87       	std	Y+8, r23	; 0x08
     a0a:	6f 83       	std	Y+7, r22	; 0x07
    unsigned int sum = 0;
     a0c:	1a 82       	std	Y+2, r1	; 0x02
     a0e:	19 82       	std	Y+1, r1	; 0x01
    unsigned int i;

    /* Sum all bytes including the checksum byte */
    for (i = 0; i < size; i++)
     a10:	1c 82       	std	Y+4, r1	; 0x04
     a12:	1b 82       	std	Y+3, r1	; 0x03
     a14:	15 c0       	rjmp	.+42     	; 0xa40 <is_checksum_valid+0x50>
    {
        sum += data[i];
     a16:	2d 81       	ldd	r18, Y+5	; 0x05
     a18:	3e 81       	ldd	r19, Y+6	; 0x06
     a1a:	8b 81       	ldd	r24, Y+3	; 0x03
     a1c:	9c 81       	ldd	r25, Y+4	; 0x04
     a1e:	82 0f       	add	r24, r18
     a20:	93 1f       	adc	r25, r19
     a22:	fc 01       	movw	r30, r24
     a24:	80 81       	ld	r24, Z
     a26:	88 2f       	mov	r24, r24
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	29 81       	ldd	r18, Y+1	; 0x01
     a2c:	3a 81       	ldd	r19, Y+2	; 0x02
     a2e:	82 0f       	add	r24, r18
     a30:	93 1f       	adc	r25, r19
     a32:	9a 83       	std	Y+2, r25	; 0x02
     a34:	89 83       	std	Y+1, r24	; 0x01
{
    unsigned int sum = 0;
    unsigned int i;

    /* Sum all bytes including the checksum byte */
    for (i = 0; i < size; i++)
     a36:	8b 81       	ldd	r24, Y+3	; 0x03
     a38:	9c 81       	ldd	r25, Y+4	; 0x04
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	9c 83       	std	Y+4, r25	; 0x04
     a3e:	8b 83       	std	Y+3, r24	; 0x03
     a40:	2b 81       	ldd	r18, Y+3	; 0x03
     a42:	3c 81       	ldd	r19, Y+4	; 0x04
     a44:	8f 81       	ldd	r24, Y+7	; 0x07
     a46:	98 85       	ldd	r25, Y+8	; 0x08
     a48:	28 17       	cp	r18, r24
     a4a:	39 07       	cpc	r19, r25
     a4c:	20 f3       	brcs	.-56     	; 0xa16 <is_checksum_valid+0x26>
    {
        sum += data[i];
    }

    /* if the sum is 0 then valid */
    if ((sum & 0xFF) == 0)
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
     a52:	99 27       	eor	r25, r25
     a54:	89 2b       	or	r24, r25
     a56:	19 f4       	brne	.+6      	; 0xa5e <is_checksum_valid+0x6e>
    {
        return 1; 
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <is_checksum_valid+0x72>
    }
    else
    {
        return 0; 
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
    }
}
     a62:	28 96       	adiw	r28, 0x08	; 8
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <cmp_str>:
 * Returns: None.
 * Changes:
 *    - Populates the provided buffer with data read from the EEPROM.
 ************************************************/
int cmp_str(const char *str1, const char *str2)
{
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	00 d0       	rcall	.+0      	; 0xa7a <cmp_str+0x6>
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <cmp_str+0x8>
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	9a 83       	std	Y+2, r25	; 0x02
     a82:	89 83       	std	Y+1, r24	; 0x01
     a84:	7c 83       	std	Y+4, r23	; 0x04
     a86:	6b 83       	std	Y+3, r22	; 0x03
    /* while strings are valid */
  while (*str1 && *str2)
     a88:	17 c0       	rjmp	.+46     	; 0xab8 <cmp_str+0x44>
  {
    /* if the values are ever not the same, then stop */
    if (*str1 != *str2)
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	9a 81       	ldd	r25, Y+2	; 0x02
     a8e:	fc 01       	movw	r30, r24
     a90:	20 81       	ld	r18, Z
     a92:	8b 81       	ldd	r24, Y+3	; 0x03
     a94:	9c 81       	ldd	r25, Y+4	; 0x04
     a96:	fc 01       	movw	r30, r24
     a98:	80 81       	ld	r24, Z
     a9a:	28 17       	cp	r18, r24
     a9c:	19 f0       	breq	.+6      	; 0xaa4 <cmp_str+0x30>
    {
      return 0;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	27 c0       	rjmp	.+78     	; 0xaf2 <cmp_str+0x7e>
    }
    /* go to the next character */
    str1++;
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	9a 81       	ldd	r25, Y+2	; 0x02
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	9a 83       	std	Y+2, r25	; 0x02
     aac:	89 83       	std	Y+1, r24	; 0x01
    str2++;
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	9c 81       	ldd	r25, Y+4	; 0x04
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
 *    - Populates the provided buffer with data read from the EEPROM.
 ************************************************/
int cmp_str(const char *str1, const char *str2)
{
    /* while strings are valid */
  while (*str1 && *str2)
     ab8:	89 81       	ldd	r24, Y+1	; 0x01
     aba:	9a 81       	ldd	r25, Y+2	; 0x02
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	88 23       	and	r24, r24
     ac2:	31 f0       	breq	.+12     	; 0xad0 <cmp_str+0x5c>
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	9c 81       	ldd	r25, Y+4	; 0x04
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	88 23       	and	r24, r24
     ace:	e9 f6       	brne	.-70     	; 0xa8a <cmp_str+0x16>
    }
    /* go to the next character */
    str1++;
    str2++;
  }
  return *str1 == '\0' && *str2 == '\0';
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	9a 81       	ldd	r25, Y+2	; 0x02
     ad4:	fc 01       	movw	r30, r24
     ad6:	80 81       	ld	r24, Z
     ad8:	88 23       	and	r24, r24
     ada:	49 f4       	brne	.+18     	; 0xaee <cmp_str+0x7a>
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	9c 81       	ldd	r25, Y+4	; 0x04
     ae0:	fc 01       	movw	r30, r24
     ae2:	80 81       	ld	r24, Z
     ae4:	88 23       	and	r24, r24
     ae6:	19 f4       	brne	.+6      	; 0xaee <cmp_str+0x7a>
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <cmp_str+0x7e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <vpd_init>:
 * Changes:
 *    - writes defaults to EEPROM
 *    - copies eeprom vpd to struct
 ************************************************/
void vpd_init()
{
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
  // wait for the eeprom to free up
  while (eeprom_isbusy())
     b08:	00 00       	nop
     b0a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <eeprom_isbusy>
     b0e:	89 2b       	or	r24, r25
     b10:	e1 f7       	brne	.-8      	; 0xb0a <vpd_init+0xa>
    ;

  /* read all data from the EEPROM at address 0x000 */
  read_vpd();
     b12:	0e 94 c9 05 	call	0xb92	; 0xb92 <read_vpd>

  /* if the data was invalid then write defaults and try to reinitialize */
  while (!vpd_is_data_valid())
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <vpd_init+0x20>
  {
    // initialize data from defaults
    vpd_write_defaults();
     b18:	0e 94 98 05 	call	0xb30	; 0xb30 <vpd_write_defaults>
    // read defaults
    read_vpd();
     b1c:	0e 94 c9 05 	call	0xb92	; 0xb92 <read_vpd>

  /* read all data from the EEPROM at address 0x000 */
  read_vpd();

  /* if the data was invalid then write defaults and try to reinitialize */
  while (!vpd_is_data_valid())
     b20:	0e 94 ad 05 	call	0xb5a	; 0xb5a <vpd_is_data_valid>
     b24:	89 2b       	or	r24, r25
     b26:	c1 f3       	breq	.-16     	; 0xb18 <vpd_init+0x18>
    // initialize data from defaults
    vpd_write_defaults();
    // read defaults
    read_vpd();
  }
}
     b28:	00 00       	nop
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <vpd_write_defaults>:
 * Returns: None.
 * Changes:
 *    - writes defaults for vpd to eeprom 0x0000
 ************************************************/
void vpd_write_defaults()
{
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
  /* update checksum for defaults */
  update_checksum((unsigned char *)&defaults, sizeof(defaults));
     b38:	67 e3       	ldi	r22, 0x37	; 55
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	82 e1       	ldi	r24, 0x12	; 18
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	0e 94 b2 04 	call	0x964	; 0x964 <update_checksum>
  /* write the defaults */
  eeprom_writebuf(0x0000, (unsigned char *)&defaults, sizeof(defaults));
     b44:	47 e3       	ldi	r20, 0x37	; 55
     b46:	62 e1       	ldi	r22, 0x12	; 18
     b48:	71 e0       	ldi	r23, 0x01	; 1
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 42 01 	call	0x284	; 0x284 <eeprom_writebuf>
}
     b52:	00 00       	nop
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <vpd_is_data_valid>:
 * Returns: None.
 * Changes:
 *    None
 ************************************************/
int vpd_is_data_valid()
{
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(vpd.token, "SER") && is_checksum_valid((unsigned char *)&vpd, sizeof(vpd));
     b62:	6d ea       	ldi	r22, 0xAD	; 173
     b64:	71 e0       	ldi	r23, 0x01	; 1
     b66:	8f e8       	ldi	r24, 0x8F	; 143
     b68:	96 e0       	ldi	r25, 0x06	; 6
     b6a:	0e 94 3a 05 	call	0xa74	; 0xa74 <cmp_str>
     b6e:	89 2b       	or	r24, r25
     b70:	59 f0       	breq	.+22     	; 0xb88 <vpd_is_data_valid+0x2e>
     b72:	67 e3       	ldi	r22, 0x37	; 55
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	8f e8       	ldi	r24, 0x8F	; 143
     b78:	96 e0       	ldi	r25, 0x06	; 6
     b7a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <is_checksum_valid>
     b7e:	89 2b       	or	r24, r25
     b80:	19 f0       	breq	.+6      	; 0xb88 <vpd_is_data_valid+0x2e>
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <vpd_is_data_valid+0x32>
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <read_vpd>:
 * Returns: None.
 * Changes:
 *    None
 ************************************************/
void read_vpd()
{
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
  eeprom_readbuf(0x0000, (unsigned char *)&vpd, sizeof(vpd));
     b9a:	47 e3       	ldi	r20, 0x37	; 55
     b9c:	6f e8       	ldi	r22, 0x8F	; 143
     b9e:	76 e0       	ldi	r23, 0x06	; 6
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 9a 01 	call	0x334	; 0x334 <eeprom_readbuf>
     ba8:	00 00       	nop
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <led_set_blink>:
     bb0:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <blink_msg+0x1>
     bb4:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <blink_msg>
     bb8:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <blink_pos+0x1>
     bbc:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <blink_pos>
     bc0:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <blink_state>
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <delay_set>
     bd0:	0c 94 49 06 	jmp	0xc92	; 0xc92 <led_off>

00000bd4 <led_update>:
     bd4:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <blink_msg>
     bd8:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <blink_msg+0x1>
     bdc:	89 2b       	or	r24, r25
     bde:	09 f4       	brne	.+2      	; 0xbe2 <led_update+0xe>
     be0:	52 c0       	rjmp	.+164    	; 0xc86 <led_update+0xb2>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <delay_isdone>
     bea:	89 2b       	or	r24, r25
     bec:	09 f4       	brne	.+2      	; 0xbf0 <led_update+0x1c>
     bee:	4b c0       	rjmp	.+150    	; 0xc86 <led_update+0xb2>
     bf0:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <blink_state>
     bf4:	81 11       	cpse	r24, r1
     bf6:	34 c0       	rjmp	.+104    	; 0xc60 <led_update+0x8c>
     bf8:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <blink_pos>
     bfc:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <blink_pos+0x1>
     c00:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <blink_msg>
     c04:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <blink_msg+0x1>
     c08:	e2 0f       	add	r30, r18
     c0a:	f3 1f       	adc	r31, r19
     c0c:	80 81       	ld	r24, Z
     c0e:	80 32       	cpi	r24, 0x20	; 32
     c10:	e9 f0       	breq	.+58     	; 0xc4c <led_update+0x78>
     c12:	3c f4       	brge	.+14     	; 0xc22 <led_update+0x4e>
     c14:	81 11       	cpse	r24, r1
     c16:	1d c0       	rjmp	.+58     	; 0xc52 <led_update+0x7e>
     c18:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <blink_pos+0x1>
     c1c:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <blink_pos>
     c20:	08 95       	ret
     c22:	8d 32       	cpi	r24, 0x2D	; 45
     c24:	39 f0       	breq	.+14     	; 0xc34 <led_update+0x60>
     c26:	8e 32       	cpi	r24, 0x2E	; 46
     c28:	a1 f4       	brne	.+40     	; 0xc52 <led_update+0x7e>
     c2a:	0e 94 47 06 	call	0xc8e	; 0xc8e <led_on>
     c2e:	6a ef       	ldi	r22, 0xFA	; 250
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	04 c0       	rjmp	.+8      	; 0xc3c <led_update+0x68>
     c34:	0e 94 47 06 	call	0xc8e	; 0xc8e <led_on>
     c38:	6e ee       	ldi	r22, 0xEE	; 238
     c3a:	72 e0       	ldi	r23, 0x02	; 2
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <delay_set>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <blink_state>
     c4a:	08 95       	ret
     c4c:	68 ee       	ldi	r22, 0xE8	; 232
     c4e:	73 e0       	ldi	r23, 0x03	; 3
     c50:	0b c0       	rjmp	.+22     	; 0xc68 <led_update+0x94>
     c52:	2f 5f       	subi	r18, 0xFF	; 255
     c54:	3f 4f       	sbci	r19, 0xFF	; 255
     c56:	30 93 de 01 	sts	0x01DE, r19	; 0x8001de <blink_pos+0x1>
     c5a:	20 93 dd 01 	sts	0x01DD, r18	; 0x8001dd <blink_pos>
     c5e:	08 95       	ret
     c60:	0e 94 49 06 	call	0xc92	; 0xc92 <led_off>
     c64:	64 e6       	ldi	r22, 0x64	; 100
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <delay_set>
     c70:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <blink_state>
     c74:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <blink_pos>
     c78:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <blink_pos+0x1>
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <blink_pos+0x1>
     c82:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <blink_pos>
     c86:	08 95       	ret

00000c88 <led_init>:
     c88:	21 9a       	sbi	0x04, 1	; 4
     c8a:	29 98       	cbi	0x05, 1	; 5
     c8c:	08 95       	ret

00000c8e <led_on>:
     c8e:	29 9a       	sbi	0x05, 1	; 5
     c90:	08 95       	ret

00000c92 <led_off>:
     c92:	29 98       	cbi	0x05, 1	; 5
     c94:	08 95       	ret

00000c96 <led_is_on>:
     c96:	85 b1       	in	r24, 0x05	; 5
     c98:	86 95       	lsr	r24
     c9a:	81 70       	andi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	08 95       	ret

00000ca0 <log_is_data_valid>:
     ca0:	80 31       	cpi	r24, 0x10	; 16
     ca2:	91 05       	cpc	r25, r1
     ca4:	04 f5       	brge	.+64     	; 0xce6 <log_is_data_valid+0x46>
     ca6:	27 e0       	ldi	r18, 0x07	; 7
     ca8:	28 9f       	mul	r18, r24
     caa:	a0 01       	movw	r20, r0
     cac:	29 9f       	mul	r18, r25
     cae:	50 0d       	add	r21, r0
     cb0:	11 24       	eor	r1, r1
     cb2:	fa 01       	movw	r30, r20
     cb4:	ee 51       	subi	r30, 0x1E	; 30
     cb6:	fe 4f       	sbci	r31, 0xFE	; 254
     cb8:	80 81       	ld	r24, Z
     cba:	81 32       	cpi	r24, 0x21	; 33
     cbc:	a0 f4       	brcc	.+40     	; 0xce6 <log_is_data_valid+0x46>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	fa 01       	movw	r30, r20
     cc6:	e8 0f       	add	r30, r24
     cc8:	f9 1f       	adc	r31, r25
     cca:	ee 51       	subi	r30, 0x1E	; 30
     ccc:	fe 4f       	sbci	r31, 0xFE	; 254
     cce:	30 81       	ld	r19, Z
     cd0:	23 0f       	add	r18, r19
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	87 30       	cpi	r24, 0x07	; 7
     cd6:	91 05       	cpc	r25, r1
     cd8:	a9 f7       	brne	.-22     	; 0xcc4 <log_is_data_valid+0x24>
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	22 23       	and	r18, r18
     ce0:	21 f0       	breq	.+8      	; 0xcea <log_is_data_valid+0x4a>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	08 95       	ret
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	08 95       	ret

00000cec <log_init>:
     cec:	6f 92       	push	r6
     cee:	7f 92       	push	r7
     cf0:	8f 92       	push	r8
     cf2:	9f 92       	push	r9
     cf4:	af 92       	push	r10
     cf6:	bf 92       	push	r11
     cf8:	cf 92       	push	r12
     cfa:	df 92       	push	r13
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	0e 94 f7 01 	call	0x3ee	; 0x3ee <eeprom_isbusy>
     d0c:	89 2b       	or	r24, r25
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <log_init+0x1c>
     d10:	02 e5       	ldi	r16, 0x52	; 82
     d12:	12 e0       	ldi	r17, 0x02	; 2
     d14:	c0 e8       	ldi	r28, 0x80	; 128
     d16:	d0 e0       	ldi	r29, 0x00	; 0
     d18:	be 01       	movw	r22, r28
     d1a:	6e 59       	subi	r22, 0x9E	; 158
     d1c:	7e 4f       	sbci	r23, 0xFE	; 254
     d1e:	47 e0       	ldi	r20, 0x07	; 7
     d20:	ce 01       	movw	r24, r28
     d22:	0e 94 9a 01 	call	0x334	; 0x334 <eeprom_readbuf>
     d26:	f8 01       	movw	r30, r16
     d28:	11 92       	st	Z+, r1
     d2a:	8f 01       	movw	r16, r30
     d2c:	27 96       	adiw	r28, 0x07	; 7
     d2e:	c0 3f       	cpi	r28, 0xF0	; 240
     d30:	d1 05       	cpc	r29, r1
     d32:	91 f7       	brne	.-28     	; 0xd18 <log_init+0x2c>
     d34:	42 ee       	ldi	r20, 0xE2	; 226
     d36:	e4 2e       	mov	r14, r20
     d38:	41 e0       	ldi	r20, 0x01	; 1
     d3a:	f4 2e       	mov	r15, r20
     d3c:	87 01       	movw	r16, r14
     d3e:	c0 e0       	ldi	r28, 0x00	; 0
     d40:	d0 e0       	ldi	r29, 0x00	; 0
     d42:	d1 2c       	mov	r13, r1
     d44:	b1 2c       	mov	r11, r1
     d46:	77 24       	eor	r7, r7
     d48:	7a 94       	dec	r7
     d4a:	ce 01       	movw	r24, r28
     d4c:	0e 94 50 06 	call	0xca0	; 0xca0 <log_is_data_valid>
     d50:	89 2b       	or	r24, r25
     d52:	41 f0       	breq	.+16     	; 0xd64 <log_init+0x78>
     d54:	f8 01       	movw	r30, r16
     d56:	80 81       	ld	r24, Z
     d58:	87 15       	cp	r24, r7
     d5a:	20 f4       	brcc	.+8      	; 0xd64 <log_init+0x78>
     d5c:	bc 2e       	mov	r11, r28
     d5e:	78 2e       	mov	r7, r24
     d60:	dd 24       	eor	r13, r13
     d62:	d3 94       	inc	r13
     d64:	21 96       	adiw	r28, 0x01	; 1
     d66:	09 5f       	subi	r16, 0xF9	; 249
     d68:	1f 4f       	sbci	r17, 0xFF	; 255
     d6a:	c0 31       	cpi	r28, 0x10	; 16
     d6c:	d1 05       	cpc	r29, r1
     d6e:	69 f7       	brne	.-38     	; 0xd4a <log_init+0x5e>
     d70:	dd 20       	and	r13, r13
     d72:	09 f4       	brne	.+2      	; 0xd76 <log_init+0x8a>
     d74:	6a c0       	rjmp	.+212    	; 0xe4a <log_init+0x15e>
     d76:	b0 92 e1 01 	sts	0x01E1, r11	; 0x8001e1 <last_written>
     d7a:	70 92 e0 01 	sts	0x01E0, r7	; 0x8001e0 <last_transaction_written>
     d7e:	cb 2d       	mov	r28, r11
     d80:	d0 e0       	ldi	r29, 0x00	; 0
     d82:	8e 01       	movw	r16, r28
     d84:	0f 5f       	subi	r16, 0xFF	; 255
     d86:	1f 4f       	sbci	r17, 0xFF	; 255
     d88:	87 2c       	mov	r8, r7
     d8a:	2f e0       	ldi	r18, 0x0F	; 15
     d8c:	a2 2e       	mov	r10, r18
     d8e:	37 e0       	ldi	r19, 0x07	; 7
     d90:	93 2e       	mov	r9, r19
     d92:	68 01       	movw	r12, r16
     d94:	ff e0       	ldi	r31, 0x0F	; 15
     d96:	cf 22       	and	r12, r31
     d98:	dd 24       	eor	r13, r13
     d9a:	c6 01       	movw	r24, r12
     d9c:	0e 94 50 06 	call	0xca0	; 0xca0 <log_is_data_valid>
     da0:	89 2b       	or	r24, r25
     da2:	61 f4       	brne	.+24     	; 0xdbc <log_init+0xd0>
     da4:	b0 92 df 01 	sts	0x01DF, r11	; 0x8001df <tail>
     da8:	8e 01       	movw	r16, r28
     daa:	01 50       	subi	r16, 0x01	; 1
     dac:	11 09       	sbc	r17, r1
     dae:	60 97       	sbiw	r28, 0x10	; 16
     db0:	80 e1       	ldi	r24, 0x10	; 16
     db2:	a8 2e       	mov	r10, r24
     db4:	b1 2c       	mov	r11, r1
     db6:	97 e0       	ldi	r25, 0x07	; 7
     db8:	69 2e       	mov	r6, r25
     dba:	3a c0       	rjmp	.+116    	; 0xe30 <log_init+0x144>
     dbc:	9c 9c       	mul	r9, r12
     dbe:	f0 01       	movw	r30, r0
     dc0:	9d 9c       	mul	r9, r13
     dc2:	f0 0d       	add	r31, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	ee 51       	subi	r30, 0x1E	; 30
     dc8:	fe 4f       	sbci	r31, 0xFE	; 254
     dca:	40 81       	ld	r20, Z
     dcc:	24 2f       	mov	r18, r20
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	88 2d       	mov	r24, r8
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	8f 71       	andi	r24, 0x1F	; 31
     dd8:	99 27       	eor	r25, r25
     dda:	28 17       	cp	r18, r24
     ddc:	39 07       	cpc	r19, r25
     dde:	11 f7       	brne	.-60     	; 0xda4 <log_init+0xb8>
     de0:	c0 92 e1 01 	sts	0x01E1, r12	; 0x8001e1 <last_written>
     de4:	40 93 e0 01 	sts	0x01E0, r20	; 0x8001e0 <last_transaction_written>
     de8:	aa 94       	dec	r10
     dea:	0f 5f       	subi	r16, 0xFF	; 255
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	aa 20       	and	r10, r10
     df0:	c9 f2       	breq	.-78     	; 0xda4 <log_init+0xb8>
     df2:	84 2e       	mov	r8, r20
     df4:	ce cf       	rjmp	.-100    	; 0xd92 <log_init+0xa6>
     df6:	f7 01       	movw	r30, r14
     df8:	20 81       	ld	r18, Z
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	87 2d       	mov	r24, r7
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	4f 96       	adiw	r24, 0x1f	; 31
     e02:	8f 71       	andi	r24, 0x1F	; 31
     e04:	99 27       	eor	r25, r25
     e06:	28 17       	cp	r18, r24
     e08:	39 07       	cpc	r19, r25
     e0a:	31 f5       	brne	.+76     	; 0xe58 <log_init+0x16c>
     e0c:	c0 92 df 01 	sts	0x01DF, r12	; 0x8001df <tail>
     e10:	68 9c       	mul	r6, r8
     e12:	f0 01       	movw	r30, r0
     e14:	69 9c       	mul	r6, r9
     e16:	f0 0d       	add	r31, r0
     e18:	11 24       	eor	r1, r1
     e1a:	ee 51       	subi	r30, 0x1E	; 30
     e1c:	fe 4f       	sbci	r31, 0xFE	; 254
     e1e:	70 80       	ld	r7, Z
     e20:	01 50       	subi	r16, 0x01	; 1
     e22:	11 09       	sbc	r17, r1
     e24:	f7 e0       	ldi	r31, 0x07	; 7
     e26:	ef 0e       	add	r14, r31
     e28:	f1 1c       	adc	r15, r1
     e2a:	0c 17       	cp	r16, r28
     e2c:	1d 07       	cpc	r17, r29
     e2e:	a1 f0       	breq	.+40     	; 0xe58 <log_init+0x16c>
     e30:	c8 01       	movw	r24, r16
     e32:	b5 01       	movw	r22, r10
     e34:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__divmodhi4>
     e38:	6c 01       	movw	r12, r24
     e3a:	4c 01       	movw	r8, r24
     e3c:	99 24       	eor	r9, r9
     e3e:	c4 01       	movw	r24, r8
     e40:	0e 94 50 06 	call	0xca0	; 0xca0 <log_is_data_valid>
     e44:	89 2b       	or	r24, r25
     e46:	b9 f6       	brne	.-82     	; 0xdf6 <log_init+0x10a>
     e48:	07 c0       	rjmp	.+14     	; 0xe58 <log_init+0x16c>
     e4a:	8f e0       	ldi	r24, 0x0F	; 15
     e4c:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <last_written>
     e50:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <last_transaction_written>
     e54:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <tail>
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	cf 90       	pop	r12
     e68:	bf 90       	pop	r11
     e6a:	af 90       	pop	r10
     e6c:	9f 90       	pop	r9
     e6e:	8f 90       	pop	r8
     e70:	7f 90       	pop	r7
     e72:	6f 90       	pop	r6
     e74:	08 95       	ret

00000e76 <log_update>:
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	0e 94 f7 01 	call	0x3ee	; 0x3ee <eeprom_isbusy>
     e84:	89 2b       	or	r24, r25
     e86:	39 f5       	brne	.+78     	; 0xed6 <log_update+0x60>
     e88:	e2 e5       	ldi	r30, 0x52	; 82
     e8a:	f2 e0       	ldi	r31, 0x02	; 2
     e8c:	c0 e0       	ldi	r28, 0x00	; 0
     e8e:	d0 e0       	ldi	r29, 0x00	; 0
     e90:	81 91       	ld	r24, Z+
     e92:	88 23       	and	r24, r24
     e94:	e1 f0       	breq	.+56     	; 0xece <log_update+0x58>
     e96:	17 e0       	ldi	r17, 0x07	; 7
     e98:	1c 9f       	mul	r17, r28
     e9a:	c0 01       	movw	r24, r0
     e9c:	1d 9f       	mul	r17, r29
     e9e:	90 0d       	add	r25, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	9c 01       	movw	r18, r24
     ea4:	2e 51       	subi	r18, 0x1E	; 30
     ea6:	3e 4f       	sbci	r19, 0xFE	; 254
     ea8:	79 01       	movw	r14, r18
     eaa:	67 e0       	ldi	r22, 0x07	; 7
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	c9 01       	movw	r24, r18
     eb0:	0e 94 b2 04 	call	0x964	; 0x964 <update_checksum>
     eb4:	c1 9f       	mul	r28, r17
     eb6:	c0 01       	movw	r24, r0
     eb8:	11 24       	eor	r1, r1
     eba:	47 e0       	ldi	r20, 0x07	; 7
     ebc:	b7 01       	movw	r22, r14
     ebe:	80 58       	subi	r24, 0x80	; 128
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	0e 94 42 01 	call	0x284	; 0x284 <eeprom_writebuf>
     ec6:	ce 5a       	subi	r28, 0xAE	; 174
     ec8:	dd 4f       	sbci	r29, 0xFD	; 253
     eca:	18 82       	st	Y, r1
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <log_update+0x60>
     ece:	21 96       	adiw	r28, 0x01	; 1
     ed0:	c0 31       	cpi	r28, 0x10	; 16
     ed2:	d1 05       	cpc	r29, r1
     ed4:	e9 f6       	brne	.-70     	; 0xe90 <log_update+0x1a>
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	08 95       	ret

00000ee2 <log_add_record>:
     ee2:	ef 92       	push	r14
     ee4:	ff 92       	push	r15
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	e8 2e       	mov	r14, r24
     ef0:	c0 91 e1 01 	lds	r28, 0x01E1	; 0x8001e1 <last_written>
     ef4:	d0 e0       	ldi	r29, 0x00	; 0
     ef6:	21 96       	adiw	r28, 0x01	; 1
     ef8:	cf 70       	andi	r28, 0x0F	; 15
     efa:	dd 27       	eor	r29, r29
     efc:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <tail>
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 50 06 	call	0xca0	; 0xca0 <log_is_data_valid>
     f06:	f8 2e       	mov	r15, r24
     f08:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <last_transaction_written>
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	81 32       	cpi	r24, 0x21	; 33
     f10:	18 f4       	brcc	.+6      	; 0xf18 <log_add_record+0x36>
     f12:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <last_transaction_written>
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <log_add_record+0x3a>
     f18:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <last_transaction_written>
     f1c:	87 e0       	ldi	r24, 0x07	; 7
     f1e:	8c 9f       	mul	r24, r28
     f20:	80 01       	movw	r16, r0
     f22:	8d 9f       	mul	r24, r29
     f24:	10 0d       	add	r17, r0
     f26:	11 24       	eor	r1, r1
     f28:	0e 51       	subi	r16, 0x1E	; 30
     f2a:	1e 4f       	sbci	r17, 0xFE	; 254
     f2c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <last_transaction_written>
     f30:	f8 01       	movw	r30, r16
     f32:	80 83       	st	Z, r24
     f34:	0e 94 3e 08 	call	0x107c	; 0x107c <rtc_get_date>
     f38:	f8 01       	movw	r30, r16
     f3a:	61 83       	std	Z+1, r22	; 0x01
     f3c:	72 83       	std	Z+2, r23	; 0x02
     f3e:	83 83       	std	Z+3, r24	; 0x03
     f40:	94 83       	std	Z+4, r25	; 0x04
     f42:	e5 82       	std	Z+5, r14	; 0x05
     f44:	c0 93 e1 01 	sts	0x01E1, r28	; 0x8001e1 <last_written>
     f48:	67 e0       	ldi	r22, 0x07	; 7
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	c8 01       	movw	r24, r16
     f4e:	0e 94 b2 04 	call	0x964	; 0x964 <update_checksum>
     f52:	ce 5a       	subi	r28, 0xAE	; 174
     f54:	dd 4f       	sbci	r29, 0xFD	; 253
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	88 83       	st	Y, r24
     f5a:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <last_written>
     f5e:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <tail>
     f62:	89 13       	cpse	r24, r25
     f64:	08 c0       	rjmp	.+16     	; 0xf76 <log_add_record+0x94>
     f66:	ff 20       	and	r15, r15
     f68:	31 f0       	breq	.+12     	; 0xf76 <log_add_record+0x94>
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	8f 70       	andi	r24, 0x0F	; 15
     f70:	99 27       	eor	r25, r25
     f72:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <tail>
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	08 95       	ret

00000f84 <log_clear>:
     f84:	e2 ee       	ldi	r30, 0xE2	; 226
     f86:	f1 e0       	ldi	r31, 0x01	; 1
     f88:	a2 e5       	ldi	r26, 0x52	; 82
     f8a:	b2 e0       	ldi	r27, 0x02	; 2
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	4f ef       	ldi	r20, 0xFF	; 255
     f90:	5f ef       	ldi	r21, 0xFF	; 255
     f92:	ba 01       	movw	r22, r20
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	80 83       	st	Z, r24
     f98:	85 83       	std	Z+5, r24	; 0x05
     f9a:	41 83       	std	Z+1, r20	; 0x01
     f9c:	52 83       	std	Z+2, r21	; 0x02
     f9e:	63 83       	std	Z+3, r22	; 0x03
     fa0:	74 83       	std	Z+4, r23	; 0x04
     fa2:	9d 93       	st	X+, r25
     fa4:	37 96       	adiw	r30, 0x07	; 7
     fa6:	22 e0       	ldi	r18, 0x02	; 2
     fa8:	e2 35       	cpi	r30, 0x52	; 82
     faa:	f2 07       	cpc	r31, r18
     fac:	a1 f7       	brne	.-24     	; 0xf96 <log_clear+0x12>
     fae:	8f e0       	ldi	r24, 0x0F	; 15
     fb0:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <last_written>
     fb4:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <tail>
     fb8:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <last_transaction_written>
     fbc:	08 95       	ret

00000fbe <log_get_num_entries>:
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	00 91 df 01 	lds	r16, 0x01DF	; 0x8001df <tail>
     fca:	c0 2f       	mov	r28, r16
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	d0 e0       	ldi	r29, 0x00	; 0
     fd0:	ce 01       	movw	r24, r28
     fd2:	0e 94 50 06 	call	0xca0	; 0xca0 <log_is_data_valid>
     fd6:	89 2b       	or	r24, r25
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <log_get_num_entries+0x26>
     fda:	21 96       	adiw	r28, 0x01	; 1
     fdc:	cf 70       	andi	r28, 0x0F	; 15
     fde:	1f 5f       	subi	r17, 0xFF	; 255
     fe0:	0c 13       	cpse	r16, r28
     fe2:	f5 cf       	rjmp	.-22     	; 0xfce <log_get_num_entries+0x10>
     fe4:	81 2f       	mov	r24, r17
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	08 95       	ret

00000ff0 <log_get_record>:
     ff0:	af 92       	push	r10
     ff2:	bf 92       	push	r11
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	6b 01       	movw	r12, r22
    1006:	7c 01       	movw	r14, r24
    1008:	8a 01       	movw	r16, r20
    100a:	59 01       	movw	r10, r18
    100c:	0e 94 df 07 	call	0xfbe	; 0xfbe <log_get_num_entries>
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	c8 16       	cp	r12, r24
    1018:	d9 06       	cpc	r13, r25
    101a:	ea 06       	cpc	r14, r26
    101c:	fb 06       	cpc	r15, r27
    101e:	f8 f4       	brcc	.+62     	; 0x105e <log_get_record+0x6e>
    1020:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <tail>
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	c8 0e       	add	r12, r24
    1028:	d9 1e       	adc	r13, r25
    102a:	8f e0       	ldi	r24, 0x0F	; 15
    102c:	c8 22       	and	r12, r24
    102e:	dd 24       	eor	r13, r13
    1030:	87 e0       	ldi	r24, 0x07	; 7
    1032:	8c 9d       	mul	r24, r12
    1034:	f0 01       	movw	r30, r0
    1036:	8d 9d       	mul	r24, r13
    1038:	f0 0d       	add	r31, r0
    103a:	11 24       	eor	r1, r1
    103c:	ee 51       	subi	r30, 0x1E	; 30
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	81 81       	ldd	r24, Z+1	; 0x01
    1042:	92 81       	ldd	r25, Z+2	; 0x02
    1044:	a3 81       	ldd	r26, Z+3	; 0x03
    1046:	b4 81       	ldd	r27, Z+4	; 0x04
    1048:	e8 01       	movw	r28, r16
    104a:	88 83       	st	Y, r24
    104c:	99 83       	std	Y+1, r25	; 0x01
    104e:	aa 83       	std	Y+2, r26	; 0x02
    1050:	bb 83       	std	Y+3, r27	; 0x03
    1052:	85 81       	ldd	r24, Z+5	; 0x05
    1054:	f5 01       	movw	r30, r10
    1056:	80 83       	st	Z, r24
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <log_get_record+0x72>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	df 90       	pop	r13
    1070:	cf 90       	pop	r12
    1072:	bf 90       	pop	r11
    1074:	af 90       	pop	r10
    1076:	08 95       	ret

00001078 <rtc_init>:
    1078:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <timer1_init>

0000107c <rtc_get_date>:
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	0e 94 cf 0b 	call	0x179e	; 0x179e <timer1_get>
    1084:	00 91 c6 06 	lds	r16, 0x06C6	; 0x8006c6 <rtc_base>
    1088:	10 91 c7 06 	lds	r17, 0x06C7	; 0x8006c7 <rtc_base+0x1>
    108c:	20 91 c8 06 	lds	r18, 0x06C8	; 0x8006c8 <rtc_base+0x2>
    1090:	30 91 c9 06 	lds	r19, 0x06C9	; 0x8006c9 <rtc_base+0x3>
    1094:	60 0f       	add	r22, r16
    1096:	71 1f       	adc	r23, r17
    1098:	82 1f       	adc	r24, r18
    109a:	93 1f       	adc	r25, r19
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <is_leapyear>:
    10a2:	9c 01       	movw	r18, r24
    10a4:	60 e9       	ldi	r22, 0x90	; 144
    10a6:	71 e0       	ldi	r23, 0x01	; 1
    10a8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__udivmodhi4>
    10ac:	89 2b       	or	r24, r25
    10ae:	79 f0       	breq	.+30     	; 0x10ce <is_leapyear+0x2c>
    10b0:	c9 01       	movw	r24, r18
    10b2:	83 70       	andi	r24, 0x03	; 3
    10b4:	99 27       	eor	r25, r25
    10b6:	89 2b       	or	r24, r25
    10b8:	61 f4       	brne	.+24     	; 0x10d2 <is_leapyear+0x30>
    10ba:	c9 01       	movw	r24, r18
    10bc:	64 e6       	ldi	r22, 0x64	; 100
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__udivmodhi4>
    10c4:	9c 01       	movw	r18, r24
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	23 2b       	or	r18, r19
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <is_leapyear+0x32>
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <is_leapyear+0x30>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	08 95       	ret

000010d6 <rtc_set_by_datestr>:
    10d6:	2f 92       	push	r2
    10d8:	3f 92       	push	r3
    10da:	4f 92       	push	r4
    10dc:	5f 92       	push	r5
    10de:	6f 92       	push	r6
    10e0:	7f 92       	push	r7
    10e2:	8f 92       	push	r8
    10e4:	9f 92       	push	r9
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	67 97       	sbiw	r28, 0x17	; 23
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	2c e0       	ldi	r18, 0x0C	; 12
    110c:	e1 eb       	ldi	r30, 0xB1	; 177
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	ae 01       	movw	r20, r28
    1112:	4f 5f       	subi	r20, 0xFF	; 255
    1114:	5f 4f       	sbci	r21, 0xFF	; 255
    1116:	1a 01       	movw	r2, r20
    1118:	da 01       	movw	r26, r20
    111a:	01 90       	ld	r0, Z+
    111c:	0d 92       	st	X+, r0
    111e:	2a 95       	dec	r18
    1120:	e1 f7       	brne	.-8      	; 0x111a <rtc_set_by_datestr+0x44>
    1122:	dc 01       	movw	r26, r24
    1124:	2c 91       	ld	r18, X
    1126:	22 0f       	add	r18, r18
    1128:	20 56       	subi	r18, 0x60	; 96
    112a:	32 2f       	mov	r19, r18
    112c:	33 0f       	add	r19, r19
    112e:	33 0f       	add	r19, r19
    1130:	23 0f       	add	r18, r19
    1132:	11 96       	adiw	r26, 0x01	; 1
    1134:	3c 91       	ld	r19, X
    1136:	11 97       	sbiw	r26, 0x01	; 1
    1138:	31 53       	subi	r19, 0x31	; 49
    113a:	23 0f       	add	r18, r19
    113c:	2d 87       	std	Y+13, r18	; 0x0d
    113e:	13 96       	adiw	r26, 0x03	; 3
    1140:	2c 91       	ld	r18, X
    1142:	13 97       	sbiw	r26, 0x03	; 3
    1144:	02 2e       	mov	r0, r18
    1146:	00 0c       	add	r0, r0
    1148:	33 0b       	sbc	r19, r19
    114a:	20 53       	subi	r18, 0x30	; 48
    114c:	31 09       	sbc	r19, r1
    114e:	6a e0       	ldi	r22, 0x0A	; 10
    1150:	62 9f       	mul	r22, r18
    1152:	a0 01       	movw	r20, r0
    1154:	63 9f       	mul	r22, r19
    1156:	50 0d       	add	r21, r0
    1158:	11 24       	eor	r1, r1
    115a:	14 96       	adiw	r26, 0x04	; 4
    115c:	cc 90       	ld	r12, X
    115e:	0c 2c       	mov	r0, r12
    1160:	00 0c       	add	r0, r0
    1162:	dd 08       	sbc	r13, r13
    1164:	b0 e3       	ldi	r27, 0x30	; 48
    1166:	cb 1a       	sub	r12, r27
    1168:	d1 08       	sbc	r13, r1
    116a:	c4 0e       	add	r12, r20
    116c:	d5 1e       	adc	r13, r21
    116e:	86 01       	movw	r16, r12
    1170:	01 50       	subi	r16, 0x01	; 1
    1172:	11 09       	sbc	r17, r1
    1174:	fc 01       	movw	r30, r24
    1176:	26 81       	ldd	r18, Z+6	; 0x06
    1178:	02 2e       	mov	r0, r18
    117a:	00 0c       	add	r0, r0
    117c:	33 0b       	sbc	r19, r19
    117e:	20 53       	subi	r18, 0x30	; 48
    1180:	31 09       	sbc	r19, r1
    1182:	e8 ee       	ldi	r30, 0xE8	; 232
    1184:	f3 e0       	ldi	r31, 0x03	; 3
    1186:	2e 9f       	mul	r18, r30
    1188:	a0 01       	movw	r20, r0
    118a:	2f 9f       	mul	r18, r31
    118c:	50 0d       	add	r21, r0
    118e:	3e 9f       	mul	r19, r30
    1190:	50 0d       	add	r21, r0
    1192:	11 24       	eor	r1, r1
    1194:	dc 01       	movw	r26, r24
    1196:	17 96       	adiw	r26, 0x07	; 7
    1198:	2c 91       	ld	r18, X
    119a:	17 97       	sbiw	r26, 0x07	; 7
    119c:	02 2e       	mov	r0, r18
    119e:	00 0c       	add	r0, r0
    11a0:	33 0b       	sbc	r19, r19
    11a2:	20 53       	subi	r18, 0x30	; 48
    11a4:	31 09       	sbc	r19, r1
    11a6:	74 e6       	ldi	r23, 0x64	; 100
    11a8:	72 9f       	mul	r23, r18
    11aa:	70 01       	movw	r14, r0
    11ac:	73 9f       	mul	r23, r19
    11ae:	f0 0c       	add	r15, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	e4 0e       	add	r14, r20
    11b4:	f5 1e       	adc	r15, r21
    11b6:	18 96       	adiw	r26, 0x08	; 8
    11b8:	4c 91       	ld	r20, X
    11ba:	18 97       	sbiw	r26, 0x08	; 8
    11bc:	04 2e       	mov	r0, r20
    11be:	00 0c       	add	r0, r0
    11c0:	55 0b       	sbc	r21, r21
    11c2:	40 53       	subi	r20, 0x30	; 48
    11c4:	51 09       	sbc	r21, r1
    11c6:	64 9f       	mul	r22, r20
    11c8:	90 01       	movw	r18, r0
    11ca:	65 9f       	mul	r22, r21
    11cc:	30 0d       	add	r19, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	e2 0e       	add	r14, r18
    11d2:	f3 1e       	adc	r15, r19
    11d4:	19 96       	adiw	r26, 0x09	; 9
    11d6:	2c 91       	ld	r18, X
    11d8:	19 97       	sbiw	r26, 0x09	; 9
    11da:	f7 01       	movw	r30, r14
    11dc:	e2 0f       	add	r30, r18
    11de:	f1 1d       	adc	r31, r1
    11e0:	27 fd       	sbrc	r18, 7
    11e2:	fa 95       	dec	r31
    11e4:	af 01       	movw	r20, r30
    11e6:	58 50       	subi	r21, 0x08	; 8
    11e8:	7a 01       	movw	r14, r20
    11ea:	1b 96       	adiw	r26, 0x0b	; 11
    11ec:	2c 91       	ld	r18, X
    11ee:	1b 97       	sbiw	r26, 0x0b	; 11
    11f0:	22 0f       	add	r18, r18
    11f2:	20 56       	subi	r18, 0x60	; 96
    11f4:	32 2f       	mov	r19, r18
    11f6:	33 0f       	add	r19, r19
    11f8:	33 0f       	add	r19, r19
    11fa:	23 0f       	add	r18, r19
    11fc:	1c 96       	adiw	r26, 0x0c	; 12
    11fe:	3c 91       	ld	r19, X
    1200:	1c 97       	sbiw	r26, 0x0c	; 12
    1202:	30 53       	subi	r19, 0x30	; 48
    1204:	23 0f       	add	r18, r19
    1206:	29 8b       	std	Y+17, r18	; 0x11
    1208:	1e 96       	adiw	r26, 0x0e	; 14
    120a:	2c 91       	ld	r18, X
    120c:	1e 97       	sbiw	r26, 0x0e	; 14
    120e:	22 0f       	add	r18, r18
    1210:	20 56       	subi	r18, 0x60	; 96
    1212:	32 2f       	mov	r19, r18
    1214:	33 0f       	add	r19, r19
    1216:	33 0f       	add	r19, r19
    1218:	23 0f       	add	r18, r19
    121a:	1f 96       	adiw	r26, 0x0f	; 15
    121c:	3c 91       	ld	r19, X
    121e:	1f 97       	sbiw	r26, 0x0f	; 15
    1220:	30 53       	subi	r19, 0x30	; 48
    1222:	23 0f       	add	r18, r19
    1224:	2a 8b       	std	Y+18, r18	; 0x12
    1226:	51 96       	adiw	r26, 0x11	; 17
    1228:	2c 91       	ld	r18, X
    122a:	51 97       	sbiw	r26, 0x11	; 17
    122c:	22 0f       	add	r18, r18
    122e:	20 56       	subi	r18, 0x60	; 96
    1230:	32 2f       	mov	r19, r18
    1232:	33 0f       	add	r19, r19
    1234:	33 0f       	add	r19, r19
    1236:	23 0f       	add	r18, r19
    1238:	52 96       	adiw	r26, 0x12	; 18
    123a:	8c 91       	ld	r24, X
    123c:	80 53       	subi	r24, 0x30	; 48
    123e:	28 0f       	add	r18, r24
    1240:	2b 8b       	std	Y+19, r18	; 0x13
    1242:	ca 01       	movw	r24, r20
    1244:	0e 94 51 08 	call	0x10a2	; 0x10a2 <is_leapyear>
    1248:	88 23       	and	r24, r24
    124a:	21 f0       	breq	.+8      	; 0x1254 <rtc_set_by_datestr+0x17e>
    124c:	5d 85       	ldd	r21, Y+13	; 0x0d
    124e:	52 30       	cpi	r21, 0x02	; 2
    1250:	08 f0       	brcs	.+2      	; 0x1254 <rtc_set_by_datestr+0x17e>
    1252:	86 01       	movw	r16, r12
    1254:	c7 01       	movw	r24, r14
    1256:	60 e9       	ldi	r22, 0x90	; 144
    1258:	71 e0       	ldi	r23, 0x01	; 1
    125a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__udivmodhi4>
    125e:	fc 01       	movw	r30, r24
    1260:	db 01       	movw	r26, r22
    1262:	20 e8       	ldi	r18, 0x80	; 128
    1264:	39 e5       	ldi	r19, 0x59	; 89
    1266:	40 e6       	ldi	r20, 0x60	; 96
    1268:	50 ef       	ldi	r21, 0xF0	; 240
    126a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__muluhisi3>
    126e:	2b 01       	movw	r4, r22
    1270:	3c 01       	movw	r6, r24
    1272:	cf 01       	movw	r24, r30
    1274:	64 e6       	ldi	r22, 0x64	; 100
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__udivmodhi4>
    127c:	fc 01       	movw	r30, r24
    127e:	db 01       	movw	r26, r22
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	32 ec       	ldi	r19, 0xC2	; 194
    1284:	47 e1       	ldi	r20, 0x17	; 23
    1286:	5c eb       	ldi	r21, 0xBC	; 188
    1288:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__muluhisi3>
    128c:	4b 01       	movw	r8, r22
    128e:	5c 01       	movw	r10, r24
    1290:	df 01       	movw	r26, r30
    1292:	b6 95       	lsr	r27
    1294:	a7 95       	ror	r26
    1296:	b6 95       	lsr	r27
    1298:	a7 95       	ror	r26
    129a:	20 e8       	ldi	r18, 0x80	; 128
    129c:	3f e1       	ldi	r19, 0x1F	; 31
    129e:	46 e8       	ldi	r20, 0x86	; 134
    12a0:	57 e0       	ldi	r21, 0x07	; 7
    12a2:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__muluhisi3>
    12a6:	6b 01       	movw	r12, r22
    12a8:	7c 01       	movw	r14, r24
    12aa:	df 01       	movw	r26, r30
    12ac:	a3 70       	andi	r26, 0x03	; 3
    12ae:	bb 27       	eor	r27, r27
    12b0:	20 e8       	ldi	r18, 0x80	; 128
    12b2:	33 e3       	ldi	r19, 0x33	; 51
    12b4:	41 ee       	ldi	r20, 0xE1	; 225
    12b6:	51 e0       	ldi	r21, 0x01	; 1
    12b8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__muluhisi3>
    12bc:	6c 8b       	std	Y+20, r22	; 0x14
    12be:	7d 8b       	std	Y+21, r23	; 0x15
    12c0:	8e 8b       	std	Y+22, r24	; 0x16
    12c2:	9f 8b       	std	Y+23, r25	; 0x17
    12c4:	f1 01       	movw	r30, r2
    12c6:	8e 2f       	mov	r24, r30
    12c8:	82 19       	sub	r24, r2
    12ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    12cc:	89 17       	cp	r24, r25
    12ce:	20 f4       	brcc	.+8      	; 0x12d8 <rtc_set_by_datestr+0x202>
    12d0:	81 91       	ld	r24, Z+
    12d2:	08 0f       	add	r16, r24
    12d4:	11 1d       	adc	r17, r1
    12d6:	f7 cf       	rjmp	.-18     	; 0x12c6 <rtc_set_by_datestr+0x1f0>
    12d8:	a9 89       	ldd	r26, Y+17	; 0x11
    12da:	2a 2f       	mov	r18, r26
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	a0 e1       	ldi	r26, 0x10	; 16
    12e0:	be e0       	ldi	r27, 0x0E	; 14
    12e2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__umulhisi3>
    12e6:	6d 87       	std	Y+13, r22	; 0x0d
    12e8:	7e 87       	std	Y+14, r23	; 0x0e
    12ea:	8f 87       	std	Y+15, r24	; 0x0f
    12ec:	98 8b       	std	Y+16, r25	; 0x10
    12ee:	ba 89       	ldd	r27, Y+18	; 0x12
    12f0:	2b 2f       	mov	r18, r27
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	ac e3       	ldi	r26, 0x3C	; 60
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__umulhisi3>
    12fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    12fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1300:	4f 85       	ldd	r20, Y+15	; 0x0f
    1302:	58 89       	ldd	r21, Y+16	; 0x10
    1304:	26 0f       	add	r18, r22
    1306:	37 1f       	adc	r19, r23
    1308:	48 1f       	adc	r20, r24
    130a:	59 1f       	adc	r21, r25
    130c:	da 01       	movw	r26, r20
    130e:	c9 01       	movw	r24, r18
    1310:	3b 89       	ldd	r19, Y+19	; 0x13
    1312:	83 0f       	add	r24, r19
    1314:	91 1d       	adc	r25, r1
    1316:	a1 1d       	adc	r26, r1
    1318:	b1 1d       	adc	r27, r1
    131a:	48 0e       	add	r4, r24
    131c:	59 1e       	adc	r5, r25
    131e:	6a 1e       	adc	r6, r26
    1320:	7b 1e       	adc	r7, r27
    1322:	84 0c       	add	r8, r4
    1324:	95 1c       	adc	r9, r5
    1326:	a6 1c       	adc	r10, r6
    1328:	b7 1c       	adc	r11, r7
    132a:	c8 0c       	add	r12, r8
    132c:	d9 1c       	adc	r13, r9
    132e:	ea 1c       	adc	r14, r10
    1330:	fb 1c       	adc	r15, r11
    1332:	8c 89       	ldd	r24, Y+20	; 0x14
    1334:	9d 89       	ldd	r25, Y+21	; 0x15
    1336:	ae 89       	ldd	r26, Y+22	; 0x16
    1338:	bf 89       	ldd	r27, Y+23	; 0x17
    133a:	c8 0e       	add	r12, r24
    133c:	d9 1e       	adc	r13, r25
    133e:	ea 1e       	adc	r14, r26
    1340:	fb 1e       	adc	r15, r27
    1342:	d8 01       	movw	r26, r16
    1344:	20 e8       	ldi	r18, 0x80	; 128
    1346:	31 e5       	ldi	r19, 0x51	; 81
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__muluhisi3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	8c 0d       	add	r24, r12
    1356:	9d 1d       	adc	r25, r13
    1358:	ae 1d       	adc	r26, r14
    135a:	bf 1d       	adc	r27, r15
    135c:	80 93 c6 06 	sts	0x06C6, r24	; 0x8006c6 <rtc_base>
    1360:	90 93 c7 06 	sts	0x06C7, r25	; 0x8006c7 <rtc_base+0x1>
    1364:	a0 93 c8 06 	sts	0x06C8, r26	; 0x8006c8 <rtc_base+0x2>
    1368:	b0 93 c9 06 	sts	0x06C9, r27	; 0x8006c9 <rtc_base+0x3>
    136c:	67 96       	adiw	r28, 0x17	; 23
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	df 90       	pop	r13
    1386:	cf 90       	pop	r12
    1388:	bf 90       	pop	r11
    138a:	af 90       	pop	r10
    138c:	9f 90       	pop	r9
    138e:	8f 90       	pop	r8
    1390:	7f 90       	pop	r7
    1392:	6f 90       	pop	r6
    1394:	5f 90       	pop	r5
    1396:	4f 90       	pop	r4
    1398:	3f 90       	pop	r3
    139a:	2f 90       	pop	r2
    139c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <timer1_clear>

000013a0 <get_month>:
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	68 97       	sbiw	r28, 0x18	; 24
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	7b 01       	movw	r14, r22
    13be:	2c e0       	ldi	r18, 0x0C	; 12
    13c0:	e1 eb       	ldi	r30, 0xB1	; 177
    13c2:	f1 e0       	ldi	r31, 0x01	; 1
    13c4:	de 01       	movw	r26, r28
    13c6:	1d 96       	adiw	r26, 0x0d	; 13
    13c8:	01 90       	ld	r0, Z+
    13ca:	0d 92       	st	X+, r0
    13cc:	2a 95       	dec	r18
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <get_month+0x28>
    13d0:	8e 01       	movw	r16, r28
    13d2:	0f 5f       	subi	r16, 0xFF	; 255
    13d4:	1f 4f       	sbci	r17, 0xFF	; 255
    13d6:	2c e0       	ldi	r18, 0x0C	; 12
    13d8:	f8 01       	movw	r30, r16
    13da:	11 92       	st	Z+, r1
    13dc:	2a 95       	dec	r18
    13de:	e9 f7       	brne	.-6      	; 0x13da <get_month+0x3a>
    13e0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <is_leapyear>
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	de 01       	movw	r26, r28
    13e8:	1d 96       	adiw	r26, 0x0d	; 13
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	f7 01       	movw	r30, r14
    13ee:	40 81       	ld	r20, Z
    13f0:	51 81       	ldd	r21, Z+1	; 0x01
    13f2:	9d 91       	ld	r25, X+
    13f4:	f8 01       	movw	r30, r16
    13f6:	21 91       	ld	r18, Z+
    13f8:	8f 01       	movw	r16, r30
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	29 0f       	add	r18, r25
    13fe:	31 1d       	adc	r19, r1
    1400:	42 17       	cp	r20, r18
    1402:	53 07       	cpc	r21, r19
    1404:	40 f0       	brcs	.+16     	; 0x1416 <get_month+0x76>
    1406:	42 1b       	sub	r20, r18
    1408:	53 0b       	sbc	r21, r19
    140a:	f7 01       	movw	r30, r14
    140c:	51 83       	std	Z+1, r21	; 0x01
    140e:	40 83       	st	Z, r20
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	8c 30       	cpi	r24, 0x0C	; 12
    1414:	59 f7       	brne	.-42     	; 0x13ec <get_month+0x4c>
    1416:	68 96       	adiw	r28, 0x18	; 24
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	08 95       	ret

00001430 <rtc_num2datestr>:
    1430:	4f 92       	push	r4
    1432:	5f 92       	push	r5
    1434:	6f 92       	push	r6
    1436:	7f 92       	push	r7
    1438:	8f 92       	push	r8
    143a:	9f 92       	push	r9
    143c:	af 92       	push	r10
    143e:	bf 92       	push	r11
    1440:	cf 92       	push	r12
    1442:	df 92       	push	r13
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	00 d0       	rcall	.+0      	; 0x144e <rtc_num2datestr+0x1e>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	2b 01       	movw	r4, r22
    1454:	3c 01       	movw	r6, r24
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	a0 e0       	ldi	r26, 0x00	; 0
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	20 e8       	ldi	r18, 0x80	; 128
    1460:	42 16       	cp	r4, r18
    1462:	29 e5       	ldi	r18, 0x59	; 89
    1464:	52 06       	cpc	r5, r18
    1466:	20 e6       	ldi	r18, 0x60	; 96
    1468:	62 06       	cpc	r6, r18
    146a:	20 ef       	ldi	r18, 0xF0	; 240
    146c:	72 06       	cpc	r7, r18
    146e:	18 f4       	brcc	.+6      	; 0x1476 <rtc_num2datestr+0x46>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	dc 01       	movw	r26, r24
    1476:	20 e9       	ldi	r18, 0x90	; 144
    1478:	31 e0       	ldi	r19, 0x01	; 1
    147a:	82 9f       	mul	r24, r18
    147c:	50 01       	movw	r10, r0
    147e:	83 9f       	mul	r24, r19
    1480:	b0 0c       	add	r11, r0
    1482:	92 9f       	mul	r25, r18
    1484:	b0 0c       	add	r11, r0
    1486:	11 24       	eor	r1, r1
    1488:	80 e3       	ldi	r24, 0x30	; 48
    148a:	a8 1a       	sub	r10, r24
    148c:	88 ef       	ldi	r24, 0xF8	; 248
    148e:	b8 0a       	sbc	r11, r24
    1490:	c1 2c       	mov	r12, r1
    1492:	d1 2c       	mov	r13, r1
    1494:	76 01       	movw	r14, r12
    1496:	c3 94       	inc	r12
    1498:	20 e8       	ldi	r18, 0x80	; 128
    149a:	42 16       	cp	r4, r18
    149c:	29 e5       	ldi	r18, 0x59	; 89
    149e:	52 06       	cpc	r5, r18
    14a0:	20 e6       	ldi	r18, 0x60	; 96
    14a2:	62 06       	cpc	r6, r18
    14a4:	20 ef       	ldi	r18, 0xF0	; 240
    14a6:	72 06       	cpc	r7, r18
    14a8:	18 f4       	brcc	.+6      	; 0x14b0 <rtc_num2datestr+0x80>
    14aa:	c1 2c       	mov	r12, r1
    14ac:	d1 2c       	mov	r13, r1
    14ae:	76 01       	movw	r14, r12
    14b0:	a7 01       	movw	r20, r14
    14b2:	96 01       	movw	r18, r12
    14b4:	60 e8       	ldi	r22, 0x80	; 128
    14b6:	79 e5       	ldi	r23, 0x59	; 89
    14b8:	80 e6       	ldi	r24, 0x60	; 96
    14ba:	90 ef       	ldi	r25, 0xF0	; 240
    14bc:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__mulsi3>
    14c0:	73 01       	movw	r14, r6
    14c2:	62 01       	movw	r12, r4
    14c4:	c6 1a       	sub	r12, r22
    14c6:	d7 0a       	sbc	r13, r23
    14c8:	e8 0a       	sbc	r14, r24
    14ca:	f9 0a       	sbc	r15, r25
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a0 e0       	ldi	r26, 0x00	; 0
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	c1 14       	cp	r12, r1
    14d6:	22 ec       	ldi	r18, 0xC2	; 194
    14d8:	d2 06       	cpc	r13, r18
    14da:	27 e1       	ldi	r18, 0x17	; 23
    14dc:	e2 06       	cpc	r14, r18
    14de:	2c eb       	ldi	r18, 0xBC	; 188
    14e0:	f2 06       	cpc	r15, r18
    14e2:	18 f4       	brcc	.+6      	; 0x14ea <rtc_num2datestr+0xba>
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	dc 01       	movw	r26, r24
    14ea:	44 e6       	ldi	r20, 0x64	; 100
    14ec:	48 9f       	mul	r20, r24
    14ee:	90 01       	movw	r18, r0
    14f0:	49 9f       	mul	r20, r25
    14f2:	30 0d       	add	r19, r0
    14f4:	11 24       	eor	r1, r1
    14f6:	a2 0e       	add	r10, r18
    14f8:	b3 1e       	adc	r11, r19
    14fa:	21 e0       	ldi	r18, 0x01	; 1
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	c1 14       	cp	r12, r1
    1504:	82 ec       	ldi	r24, 0xC2	; 194
    1506:	d8 06       	cpc	r13, r24
    1508:	87 e1       	ldi	r24, 0x17	; 23
    150a:	e8 06       	cpc	r14, r24
    150c:	8c eb       	ldi	r24, 0xBC	; 188
    150e:	f8 06       	cpc	r15, r24
    1510:	18 f4       	brcc	.+6      	; 0x1518 <rtc_num2datestr+0xe8>
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	a9 01       	movw	r20, r18
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	72 ec       	ldi	r23, 0xC2	; 194
    151c:	87 e1       	ldi	r24, 0x17	; 23
    151e:	9c eb       	ldi	r25, 0xBC	; 188
    1520:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__mulsi3>
    1524:	a7 01       	movw	r20, r14
    1526:	96 01       	movw	r18, r12
    1528:	26 1b       	sub	r18, r22
    152a:	37 0b       	sbc	r19, r23
    152c:	48 0b       	sbc	r20, r24
    152e:	59 0b       	sbc	r21, r25
    1530:	ca 01       	movw	r24, r20
    1532:	b9 01       	movw	r22, r18
    1534:	20 e8       	ldi	r18, 0x80	; 128
    1536:	3f e1       	ldi	r19, 0x1F	; 31
    1538:	46 e8       	ldi	r20, 0x86	; 134
    153a:	57 e0       	ldi	r21, 0x07	; 7
    153c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__udivmodsi4>
    1540:	22 0f       	add	r18, r18
    1542:	33 1f       	adc	r19, r19
    1544:	22 0f       	add	r18, r18
    1546:	33 1f       	adc	r19, r19
    1548:	a2 0e       	add	r10, r18
    154a:	b3 1e       	adc	r11, r19
    154c:	20 e8       	ldi	r18, 0x80	; 128
    154e:	33 e3       	ldi	r19, 0x33	; 51
    1550:	41 ee       	ldi	r20, 0xE1	; 225
    1552:	51 e0       	ldi	r21, 0x01	; 1
    1554:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__udivmodsi4>
    1558:	75 01       	movw	r14, r10
    155a:	e2 0e       	add	r14, r18
    155c:	f3 1e       	adc	r15, r19
    155e:	20 e8       	ldi	r18, 0x80	; 128
    1560:	31 e5       	ldi	r19, 0x51	; 81
    1562:	41 e0       	ldi	r20, 0x01	; 1
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__udivmodsi4>
    156a:	4b 01       	movw	r8, r22
    156c:	5c 01       	movw	r10, r24
    156e:	3a 83       	std	Y+2, r19	; 0x02
    1570:	29 83       	std	Y+1, r18	; 0x01
    1572:	be 01       	movw	r22, r28
    1574:	6f 5f       	subi	r22, 0xFF	; 255
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	c7 01       	movw	r24, r14
    157a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <get_month>
    157e:	d8 2e       	mov	r13, r24
    1580:	c5 01       	movw	r24, r10
    1582:	b4 01       	movw	r22, r8
    1584:	20 e1       	ldi	r18, 0x10	; 16
    1586:	3e e0       	ldi	r19, 0x0E	; 14
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__udivmodsi4>
    1590:	29 01       	movw	r4, r18
    1592:	3a 01       	movw	r6, r20
    1594:	4b 01       	movw	r8, r22
    1596:	5c 01       	movw	r10, r24
    1598:	6d eb       	ldi	r22, 0xBD	; 189
    159a:	71 e0       	ldi	r23, 0x01	; 1
    159c:	89 e4       	ldi	r24, 0x49	; 73
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	0e 94 2f 0b 	call	0x165e	; 0x165e <str_cpy>
    15a4:	6d 2d       	mov	r22, r13
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	6f 5f       	subi	r22, 0xFF	; 255
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	42 e0       	ldi	r20, 0x02	; 2
    15ae:	89 e4       	ldi	r24, 0x49	; 73
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	0e 94 39 0b 	call	0x1672	; 0x1672 <str_writeudec16>
    15b6:	69 81       	ldd	r22, Y+1	; 0x01
    15b8:	7a 81       	ldd	r23, Y+2	; 0x02
    15ba:	6f 5f       	subi	r22, 0xFF	; 255
    15bc:	7f 4f       	sbci	r23, 0xFF	; 255
    15be:	42 e0       	ldi	r20, 0x02	; 2
    15c0:	8c e4       	ldi	r24, 0x4C	; 76
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 39 0b 	call	0x1672	; 0x1672 <str_writeudec16>
    15c8:	44 e0       	ldi	r20, 0x04	; 4
    15ca:	b7 01       	movw	r22, r14
    15cc:	8f e4       	ldi	r24, 0x4F	; 79
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	0e 94 39 0b 	call	0x1672	; 0x1672 <str_writeudec16>
    15d4:	42 e0       	ldi	r20, 0x02	; 2
    15d6:	b2 01       	movw	r22, r4
    15d8:	84 e5       	ldi	r24, 0x54	; 84
    15da:	91 e0       	ldi	r25, 0x01	; 1
    15dc:	0e 94 39 0b 	call	0x1672	; 0x1672 <str_writeudec16>
    15e0:	c5 01       	movw	r24, r10
    15e2:	b4 01       	movw	r22, r8
    15e4:	2c e3       	ldi	r18, 0x3C	; 60
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__udivmodsi4>
    15f0:	49 01       	movw	r8, r18
    15f2:	5a 01       	movw	r10, r20
    15f4:	6b 01       	movw	r12, r22
    15f6:	7c 01       	movw	r14, r24
    15f8:	42 e0       	ldi	r20, 0x02	; 2
    15fa:	b4 01       	movw	r22, r8
    15fc:	87 e5       	ldi	r24, 0x57	; 87
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	0e 94 39 0b 	call	0x1672	; 0x1672 <str_writeudec16>
    1604:	42 e0       	ldi	r20, 0x02	; 2
    1606:	b6 01       	movw	r22, r12
    1608:	8a e5       	ldi	r24, 0x5A	; 90
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 39 0b 	call	0x1672	; 0x1672 <str_writeudec16>
    1610:	89 e4       	ldi	r24, 0x49	; 73
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	df 90       	pop	r13
    1622:	cf 90       	pop	r12
    1624:	bf 90       	pop	r11
    1626:	af 90       	pop	r10
    1628:	9f 90       	pop	r9
    162a:	8f 90       	pop	r8
    162c:	7f 90       	pop	r7
    162e:	6f 90       	pop	r6
    1630:	5f 90       	pop	r5
    1632:	4f 90       	pop	r4
    1634:	08 95       	ret

00001636 <rtc_get_date_string>:
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	0e 94 cf 0b 	call	0x179e	; 0x179e <timer1_get>
    163e:	00 91 c6 06 	lds	r16, 0x06C6	; 0x8006c6 <rtc_base>
    1642:	10 91 c7 06 	lds	r17, 0x06C7	; 0x8006c7 <rtc_base+0x1>
    1646:	20 91 c8 06 	lds	r18, 0x06C8	; 0x8006c8 <rtc_base+0x2>
    164a:	30 91 c9 06 	lds	r19, 0x06C9	; 0x8006c9 <rtc_base+0x3>
    164e:	60 0f       	add	r22, r16
    1650:	71 1f       	adc	r23, r17
    1652:	82 1f       	adc	r24, r18
    1654:	93 1f       	adc	r25, r19
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <rtc_num2datestr>

0000165e <str_cpy>:
    165e:	fc 01       	movw	r30, r24
    1660:	db 01       	movw	r26, r22
    1662:	8d 91       	ld	r24, X+
    1664:	bd 01       	movw	r22, r26
    1666:	88 23       	and	r24, r24
    1668:	11 f0       	breq	.+4      	; 0x166e <str_cpy+0x10>
    166a:	81 93       	st	Z+, r24
    166c:	f9 cf       	rjmp	.-14     	; 0x1660 <str_cpy+0x2>
    166e:	10 82       	st	Z, r1
    1670:	08 95       	ret

00001672 <str_writeudec16>:
    1672:	9f 92       	push	r9
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	00 d0       	rcall	.+0      	; 0x168a <str_writeudec16+0x18>
    168a:	00 d0       	rcall	.+0      	; 0x168c <str_writeudec16+0x1a>
    168c:	1f 92       	push	r1
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	fc 01       	movw	r30, r24
    1694:	6b 01       	movw	r12, r22
    1696:	9e 01       	movw	r18, r28
    1698:	2f 5f       	subi	r18, 0xFF	; 255
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	8e 01       	movw	r16, r28
    169e:	0a 5f       	subi	r16, 0xFA	; 250
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	ee 24       	eor	r14, r14
    16a4:	e3 94       	inc	r14
    16a6:	f1 2c       	mov	r15, r1
    16a8:	9a e0       	ldi	r25, 0x0A	; 10
    16aa:	99 2e       	mov	r9, r25
    16ac:	9e 9c       	mul	r9, r14
    16ae:	50 01       	movw	r10, r0
    16b0:	9f 9c       	mul	r9, r15
    16b2:	b0 0c       	add	r11, r0
    16b4:	11 24       	eor	r1, r1
    16b6:	c6 01       	movw	r24, r12
    16b8:	b5 01       	movw	r22, r10
    16ba:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__udivmodhi4>
    16be:	b7 01       	movw	r22, r14
    16c0:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__udivmodhi4>
    16c4:	d9 01       	movw	r26, r18
    16c6:	6d 93       	st	X+, r22
    16c8:	9d 01       	movw	r18, r26
    16ca:	c6 1a       	sub	r12, r22
    16cc:	d1 08       	sbc	r13, r1
    16ce:	67 fd       	sbrc	r22, 7
    16d0:	d3 94       	inc	r13
    16d2:	75 01       	movw	r14, r10
    16d4:	a0 17       	cp	r26, r16
    16d6:	b1 07       	cpc	r27, r17
    16d8:	49 f7       	brne	.-46     	; 0x16ac <str_writeudec16+0x3a>
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	84 e0       	ldi	r24, 0x04	; 4
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	50 e0       	ldi	r21, 0x00	; 0
    16e4:	d8 01       	movw	r26, r16
    16e6:	2e 91       	ld	r18, -X
    16e8:	8d 01       	movw	r16, r26
    16ea:	21 11       	cpse	r18, r1
    16ec:	05 c0       	rjmp	.+10     	; 0x16f8 <str_writeudec16+0x86>
    16ee:	61 15       	cp	r22, r1
    16f0:	71 05       	cpc	r23, r1
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <str_writeudec16+0x86>
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	41 f4       	brne	.+16     	; 0x1708 <str_writeudec16+0x96>
    16f8:	84 17       	cp	r24, r20
    16fa:	95 07       	cpc	r25, r21
    16fc:	2c f4       	brge	.+10     	; 0x1708 <str_writeudec16+0x96>
    16fe:	20 5d       	subi	r18, 0xD0	; 208
    1700:	21 93       	st	Z+, r18
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <str_writeudec16+0x9e>
    1708:	84 17       	cp	r24, r20
    170a:	95 07       	cpc	r25, r21
    170c:	0c f4       	brge	.+2      	; 0x1710 <str_writeudec16+0x9e>
    170e:	31 96       	adiw	r30, 0x01	; 1
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	40 f7       	brcc	.-48     	; 0x16e4 <str_writeudec16+0x72>
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	08 95       	ret

00001736 <__vector_11>:
    1736:	1f 92       	push	r1
    1738:	0f 92       	push	r0
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	0f 92       	push	r0
    173e:	11 24       	eor	r1, r1
    1740:	8f 93       	push	r24
    1742:	9f 93       	push	r25
    1744:	af 93       	push	r26
    1746:	bf 93       	push	r27
    1748:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <timer1_count>
    174c:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <timer1_count+0x1>
    1750:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <timer1_count+0x2>
    1754:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <timer1_count+0x3>
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	a1 1d       	adc	r26, r1
    175c:	b1 1d       	adc	r27, r1
    175e:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <timer1_count>
    1762:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <timer1_count+0x1>
    1766:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <timer1_count+0x2>
    176a:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <timer1_count+0x3>
    176e:	bf 91       	pop	r27
    1770:	af 91       	pop	r26
    1772:	9f 91       	pop	r25
    1774:	8f 91       	pop	r24
    1776:	0f 90       	pop	r0
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	0f 90       	pop	r0
    177c:	1f 90       	pop	r1
    177e:	18 95       	reti

00001780 <timer1_init>:
    1780:	83 e2       	ldi	r24, 0x23	; 35
    1782:	94 ef       	ldi	r25, 0xF4	; 244
    1784:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1788:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    178c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1790:	8c e0       	ldi	r24, 0x0C	; 12
    1792:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    179c:	08 95       	ret

0000179e <timer1_get>:
    179e:	2f b7       	in	r18, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	60 91 62 02 	lds	r22, 0x0262	; 0x800262 <timer1_count>
    17a6:	70 91 63 02 	lds	r23, 0x0263	; 0x800263 <timer1_count+0x1>
    17aa:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timer1_count+0x2>
    17ae:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timer1_count+0x3>
    17b2:	2f bf       	out	0x3f, r18	; 63
    17b4:	08 95       	ret

000017b6 <timer1_clear>:
    17b6:	8f b7       	in	r24, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <timer1_count>
    17be:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <timer1_count+0x1>
    17c2:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <timer1_count+0x2>
    17c6:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <timer1_count+0x3>
    17ca:	8f bf       	out	0x3f, r24	; 63
    17cc:	08 95       	ret

000017ce <uart_init>:
    17ce:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <serial_init>
    17d2:	78 94       	sei
    17d4:	08 95       	ret

000017d6 <uart_writechar>:
    17d6:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <serial_writechar>

000017da <uart_writestr>:
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	ec 01       	movw	r28, r24
    17e0:	89 91       	ld	r24, Y+
    17e2:	88 23       	and	r24, r24
    17e4:	19 f0       	breq	.+6      	; 0x17ec <uart_writestr+0x12>
    17e6:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <serial_writechar>
    17ea:	fa cf       	rjmp	.-12     	; 0x17e0 <uart_writestr+0x6>
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <uart_writehex8>:
    17f2:	cf 93       	push	r28
    17f4:	c8 2f       	mov	r28, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	24 e0       	ldi	r18, 0x04	; 4
    17fa:	95 95       	asr	r25
    17fc:	87 95       	ror	r24
    17fe:	2a 95       	dec	r18
    1800:	e1 f7       	brne	.-8      	; 0x17fa <uart_writehex8+0x8>
    1802:	8a 30       	cpi	r24, 0x0A	; 10
    1804:	10 f4       	brcc	.+4      	; 0x180a <uart_writehex8+0x18>
    1806:	80 5d       	subi	r24, 0xD0	; 208
    1808:	01 c0       	rjmp	.+2      	; 0x180c <uart_writehex8+0x1a>
    180a:	89 5c       	subi	r24, 0xC9	; 201
    180c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <serial_writechar>
    1810:	8c 2f       	mov	r24, r28
    1812:	8f 70       	andi	r24, 0x0F	; 15
    1814:	8a 30       	cpi	r24, 0x0A	; 10
    1816:	10 f0       	brcs	.+4      	; 0x181c <uart_writehex8+0x2a>
    1818:	89 5c       	subi	r24, 0xC9	; 201
    181a:	01 c0       	rjmp	.+2      	; 0x181e <uart_writehex8+0x2c>
    181c:	80 5d       	subi	r24, 0xD0	; 208
    181e:	cf 91       	pop	r28
    1820:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <serial_writechar>

00001824 <uart_writehex16>:
    1824:	cf 93       	push	r28
    1826:	c8 2f       	mov	r28, r24
    1828:	89 2f       	mov	r24, r25
    182a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <uart_writehex8>
    182e:	8c 2f       	mov	r24, r28
    1830:	cf 91       	pop	r28
    1832:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <uart_writehex8>

00001836 <uart_writedec32>:
    1836:	2f 92       	push	r2
    1838:	3f 92       	push	r3
    183a:	4f 92       	push	r4
    183c:	5f 92       	push	r5
    183e:	6f 92       	push	r6
    1840:	7f 92       	push	r7
    1842:	8f 92       	push	r8
    1844:	9f 92       	push	r9
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	63 97       	sbiw	r28, 0x13	; 19
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	6b 01       	movw	r12, r22
    186c:	7c 01       	movw	r14, r24
    186e:	97 ff       	sbrs	r25, 7
    1870:	0d c0       	rjmp	.+26     	; 0x188c <uart_writedec32+0x56>
    1872:	f0 94       	com	r15
    1874:	e0 94       	com	r14
    1876:	d0 94       	com	r13
    1878:	c0 94       	com	r12
    187a:	c1 1c       	adc	r12, r1
    187c:	d1 1c       	adc	r13, r1
    187e:	e1 1c       	adc	r14, r1
    1880:	f1 1c       	adc	r15, r1
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9b 8b       	std	Y+19, r25	; 0x13
    1888:	8a 8b       	std	Y+18, r24	; 0x12
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <uart_writedec32+0x5a>
    188c:	1b 8a       	std	Y+19, r1	; 0x13
    188e:	1a 8a       	std	Y+18, r1	; 0x12
    1890:	fe 01       	movw	r30, r28
    1892:	31 96       	adiw	r30, 0x01	; 1
    1894:	5f 01       	movw	r10, r30
    1896:	8e 01       	movw	r16, r28
    1898:	05 5f       	subi	r16, 0xF5	; 245
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	f9 8b       	std	Y+17, r31	; 0x11
    189e:	e8 8b       	std	Y+16, r30	; 0x10
    18a0:	66 24       	eor	r6, r6
    18a2:	63 94       	inc	r6
    18a4:	71 2c       	mov	r7, r1
    18a6:	81 2c       	mov	r8, r1
    18a8:	91 2c       	mov	r9, r1
    18aa:	aa e0       	ldi	r26, 0x0A	; 10
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	93 01       	movw	r18, r6
    18b0:	a4 01       	movw	r20, r8
    18b2:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__muluhisi3>
    18b6:	1b 01       	movw	r2, r22
    18b8:	2c 01       	movw	r4, r24
    18ba:	c7 01       	movw	r24, r14
    18bc:	b6 01       	movw	r22, r12
    18be:	91 01       	movw	r18, r2
    18c0:	a2 01       	movw	r20, r4
    18c2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__divmodsi4>
    18c6:	93 01       	movw	r18, r6
    18c8:	a4 01       	movw	r20, r8
    18ca:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__divmodsi4>
    18ce:	e8 89       	ldd	r30, Y+16	; 0x10
    18d0:	f9 89       	ldd	r31, Y+17	; 0x11
    18d2:	21 93       	st	Z+, r18
    18d4:	f9 8b       	std	Y+17, r31	; 0x11
    18d6:	e8 8b       	std	Y+16, r30	; 0x10
    18d8:	82 2f       	mov	r24, r18
    18da:	22 0f       	add	r18, r18
    18dc:	99 0b       	sbc	r25, r25
    18de:	aa 0b       	sbc	r26, r26
    18e0:	bb 0b       	sbc	r27, r27
    18e2:	c8 1a       	sub	r12, r24
    18e4:	d9 0a       	sbc	r13, r25
    18e6:	ea 0a       	sbc	r14, r26
    18e8:	fb 0a       	sbc	r15, r27
    18ea:	31 01       	movw	r6, r2
    18ec:	42 01       	movw	r8, r4
    18ee:	0e 17       	cp	r16, r30
    18f0:	1f 07       	cpc	r17, r31
    18f2:	d9 f6       	brne	.-74     	; 0x18aa <uart_writedec32+0x74>
    18f4:	8a 89       	ldd	r24, Y+18	; 0x12
    18f6:	9b 89       	ldd	r25, Y+19	; 0x13
    18f8:	89 2b       	or	r24, r25
    18fa:	11 f0       	breq	.+4      	; 0x1900 <uart_writedec32+0xca>
    18fc:	8d e2       	ldi	r24, 0x2D	; 45
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <uart_writedec32+0xcc>
    1900:	80 e2       	ldi	r24, 0x20	; 32
    1902:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <serial_writechar>
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	f8 01       	movw	r30, r16
    190c:	82 91       	ld	r24, -Z
    190e:	8f 01       	movw	r16, r30
    1910:	81 11       	cpse	r24, r1
    1912:	06 c0       	rjmp	.+12     	; 0x1920 <uart_writedec32+0xea>
    1914:	21 15       	cp	r18, r1
    1916:	31 05       	cpc	r19, r1
    1918:	19 f4       	brne	.+6      	; 0x1920 <uart_writedec32+0xea>
    191a:	ea 15       	cp	r30, r10
    191c:	fb 05       	cpc	r31, r11
    191e:	29 f4       	brne	.+10     	; 0x192a <uart_writedec32+0xf4>
    1920:	80 5d       	subi	r24, 0xD0	; 208
    1922:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <serial_writechar>
    1926:	21 e0       	ldi	r18, 0x01	; 1
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	0a 15       	cp	r16, r10
    192c:	1b 05       	cpc	r17, r11
    192e:	69 f7       	brne	.-38     	; 0x190a <uart_writedec32+0xd4>
    1930:	63 96       	adiw	r28, 0x13	; 19
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10
    1950:	9f 90       	pop	r9
    1952:	8f 90       	pop	r8
    1954:	7f 90       	pop	r7
    1956:	6f 90       	pop	r6
    1958:	5f 90       	pop	r5
    195a:	4f 90       	pop	r4
    195c:	3f 90       	pop	r3
    195e:	2f 90       	pop	r2
    1960:	08 95       	ret

00001962 <dump_eeprom>:
    1962:	2f 92       	push	r2
    1964:	3f 92       	push	r3
    1966:	4f 92       	push	r4
    1968:	5f 92       	push	r5
    196a:	6f 92       	push	r6
    196c:	7f 92       	push	r7
    196e:	8f 92       	push	r8
    1970:	9f 92       	push	r9
    1972:	af 92       	push	r10
    1974:	bf 92       	push	r11
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	64 97       	sbiw	r28, 0x14	; 20
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	8c 01       	movw	r16, r24
    1998:	61 15       	cp	r22, r1
    199a:	71 05       	cpc	r23, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <dump_eeprom+0x3e>
    199e:	92 c0       	rjmp	.+292    	; 0x1ac4 <dump_eeprom+0x162>
    19a0:	81 2c       	mov	r8, r1
    19a2:	91 2c       	mov	r9, r1
    19a4:	54 01       	movw	r10, r8
    19a6:	cb 01       	movw	r24, r22
    19a8:	a0 e0       	ldi	r26, 0x00	; 0
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	89 8b       	std	Y+17, r24	; 0x11
    19ae:	9a 8b       	std	Y+18, r25	; 0x12
    19b0:	ab 8b       	std	Y+19, r26	; 0x13
    19b2:	bc 8b       	std	Y+20, r27	; 0x14
    19b4:	de 01       	movw	r26, r28
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	1d 01       	movw	r2, r26
    19ba:	89 89       	ldd	r24, Y+17	; 0x11
    19bc:	9a 89       	ldd	r25, Y+18	; 0x12
    19be:	ab 89       	ldd	r26, Y+19	; 0x13
    19c0:	bc 89       	ldd	r27, Y+20	; 0x14
    19c2:	88 16       	cp	r8, r24
    19c4:	99 06       	cpc	r9, r25
    19c6:	aa 06       	cpc	r10, r26
    19c8:	bb 06       	cpc	r11, r27
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <dump_eeprom+0x6c>
    19cc:	7b c0       	rjmp	.+246    	; 0x1ac4 <dump_eeprom+0x162>
    19ce:	81 2f       	mov	r24, r17
    19d0:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <uart_writehex8>
    19d4:	80 2f       	mov	r24, r16
    19d6:	80 7f       	andi	r24, 0xF0	; 240
    19d8:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <uart_writehex8>
    19dc:	80 e2       	ldi	r24, 0x20	; 32
    19de:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <uart_writechar>
    19e2:	61 01       	movw	r12, r2
    19e4:	78 01       	movw	r14, r16
    19e6:	41 2c       	mov	r4, r1
    19e8:	51 2c       	mov	r5, r1
    19ea:	32 01       	movw	r6, r4
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	b6 01       	movw	r22, r12
    19f0:	c7 01       	movw	r24, r14
    19f2:	0e 94 9a 01 	call	0x334	; 0x334 <eeprom_readbuf>
    19f6:	bf ef       	ldi	r27, 0xFF	; 255
    19f8:	eb 1a       	sub	r14, r27
    19fa:	fb 0a       	sbc	r15, r27
    19fc:	ef ef       	ldi	r30, 0xFF	; 255
    19fe:	4e 1a       	sub	r4, r30
    1a00:	5e 0a       	sbc	r5, r30
    1a02:	6e 0a       	sbc	r6, r30
    1a04:	7e 0a       	sbc	r7, r30
    1a06:	ff ef       	ldi	r31, 0xFF	; 255
    1a08:	8f 1a       	sub	r8, r31
    1a0a:	9f 0a       	sbc	r9, r31
    1a0c:	af 0a       	sbc	r10, r31
    1a0e:	bf 0a       	sbc	r11, r31
    1a10:	89 89       	ldd	r24, Y+17	; 0x11
    1a12:	9a 89       	ldd	r25, Y+18	; 0x12
    1a14:	ab 89       	ldd	r26, Y+19	; 0x13
    1a16:	bc 89       	ldd	r27, Y+20	; 0x14
    1a18:	88 16       	cp	r8, r24
    1a1a:	99 06       	cpc	r9, r25
    1a1c:	aa 06       	cpc	r10, r26
    1a1e:	bb 06       	cpc	r11, r27
    1a20:	50 f0       	brcs	.+20     	; 0x1a36 <dump_eeprom+0xd4>
    1a22:	68 01       	movw	r12, r16
    1a24:	9f e0       	ldi	r25, 0x0F	; 15
    1a26:	c9 22       	and	r12, r25
    1a28:	dd 24       	eor	r13, r13
    1a2a:	00 e0       	ldi	r16, 0x00	; 0
    1a2c:	10 e0       	ldi	r17, 0x00	; 0
    1a2e:	32 01       	movw	r6, r4
    1a30:	6c 0c       	add	r6, r12
    1a32:	7d 1c       	adc	r7, r13
    1a34:	09 c0       	rjmp	.+18     	; 0x1a48 <dump_eeprom+0xe6>
    1a36:	af ef       	ldi	r26, 0xFF	; 255
    1a38:	ca 1a       	sub	r12, r26
    1a3a:	da 0a       	sbc	r13, r26
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	8f 70       	andi	r24, 0x0F	; 15
    1a40:	99 27       	eor	r25, r25
    1a42:	89 2b       	or	r24, r25
    1a44:	99 f6       	brne	.-90     	; 0x19ec <dump_eeprom+0x8a>
    1a46:	ed cf       	rjmp	.-38     	; 0x1a22 <dump_eeprom+0xc0>
    1a48:	0c 15       	cp	r16, r12
    1a4a:	1d 05       	cpc	r17, r13
    1a4c:	18 f0       	brcs	.+6      	; 0x1a54 <dump_eeprom+0xf2>
    1a4e:	06 15       	cp	r16, r6
    1a50:	17 05       	cpc	r17, r7
    1a52:	28 f0       	brcs	.+10     	; 0x1a5e <dump_eeprom+0xfc>
    1a54:	81 ed       	ldi	r24, 0xD1	; 209
    1a56:	91 e0       	ldi	r25, 0x01	; 1
    1a58:	0e 94 ed 0b 	call	0x17da	; 0x17da <uart_writestr>
    1a5c:	0b c0       	rjmp	.+22     	; 0x1a74 <dump_eeprom+0x112>
    1a5e:	f8 01       	movw	r30, r16
    1a60:	ec 19       	sub	r30, r12
    1a62:	fd 09       	sbc	r31, r13
    1a64:	e2 0d       	add	r30, r2
    1a66:	f3 1d       	adc	r31, r3
    1a68:	80 81       	ld	r24, Z
    1a6a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <uart_writehex8>
    1a6e:	80 e2       	ldi	r24, 0x20	; 32
    1a70:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <uart_writechar>
    1a74:	0f 5f       	subi	r16, 0xFF	; 255
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	00 31       	cpi	r16, 0x10	; 16
    1a7a:	11 05       	cpc	r17, r1
    1a7c:	29 f7       	brne	.-54     	; 0x1a48 <dump_eeprom+0xe6>
    1a7e:	00 e0       	ldi	r16, 0x00	; 0
    1a80:	10 e0       	ldi	r17, 0x00	; 0
    1a82:	c0 16       	cp	r12, r16
    1a84:	d1 06       	cpc	r13, r17
    1a86:	31 f0       	breq	.+12     	; 0x1a94 <dump_eeprom+0x132>
    1a88:	80 e2       	ldi	r24, 0x20	; 32
    1a8a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <uart_writechar>
    1a8e:	0f 5f       	subi	r16, 0xFF	; 255
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	f7 cf       	rjmp	.-18     	; 0x1a82 <dump_eeprom+0x120>
    1a94:	81 01       	movw	r16, r2
    1a96:	c8 01       	movw	r24, r16
    1a98:	82 19       	sub	r24, r2
    1a9a:	93 09       	sbc	r25, r3
    1a9c:	84 15       	cp	r24, r4
    1a9e:	95 05       	cpc	r25, r5
    1aa0:	58 f4       	brcc	.+22     	; 0x1ab8 <dump_eeprom+0x156>
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	81 91       	ld	r24, Z+
    1aa6:	8f 01       	movw	r16, r30
    1aa8:	90 ee       	ldi	r25, 0xE0	; 224
    1aaa:	98 0f       	add	r25, r24
    1aac:	90 36       	cpi	r25, 0x60	; 96
    1aae:	08 f0       	brcs	.+2      	; 0x1ab2 <dump_eeprom+0x150>
    1ab0:	8e e2       	ldi	r24, 0x2E	; 46
    1ab2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <uart_writechar>
    1ab6:	ef cf       	rjmp	.-34     	; 0x1a96 <dump_eeprom+0x134>
    1ab8:	85 ed       	ldi	r24, 0xD5	; 213
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	0e 94 ed 0b 	call	0x17da	; 0x17da <uart_writestr>
    1ac0:	87 01       	movw	r16, r14
    1ac2:	7b cf       	rjmp	.-266    	; 0x19ba <dump_eeprom+0x58>
    1ac4:	64 96       	adiw	r28, 0x14	; 20
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	ff 90       	pop	r15
    1ada:	ef 90       	pop	r14
    1adc:	df 90       	pop	r13
    1ade:	cf 90       	pop	r12
    1ae0:	bf 90       	pop	r11
    1ae2:	af 90       	pop	r10
    1ae4:	9f 90       	pop	r9
    1ae6:	8f 90       	pop	r8
    1ae8:	7f 90       	pop	r7
    1aea:	6f 90       	pop	r6
    1aec:	5f 90       	pop	r5
    1aee:	4f 90       	pop	r4
    1af0:	3f 90       	pop	r3
    1af2:	2f 90       	pop	r2
    1af4:	08 95       	ret

00001af6 <__vector_14>:
    1af6:	1f 92       	push	r1
    1af8:	0f 92       	push	r0
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	0f 92       	push	r0
    1afe:	11 24       	eor	r1, r1
    1b00:	2f 93       	push	r18
    1b02:	3f 93       	push	r19
    1b04:	8f 93       	push	r24
    1b06:	9f 93       	push	r25
    1b08:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <delay_count>
    1b0c:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <delay_count+0x1>
    1b10:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <delay_limit>
    1b14:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <delay_limit+0x1>
    1b18:	28 17       	cp	r18, r24
    1b1a:	39 07       	cpc	r19, r25
    1b1c:	49 f0       	breq	.+18     	; 0x1b30 <__vector_14+0x3a>
    1b1e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <delay_count>
    1b22:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <delay_count+0x1>
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <delay_count+0x1>
    1b2c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <delay_count>
    1b30:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <delay_count+0x2>
    1b34:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <delay_count+0x3>
    1b38:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <delay_limit+0x2>
    1b3c:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <delay_limit+0x3>
    1b40:	28 17       	cp	r18, r24
    1b42:	39 07       	cpc	r19, r25
    1b44:	49 f0       	breq	.+18     	; 0x1b58 <__vector_14+0x62>
    1b46:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <delay_count+0x2>
    1b4a:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <delay_count+0x3>
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <delay_count+0x3>
    1b54:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <delay_count+0x2>
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	3f 91       	pop	r19
    1b5e:	2f 91       	pop	r18
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0
    1b66:	1f 90       	pop	r1
    1b68:	18 95       	reti

00001b6a <delay_init>:
    1b6a:	89 ef       	ldi	r24, 0xF9	; 249
    1b6c:	87 bd       	out	0x27, r24	; 39
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	84 bd       	out	0x24, r24	; 36
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	95 bd       	out	0x25, r25	; 37
    1b76:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1b7a:	08 95       	ret

00001b7c <delay_get>:
    1b7c:	82 30       	cpi	r24, 0x02	; 2
    1b7e:	91 05       	cpc	r25, r1
    1b80:	50 f4       	brcc	.+20     	; 0x1b96 <delay_get+0x1a>
    1b82:	f8 94       	cli
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	fc 01       	movw	r30, r24
    1b8a:	e4 59       	subi	r30, 0x94	; 148
    1b8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	78 94       	sei
    1b94:	08 95       	ret
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	08 95       	ret

00001b9c <delay_isdone>:
    1b9c:	82 30       	cpi	r24, 0x02	; 2
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	98 f4       	brcc	.+38     	; 0x1bc8 <delay_isdone+0x2c>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	e4 59       	subi	r30, 0x94	; 148
    1baa:	fd 4f       	sbci	r31, 0xFD	; 253
    1bac:	20 81       	ld	r18, Z
    1bae:	31 81       	ldd	r19, Z+1	; 0x01
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	e8 59       	subi	r30, 0x98	; 152
    1bb4:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	40 81       	ld	r20, Z
    1bbc:	51 81       	ldd	r21, Z+1	; 0x01
    1bbe:	42 17       	cp	r20, r18
    1bc0:	53 07       	cpc	r21, r19
    1bc2:	21 f0       	breq	.+8      	; 0x1bcc <delay_isdone+0x30>
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	08 95       	ret
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	08 95       	ret

00001bce <delay_set>:
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	ec 01       	movw	r28, r24
    1bd8:	8b 01       	movw	r16, r22
    1bda:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <initialized.1590>
    1bde:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <initialized.1590+0x1>
    1be2:	89 2b       	or	r24, r25
    1be4:	41 f4       	brne	.+16     	; 0x1bf6 <delay_set+0x28>
    1be6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <delay_init>
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <initialized.1590+0x1>
    1bf2:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <initialized.1590>
    1bf6:	c2 30       	cpi	r28, 0x02	; 2
    1bf8:	d1 05       	cpc	r29, r1
    1bfa:	70 f4       	brcc	.+28     	; 0x1c18 <delay_set+0x4a>
    1bfc:	8f b7       	in	r24, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	cc 0f       	add	r28, r28
    1c02:	dd 1f       	adc	r29, r29
    1c04:	fe 01       	movw	r30, r28
    1c06:	e8 59       	subi	r30, 0x98	; 152
    1c08:	fd 4f       	sbci	r31, 0xFD	; 253
    1c0a:	11 83       	std	Z+1, r17	; 0x01
    1c0c:	00 83       	st	Z, r16
    1c0e:	c4 59       	subi	r28, 0x94	; 148
    1c10:	dd 4f       	sbci	r29, 0xFD	; 253
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	18 82       	st	Y, r1
    1c16:	8f bf       	out	0x3f, r24	; 63
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	08 95       	ret

00001c22 <serial_init>:
    1c22:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1c26:	87 e6       	ldi	r24, 0x67	; 103
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1c2e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1c32:	e1 ec       	ldi	r30, 0xC1	; 193
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	88 e1       	ldi	r24, 0x18	; 24
    1c38:	80 83       	st	Z, r24
    1c3a:	86 e0       	ldi	r24, 0x06	; 6
    1c3c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1c40:	80 81       	ld	r24, Z
    1c42:	80 6a       	ori	r24, 0xA0	; 160
    1c44:	80 83       	st	Z, r24
    1c46:	08 95       	ret

00001c48 <__vector_18>:
    1c48:	1f 92       	push	r1
    1c4a:	0f 92       	push	r0
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	0f 92       	push	r0
    1c50:	11 24       	eor	r1, r1
    1c52:	2f 93       	push	r18
    1c54:	8f 93       	push	r24
    1c56:	9f 93       	push	r25
    1c58:	ef 93       	push	r30
    1c5a:	ff 93       	push	r31
    1c5c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <rxtail>
    1c60:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <rxhead>
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	82 1b       	sub	r24, r18
    1c68:	91 09       	sbc	r25, r1
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	8f 73       	andi	r24, 0x3F	; 63
    1c6e:	99 27       	eor	r25, r25
    1c70:	89 2b       	or	r24, r25
    1c72:	79 f0       	breq	.+30     	; 0x1c92 <__vector_18+0x4a>
    1c74:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <rxhead>
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1c7e:	e6 53       	subi	r30, 0x36	; 54
    1c80:	f9 4f       	sbci	r31, 0xF9	; 249
    1c82:	80 83       	st	Z, r24
    1c84:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <rxhead>
    1c88:	8f 5f       	subi	r24, 0xFF	; 255
    1c8a:	8f 73       	andi	r24, 0x3F	; 63
    1c8c:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <rxhead>
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <__vector_18+0x4e>
    1c92:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1c96:	ff 91       	pop	r31
    1c98:	ef 91       	pop	r30
    1c9a:	9f 91       	pop	r25
    1c9c:	8f 91       	pop	r24
    1c9e:	2f 91       	pop	r18
    1ca0:	0f 90       	pop	r0
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	0f 90       	pop	r0
    1ca6:	1f 90       	pop	r1
    1ca8:	18 95       	reti

00001caa <__vector_19>:
    1caa:	1f 92       	push	r1
    1cac:	0f 92       	push	r0
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	0f 92       	push	r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	2f 93       	push	r18
    1cb6:	8f 93       	push	r24
    1cb8:	9f 93       	push	r25
    1cba:	ef 93       	push	r30
    1cbc:	ff 93       	push	r31
    1cbe:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <txhead>
    1cc2:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <txtail>
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	82 1b       	sub	r24, r18
    1cca:	91 09       	sbc	r25, r1
    1ccc:	8f 73       	andi	r24, 0x3F	; 63
    1cce:	99 27       	eor	r25, r25
    1cd0:	89 2b       	or	r24, r25
    1cd2:	79 f0       	breq	.+30     	; 0x1cf2 <__vector_19+0x48>
    1cd4:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <txtail>
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	e6 5f       	subi	r30, 0xF6	; 246
    1cdc:	f8 4f       	sbci	r31, 0xF8	; 248
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1ce4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <txtail>
    1ce8:	8f 5f       	subi	r24, 0xFF	; 255
    1cea:	8f 73       	andi	r24, 0x3F	; 63
    1cec:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <txtail>
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <__vector_19+0x52>
    1cf2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1cf6:	8f 7d       	andi	r24, 0xDF	; 223
    1cf8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1cfc:	ff 91       	pop	r31
    1cfe:	ef 91       	pop	r30
    1d00:	9f 91       	pop	r25
    1d02:	8f 91       	pop	r24
    1d04:	2f 91       	pop	r18
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	0f 90       	pop	r0
    1d0c:	1f 90       	pop	r1
    1d0e:	18 95       	reti

00001d10 <serial_rxchars>:
    1d10:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <rxhead>
    1d14:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <rxtail>
    1d18:	89 1b       	sub	r24, r25
    1d1a:	8f 73       	andi	r24, 0x3F	; 63
    1d1c:	08 95       	ret

00001d1e <serial_popchar>:
    1d1e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <rxhead>
    1d22:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <rxtail>
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	82 1b       	sub	r24, r18
    1d2a:	91 09       	sbc	r25, r1
    1d2c:	8f 73       	andi	r24, 0x3F	; 63
    1d2e:	99 27       	eor	r25, r25
    1d30:	89 2b       	or	r24, r25
    1d32:	69 f0       	breq	.+26     	; 0x1d4e <serial_popchar+0x30>
    1d34:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <rxtail>
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	e6 53       	subi	r30, 0x36	; 54
    1d3c:	f9 4f       	sbci	r31, 0xF9	; 249
    1d3e:	80 81       	ld	r24, Z
    1d40:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <rxtail>
    1d44:	9f 5f       	subi	r25, 0xFF	; 255
    1d46:	9f 73       	andi	r25, 0x3F	; 63
    1d48:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <rxtail>
    1d4c:	08 95       	ret
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	08 95       	ret

00001d52 <serial_writechar>:
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	07 fe       	sbrs	r0, 7
    1d56:	0e c0       	rjmp	.+28     	; 0x1d74 <serial_writechar+0x22>
    1d58:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <txtail>
    1d5c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <txhead>
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	29 1b       	sub	r18, r25
    1d64:	31 09       	sbc	r19, r1
    1d66:	21 50       	subi	r18, 0x01	; 1
    1d68:	31 09       	sbc	r19, r1
    1d6a:	2f 73       	andi	r18, 0x3F	; 63
    1d6c:	33 27       	eor	r19, r19
    1d6e:	23 2b       	or	r18, r19
    1d70:	99 f3       	breq	.-26     	; 0x1d58 <serial_writechar+0x6>
    1d72:	0d c0       	rjmp	.+26     	; 0x1d8e <serial_writechar+0x3c>
    1d74:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <txtail>
    1d78:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <txhead>
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	29 1b       	sub	r18, r25
    1d80:	31 09       	sbc	r19, r1
    1d82:	21 50       	subi	r18, 0x01	; 1
    1d84:	31 09       	sbc	r19, r1
    1d86:	2f 73       	andi	r18, 0x3F	; 63
    1d88:	33 27       	eor	r19, r19
    1d8a:	23 2b       	or	r18, r19
    1d8c:	61 f0       	breq	.+24     	; 0x1da6 <serial_writechar+0x54>
    1d8e:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <txhead>
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	e6 5f       	subi	r30, 0xF6	; 246
    1d96:	f8 4f       	sbci	r31, 0xF8	; 248
    1d98:	80 83       	st	Z, r24
    1d9a:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <txhead>
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	8f 73       	andi	r24, 0x3F	; 63
    1da2:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <txhead>
    1da6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1daa:	80 62       	ori	r24, 0x20	; 32
    1dac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1db0:	08 95       	ret

00001db2 <serial_writestr>:
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	ec 01       	movw	r28, r24
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	11 e0       	ldi	r17, 0x01	; 1
    1dbe:	18 0f       	add	r17, r24
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e8 0f       	add	r30, r24
    1dc4:	f1 1d       	adc	r31, r1
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 23       	and	r24, r24
    1dca:	21 f0       	breq	.+8      	; 0x1dd4 <serial_writestr+0x22>
    1dcc:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <serial_writechar>
    1dd0:	81 2f       	mov	r24, r17
    1dd2:	f4 cf       	rjmp	.-24     	; 0x1dbc <serial_writestr+0xa>
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	08 95       	ret

00001ddc <serial_writestr_P>:
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	ec 01       	movw	r28, r24
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	11 e0       	ldi	r17, 0x01	; 1
    1de8:	18 0f       	add	r17, r24
    1dea:	fe 01       	movw	r30, r28
    1dec:	e8 0f       	add	r30, r24
    1dee:	f1 1d       	adc	r31, r1
    1df0:	84 91       	lpm	r24, Z
    1df2:	88 23       	and	r24, r24
    1df4:	21 f0       	breq	.+8      	; 0x1dfe <serial_writestr_P+0x22>
    1df6:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <serial_writechar>
    1dfa:	81 2f       	mov	r24, r17
    1dfc:	f4 cf       	rjmp	.-24     	; 0x1de6 <serial_writestr_P+0xa>
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	1f 91       	pop	r17
    1e04:	08 95       	ret

00001e06 <__mulsi3>:
    1e06:	db 01       	movw	r26, r22
    1e08:	8f 93       	push	r24
    1e0a:	9f 93       	push	r25
    1e0c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__muluhisi3>
    1e10:	bf 91       	pop	r27
    1e12:	af 91       	pop	r26
    1e14:	a2 9f       	mul	r26, r18
    1e16:	80 0d       	add	r24, r0
    1e18:	91 1d       	adc	r25, r1
    1e1a:	a3 9f       	mul	r26, r19
    1e1c:	90 0d       	add	r25, r0
    1e1e:	b2 9f       	mul	r27, r18
    1e20:	90 0d       	add	r25, r0
    1e22:	11 24       	eor	r1, r1
    1e24:	08 95       	ret

00001e26 <__udivmodhi4>:
    1e26:	aa 1b       	sub	r26, r26
    1e28:	bb 1b       	sub	r27, r27
    1e2a:	51 e1       	ldi	r21, 0x11	; 17
    1e2c:	07 c0       	rjmp	.+14     	; 0x1e3c <__udivmodhi4_ep>

00001e2e <__udivmodhi4_loop>:
    1e2e:	aa 1f       	adc	r26, r26
    1e30:	bb 1f       	adc	r27, r27
    1e32:	a6 17       	cp	r26, r22
    1e34:	b7 07       	cpc	r27, r23
    1e36:	10 f0       	brcs	.+4      	; 0x1e3c <__udivmodhi4_ep>
    1e38:	a6 1b       	sub	r26, r22
    1e3a:	b7 0b       	sbc	r27, r23

00001e3c <__udivmodhi4_ep>:
    1e3c:	88 1f       	adc	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	5a 95       	dec	r21
    1e42:	a9 f7       	brne	.-22     	; 0x1e2e <__udivmodhi4_loop>
    1e44:	80 95       	com	r24
    1e46:	90 95       	com	r25
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	08 95       	ret

00001e4e <__divmodhi4>:
    1e4e:	97 fb       	bst	r25, 7
    1e50:	07 2e       	mov	r0, r23
    1e52:	16 f4       	brtc	.+4      	; 0x1e58 <__divmodhi4+0xa>
    1e54:	00 94       	com	r0
    1e56:	07 d0       	rcall	.+14     	; 0x1e66 <__divmodhi4_neg1>
    1e58:	77 fd       	sbrc	r23, 7
    1e5a:	09 d0       	rcall	.+18     	; 0x1e6e <__divmodhi4_neg2>
    1e5c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__udivmodhi4>
    1e60:	07 fc       	sbrc	r0, 7
    1e62:	05 d0       	rcall	.+10     	; 0x1e6e <__divmodhi4_neg2>
    1e64:	3e f4       	brtc	.+14     	; 0x1e74 <__divmodhi4_exit>

00001e66 <__divmodhi4_neg1>:
    1e66:	90 95       	com	r25
    1e68:	81 95       	neg	r24
    1e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6c:	08 95       	ret

00001e6e <__divmodhi4_neg2>:
    1e6e:	70 95       	com	r23
    1e70:	61 95       	neg	r22
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255

00001e74 <__divmodhi4_exit>:
    1e74:	08 95       	ret

00001e76 <__udivmodsi4>:
    1e76:	a1 e2       	ldi	r26, 0x21	; 33
    1e78:	1a 2e       	mov	r1, r26
    1e7a:	aa 1b       	sub	r26, r26
    1e7c:	bb 1b       	sub	r27, r27
    1e7e:	fd 01       	movw	r30, r26
    1e80:	0d c0       	rjmp	.+26     	; 0x1e9c <__udivmodsi4_ep>

00001e82 <__udivmodsi4_loop>:
    1e82:	aa 1f       	adc	r26, r26
    1e84:	bb 1f       	adc	r27, r27
    1e86:	ee 1f       	adc	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	a2 17       	cp	r26, r18
    1e8c:	b3 07       	cpc	r27, r19
    1e8e:	e4 07       	cpc	r30, r20
    1e90:	f5 07       	cpc	r31, r21
    1e92:	20 f0       	brcs	.+8      	; 0x1e9c <__udivmodsi4_ep>
    1e94:	a2 1b       	sub	r26, r18
    1e96:	b3 0b       	sbc	r27, r19
    1e98:	e4 0b       	sbc	r30, r20
    1e9a:	f5 0b       	sbc	r31, r21

00001e9c <__udivmodsi4_ep>:
    1e9c:	66 1f       	adc	r22, r22
    1e9e:	77 1f       	adc	r23, r23
    1ea0:	88 1f       	adc	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	1a 94       	dec	r1
    1ea6:	69 f7       	brne	.-38     	; 0x1e82 <__udivmodsi4_loop>
    1ea8:	60 95       	com	r22
    1eaa:	70 95       	com	r23
    1eac:	80 95       	com	r24
    1eae:	90 95       	com	r25
    1eb0:	9b 01       	movw	r18, r22
    1eb2:	ac 01       	movw	r20, r24
    1eb4:	bd 01       	movw	r22, r26
    1eb6:	cf 01       	movw	r24, r30
    1eb8:	08 95       	ret

00001eba <__divmodsi4>:
    1eba:	05 2e       	mov	r0, r21
    1ebc:	97 fb       	bst	r25, 7
    1ebe:	1e f4       	brtc	.+6      	; 0x1ec6 <__divmodsi4+0xc>
    1ec0:	00 94       	com	r0
    1ec2:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__negsi2>
    1ec6:	57 fd       	sbrc	r21, 7
    1ec8:	07 d0       	rcall	.+14     	; 0x1ed8 <__divmodsi4_neg2>
    1eca:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__udivmodsi4>
    1ece:	07 fc       	sbrc	r0, 7
    1ed0:	03 d0       	rcall	.+6      	; 0x1ed8 <__divmodsi4_neg2>
    1ed2:	4e f4       	brtc	.+18     	; 0x1ee6 <__divmodsi4_exit>
    1ed4:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <__negsi2>

00001ed8 <__divmodsi4_neg2>:
    1ed8:	50 95       	com	r21
    1eda:	40 95       	com	r20
    1edc:	30 95       	com	r19
    1ede:	21 95       	neg	r18
    1ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ee4:	5f 4f       	sbci	r21, 0xFF	; 255

00001ee6 <__divmodsi4_exit>:
    1ee6:	08 95       	ret

00001ee8 <__negsi2>:
    1ee8:	90 95       	com	r25
    1eea:	80 95       	com	r24
    1eec:	70 95       	com	r23
    1eee:	61 95       	neg	r22
    1ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	08 95       	ret

00001ef8 <__umulhisi3>:
    1ef8:	a2 9f       	mul	r26, r18
    1efa:	b0 01       	movw	r22, r0
    1efc:	b3 9f       	mul	r27, r19
    1efe:	c0 01       	movw	r24, r0
    1f00:	a3 9f       	mul	r26, r19
    1f02:	70 0d       	add	r23, r0
    1f04:	81 1d       	adc	r24, r1
    1f06:	11 24       	eor	r1, r1
    1f08:	91 1d       	adc	r25, r1
    1f0a:	b2 9f       	mul	r27, r18
    1f0c:	70 0d       	add	r23, r0
    1f0e:	81 1d       	adc	r24, r1
    1f10:	11 24       	eor	r1, r1
    1f12:	91 1d       	adc	r25, r1
    1f14:	08 95       	ret

00001f16 <__muluhisi3>:
    1f16:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__umulhisi3>
    1f1a:	a5 9f       	mul	r26, r21
    1f1c:	90 0d       	add	r25, r0
    1f1e:	b4 9f       	mul	r27, r20
    1f20:	90 0d       	add	r25, r0
    1f22:	a4 9f       	mul	r26, r20
    1f24:	80 0d       	add	r24, r0
    1f26:	91 1d       	adc	r25, r1
    1f28:	11 24       	eor	r1, r1
    1f2a:	08 95       	ret

00001f2c <_exit>:
    1f2c:	f8 94       	cli

00001f2e <__stop_program>:
    1f2e:	ff cf       	rjmp	.-2      	; 0x1f2e <__stop_program>
