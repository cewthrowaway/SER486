
bin/Debug/Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00001af0  00001b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00001ac8  00001ac8  00001b5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000036d  008001b4  008001b4  00001c38  2**0
                  ALLOC
  4 .stab         00001d4c  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000013f1  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  00004d75  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d98  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00004dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  000053cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0000596e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00005988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__vector_18>
      4c:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ef       	ldi	r30, 0xF0	; 240
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3b       	cpi	r26, 0xB4	; 180
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a4 eb       	ldi	r26, 0xB4	; 180
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 32       	cpi	r26, 0x21	; 33
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <main>
      9e:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
/*********** Private declarations ***********/
int is_data_valid();
void write_defaults();

/*********** Public definitions ***********/
void config_init() {
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
  /* while the data is not valid */

  /* write defaults */
  /* init config with defaults */
  /* clear the modified flag */
}
      ae:	00 00       	nop
      b0:	df 91       	pop	r29
      b2:	cf 91       	pop	r28
      b4:	08 95       	ret

000000b6 <config_update>:
void config_update() {
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
  /* if eeprom is busy or !modified just return */

  /* update the checksum */
  /* write config to eeprom */
  /* clear the modified flag */
}
      be:	00 00       	nop
      c0:	df 91       	pop	r29
      c2:	cf 91       	pop	r28
      c4:	08 95       	ret

000000c6 <config_set_modified>:
void config_set_modified() {
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
  config_modified = 1;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
}
      d4:	00 00       	nop
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <is_data_valid>:


/*********** Private definitions ***********/
int is_data_valid() {
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
  // todo 
  return 0;
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	90 e0       	ldi	r25, 0x00	; 0
}
      e8:	df 91       	pop	r29
      ea:	cf 91       	pop	r28
      ec:	08 95       	ret

000000ee <write_defaults>:
void write_defaults() {
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
  /* upate_checksum() for defaults*/

  /* write defaults to eeprom */
      f6:	00 00       	nop
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <eeprom_unlock>:
 * Returns ...
 * Changes ...
 */
void eeprom_unlock() {
  /* Write logical one to EEMPE */
  EECR |= (1 << EEMPE);
      fe:	fa 9a       	sbi	0x1f, 2	; 31
  /* Start eeprom write by setting EEPE */
  EECR |= (1 << EEPE);
     100:	f9 9a       	sbi	0x1f, 1	; 31
}
     102:	08 95       	ret

00000104 <__vector_22>:

/* Enabled when writebuf() places new data in the write buffer, this ISR sends
 * one byte at a time to the EEPROM. When the last byte is sent, it disables
 * futher EERPOM interrupts */
/* should this bee vector 22 or 23?? Documents say 23 for EE ready */
void __vector_22() {
     104:	1f 92       	push	r1
     106:	0f 92       	push	r0
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	0f 92       	push	r0
     10c:	11 24       	eor	r1, r1
     10e:	2f 93       	push	r18
     110:	3f 93       	push	r19
     112:	4f 93       	push	r20
     114:	5f 93       	push	r21
     116:	6f 93       	push	r22
     118:	7f 93       	push	r23
     11a:	8f 93       	push	r24
     11c:	9f 93       	push	r25
     11e:	af 93       	push	r26
     120:	bf 93       	push	r27
     122:	ef 93       	push	r30
     124:	ff 93       	push	r31
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
  if (EECR & (1 << EEPE)) {
     12e:	8f e3       	ldi	r24, 0x3F	; 63
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	fc 01       	movw	r30, r24
     134:	80 81       	ld	r24, Z
     136:	88 2f       	mov	r24, r24
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	82 70       	andi	r24, 0x02	; 2
     13c:	99 27       	eor	r25, r25
     13e:	89 2b       	or	r24, r25
     140:	89 f5       	brne	.+98     	; 0x1a4 <__vector_22+0xa0>
    return;
  } /* not ready. Don't block */

  /* if you haven't written all characters in then keep writing */
  /* should we check to see if it is ready to write? */
  if (bufidx < writesize) {
     142:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <bufidx>
     146:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <writesize>
     14a:	98 17       	cp	r25, r24
     14c:	30 f5       	brcc	.+76     	; 0x19a <__vector_22+0x96>
      /* set high byte */
    EEARH = (writeaddr >> 8) & 0xFF;
     14e:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <writeaddr>
     152:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <writeaddr+0x1>
     156:	29 2f       	mov	r18, r25
     158:	33 27       	eor	r19, r19
     15a:	82 e4       	ldi	r24, 0x42	; 66
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18
    /* set low byte */
    EEARL = writeaddr & 0xFF;
     162:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <writeaddr>
     166:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <writeaddr+0x1>
     16a:	81 e4       	ldi	r24, 0x41	; 65
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	fc 01       	movw	r30, r24
     170:	20 83       	st	Z, r18

    EEDR = writebuf[bufidx];
     172:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <bufidx>
     176:	28 2f       	mov	r18, r24
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	80 e4       	ldi	r24, 0x40	; 64
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	2b 59       	subi	r18, 0x9B	; 155
     180:	3d 4f       	sbci	r19, 0xFD	; 253
     182:	f9 01       	movw	r30, r18
     184:	20 81       	ld	r18, Z
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
    eeprom_unlock();
     18a:	0e 94 7f 00 	call	0xfe	; 0xfe <eeprom_unlock>
    // Debug print
    // printf("%d: %X %X EEDR: %c\n\r", bufidx, EEARL, EEARH, EEDR);
    bufidx++;
     18e:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <bufidx>
     192:	8f 5f       	subi	r24, 0xFF	; 255
     194:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <bufidx>
     198:	06 c0       	rjmp	.+12     	; 0x1a6 <__vector_22+0xa2>
  } else {

    /* disable interrupts */
    disable_interrupt();
     19a:	0e 94 c3 01 	call	0x386	; 0x386 <disable_interrupt>
    /* make ready to write another */
    write_busy = 0;
     19e:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <write_busy>
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <__vector_22+0xa2>
 * one byte at a time to the EEPROM. When the last byte is sent, it disables
 * futher EERPOM interrupts */
/* should this bee vector 22 or 23?? Documents say 23 for EE ready */
void __vector_22() {
  if (EECR & (1 << EEPE)) {
    return;
     1a4:	00 00       	nop
    /* disable interrupts */
    disable_interrupt();
    /* make ready to write another */
    write_busy = 0;
  }
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	bf 91       	pop	r27
     1b0:	af 91       	pop	r26
     1b2:	9f 91       	pop	r25
     1b4:	8f 91       	pop	r24
     1b6:	7f 91       	pop	r23
     1b8:	6f 91       	pop	r22
     1ba:	5f 91       	pop	r21
     1bc:	4f 91       	pop	r20
     1be:	3f 91       	pop	r19
     1c0:	2f 91       	pop	r18
     1c2:	0f 90       	pop	r0
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	0f 90       	pop	r0
     1c8:	1f 90       	pop	r1
     1ca:	18 95       	reti

000001cc <eeprom_writebuf>:
/* this function places the data (specified buf and size) into the write buffer
 * for later writing to the EEPROM. The addr parameter specifies the location to
 * write the data to. */
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf,
                     unsigned char size) {
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <eeprom_writebuf+0x6>
     1d2:	00 d0       	rcall	.+0      	; 0x1d4 <eeprom_writebuf+0x8>
     1d4:	00 d0       	rcall	.+0      	; 0x1d6 <eeprom_writebuf+0xa>
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
     1da:	9b 83       	std	Y+3, r25	; 0x03
     1dc:	8a 83       	std	Y+2, r24	; 0x02
     1de:	7d 83       	std	Y+5, r23	; 0x05
     1e0:	6c 83       	std	Y+4, r22	; 0x04
     1e2:	4e 83       	std	Y+6, r20	; 0x06
  // check that write_busy is 0
  if (write_busy > 0) {
     1e4:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <write_busy>
     1e8:	88 23       	and	r24, r24
     1ea:	b9 f5       	brne	.+110    	; 0x25a <eeprom_writebuf+0x8e>
    return;
  }
  if (size > 64) {
     1ec:	8e 81       	ldd	r24, Y+6	; 0x06
     1ee:	81 34       	cpi	r24, 0x41	; 65
     1f0:	b0 f5       	brcc	.+108    	; 0x25e <eeprom_writebuf+0x92>
    return;
  }
  if ((addr + size) > 0x3FF) {
     1f2:	8e 81       	ldd	r24, Y+6	; 0x06
     1f4:	28 2f       	mov	r18, r24
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	8a 81       	ldd	r24, Y+2	; 0x02
     1fa:	9b 81       	ldd	r25, Y+3	; 0x03
     1fc:	82 0f       	add	r24, r18
     1fe:	93 1f       	adc	r25, r19
     200:	81 15       	cp	r24, r1
     202:	94 40       	sbci	r25, 0x04	; 4
     204:	70 f5       	brcc	.+92     	; 0x262 <eeprom_writebuf+0x96>
    return;
  }
  /* the EEPROM is now writing */
  write_busy = 1;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <write_busy>
  /* change the write address */
  writeaddr = addr;
     20c:	8a 81       	ldd	r24, Y+2	; 0x02
     20e:	9b 81       	ldd	r25, Y+3	; 0x03
     210:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <writeaddr+0x1>
     214:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <writeaddr>
  /* start reading from the beginning of the buffer */
  bufidx = 0;
     218:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <bufidx>

  /* copy buf to writebuf and configure writesize */
  for (unsigned char i = 0; i < size; i++) {
     21c:	19 82       	std	Y+1, r1	; 0x01
     21e:	13 c0       	rjmp	.+38     	; 0x246 <eeprom_writebuf+0x7a>
    writebuf[i] = buf[i];
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	88 2f       	mov	r24, r24
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	2c 81       	ldd	r18, Y+4	; 0x04
     228:	3d 81       	ldd	r19, Y+5	; 0x05
     22a:	28 0f       	add	r18, r24
     22c:	39 1f       	adc	r19, r25
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	88 2f       	mov	r24, r24
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	f9 01       	movw	r30, r18
     236:	20 81       	ld	r18, Z
     238:	8b 59       	subi	r24, 0x9B	; 155
     23a:	9d 4f       	sbci	r25, 0xFD	; 253
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
  writeaddr = addr;
  /* start reading from the beginning of the buffer */
  bufidx = 0;

  /* copy buf to writebuf and configure writesize */
  for (unsigned char i = 0; i < size; i++) {
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	8f 5f       	subi	r24, 0xFF	; 255
     244:	89 83       	std	Y+1, r24	; 0x01
     246:	99 81       	ldd	r25, Y+1	; 0x01
     248:	8e 81       	ldd	r24, Y+6	; 0x06
     24a:	98 17       	cp	r25, r24
     24c:	48 f3       	brcs	.-46     	; 0x220 <eeprom_writebuf+0x54>
    writebuf[i] = buf[i];
  }

  writesize = size;
     24e:	8e 81       	ldd	r24, Y+6	; 0x06
     250:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <writesize>

  /* enable the EEPROM ready interrupts */
  enable_interrupt();
     254:	0e 94 b2 01 	call	0x364	; 0x364 <enable_interrupt>
     258:	05 c0       	rjmp	.+10     	; 0x264 <eeprom_writebuf+0x98>
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf,
                     unsigned char size) {
  // check that write_busy is 0
  if (write_busy > 0) {
    return;
     25a:	00 00       	nop
     25c:	03 c0       	rjmp	.+6      	; 0x264 <eeprom_writebuf+0x98>
  }
  if (size > 64) {
    return;
     25e:	00 00       	nop
     260:	01 c0       	rjmp	.+2      	; 0x264 <eeprom_writebuf+0x98>
  }
  if ((addr + size) > 0x3FF) {
    return;
     262:	00 00       	nop

  writesize = size;

  /* enable the EEPROM ready interrupts */
  enable_interrupt();
}
     264:	26 96       	adiw	r28, 0x06	; 6
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <eeprom_readbuf>:

/* this function reads a specified amount of data(size) from the EEPROM starting
 * at a specified address(addr) and places it in the specified buffer(buf) */
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	00 d0       	rcall	.+0      	; 0x27c <eeprom_readbuf+0x6>
     27c:	00 d0       	rcall	.+0      	; 0x27e <eeprom_readbuf+0x8>
     27e:	00 d0       	rcall	.+0      	; 0x280 <eeprom_readbuf+0xa>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	9b 83       	std	Y+3, r25	; 0x03
     286:	8a 83       	std	Y+2, r24	; 0x02
     288:	7d 83       	std	Y+5, r23	; 0x05
     28a:	6c 83       	std	Y+4, r22	; 0x04
     28c:	4e 83       	std	Y+6, r20	; 0x06

  // check that write_busy is 0
  if (write_busy > 0) {
     28e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <write_busy>
     292:	88 23       	and	r24, r24
     294:	09 f0       	breq	.+2      	; 0x298 <eeprom_readbuf+0x22>
     296:	40 c0       	rjmp	.+128    	; 0x318 <eeprom_readbuf+0xa2>
    // write to the console
    return;
  }
  if (size > 64) {
     298:	8e 81       	ldd	r24, Y+6	; 0x06
     29a:	81 34       	cpi	r24, 0x41	; 65
     29c:	08 f0       	brcs	.+2      	; 0x2a0 <eeprom_readbuf+0x2a>
     29e:	3e c0       	rjmp	.+124    	; 0x31c <eeprom_readbuf+0xa6>
    /* write error. buffer is too big */
    return;
  }

  for (unsigned char i = 0; i < size; i++) {
     2a0:	19 82       	std	Y+1, r1	; 0x01
     2a2:	35 c0       	rjmp	.+106    	; 0x30e <eeprom_readbuf+0x98>


      /* set high byte */
    EEARH = (writeaddr >> 8) & 0xFF;
     2a4:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <writeaddr>
     2a8:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <writeaddr+0x1>
     2ac:	29 2f       	mov	r18, r25
     2ae:	33 27       	eor	r19, r19
     2b0:	82 e4       	ldi	r24, 0x42	; 66
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 83       	st	Z, r18
    /* set low byte */
    EEARL = writeaddr & 0xFF;
     2b8:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <writeaddr>
     2bc:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <writeaddr+0x1>
     2c0:	81 e4       	ldi	r24, 0x41	; 65
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18

    /* set mode to read */
    EECR |= (1 << EERE);
     2c8:	8f e3       	ldi	r24, 0x3F	; 63
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 81       	ld	r18, Z
     2d0:	8f e3       	ldi	r24, 0x3F	; 63
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	21 60       	ori	r18, 0x01	; 1
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18

    while (eeprom_isbusy());
     2da:	00 00       	nop
     2dc:	0e 94 98 01 	call	0x330	; 0x330 <eeprom_isbusy>
     2e0:	89 2b       	or	r24, r25
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <eeprom_readbuf+0x66>

    /* write from register to buffer */
    buf[i] = EEDR;
     2e4:	20 e4       	ldi	r18, 0x40	; 64
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 2f       	mov	r24, r24
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	4c 81       	ldd	r20, Y+4	; 0x04
     2f0:	5d 81       	ldd	r21, Y+5	; 0x05
     2f2:	84 0f       	add	r24, r20
     2f4:	95 1f       	adc	r25, r21
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
    addr++;
     2fe:	8a 81       	ldd	r24, Y+2	; 0x02
     300:	9b 81       	ldd	r25, Y+3	; 0x03
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	9b 83       	std	Y+3, r25	; 0x03
     306:	8a 83       	std	Y+2, r24	; 0x02
  if (size > 64) {
    /* write error. buffer is too big */
    return;
  }

  for (unsigned char i = 0; i < size; i++) {
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	89 83       	std	Y+1, r24	; 0x01
     30e:	99 81       	ldd	r25, Y+1	; 0x01
     310:	8e 81       	ldd	r24, Y+6	; 0x06
     312:	98 17       	cp	r25, r24
     314:	38 f2       	brcs	.-114    	; 0x2a4 <eeprom_readbuf+0x2e>
     316:	03 c0       	rjmp	.+6      	; 0x31e <eeprom_readbuf+0xa8>
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {

  // check that write_busy is 0
  if (write_busy > 0) {
    // write to the console
    return;
     318:	00 00       	nop
     31a:	01 c0       	rjmp	.+2      	; 0x31e <eeprom_readbuf+0xa8>
  }
  if (size > 64) {
    /* write error. buffer is too big */
    return;
     31c:	00 00       	nop

    /* write from register to buffer */
    buf[i] = EEDR;
    addr++;
  }
}
     31e:	26 96       	adiw	r28, 0x06	; 6
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <eeprom_isbusy>:

/* this functiosn returns 0 if write_busy is 0, otherwise, returns 1 */
int eeprom_isbusy() {
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	00 d0       	rcall	.+0      	; 0x336 <eeprom_isbusy+0x6>
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
  int status;
  disable_interrupt();
     33a:	0e 94 c3 01 	call	0x386	; 0x386 <disable_interrupt>
  status = write_busy == 1;
     33e:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <write_busy>
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	91 30       	cpi	r25, 0x01	; 1
     346:	09 f0       	breq	.+2      	; 0x34a <eeprom_isbusy+0x1a>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	88 2f       	mov	r24, r24
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	9a 83       	std	Y+2, r25	; 0x02
     350:	89 83       	std	Y+1, r24	; 0x01
  enable_interrupt();
     352:	0e 94 b2 01 	call	0x364	; 0x364 <enable_interrupt>
  return status;
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
}
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <enable_interrupt>:

void enable_interrupt() { 
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
  EECR |= (1 << EERIE); 
     36c:	8f e3       	ldi	r24, 0x3F	; 63
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	fc 01       	movw	r30, r24
     372:	20 81       	ld	r18, Z
     374:	8f e3       	ldi	r24, 0x3F	; 63
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	28 60       	ori	r18, 0x08	; 8
     37a:	fc 01       	movw	r30, r24
     37c:	20 83       	st	Z, r18

}
     37e:	00 00       	nop
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <disable_interrupt>:

void disable_interrupt() { EECR &= ~(1 << EERIE); }
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	8f e3       	ldi	r24, 0x3F	; 63
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	fc 01       	movw	r30, r24
     394:	20 81       	ld	r18, Z
     396:	8f e3       	ldi	r24, 0x3F	; 63
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	27 7f       	andi	r18, 0xF7	; 247
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
     3a0:	00 00       	nop
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <test_eeprom_uart>:
#include "led.h"
#include "log.h"
#include "util.h"


void test_eeprom_uart() {
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	c5 54       	subi	r28, 0x45	; 69
     3b2:	d1 09       	sbc	r29, r1
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
    // Define test data
    const char *test_string = "Hello, EEPROM!";
     3be:	8d e5       	ldi	r24, 0x5D	; 93
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	9b 83       	std	Y+3, r25	; 0x03
     3c4:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char write_buffer[32];  // Use a buffer sized for the actual test string
    unsigned char read_buffer[32];   // Separate buffer for reading
    unsigned int test_address = 0x0010; // Example EEPROM start address
     3c6:	80 e1       	ldi	r24, 0x10	; 16
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	9d 83       	std	Y+5, r25	; 0x05
     3cc:	8c 83       	std	Y+4, r24	; 0x04
    unsigned char test_size = 0;
     3ce:	19 82       	std	Y+1, r1	; 0x01

    // Manually copy test_string into write_buffer
    for (test_size = 0; test_string[test_size] != '\0'; test_size++) {
     3d0:	19 82       	std	Y+1, r1	; 0x01
     3d2:	17 c0       	rjmp	.+46     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
        write_buffer[test_size] = test_string[test_size];
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	88 2f       	mov	r24, r24
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	2a 81       	ldd	r18, Y+2	; 0x02
     3dc:	3b 81       	ldd	r19, Y+3	; 0x03
     3de:	82 0f       	add	r24, r18
     3e0:	93 1f       	adc	r25, r19
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 81       	ld	r18, Z
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	88 2f       	mov	r24, r24
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	42 2f       	mov	r20, r18
     3ee:	9e 01       	movw	r18, r28
     3f0:	2a 5f       	subi	r18, 0xFA	; 250
     3f2:	3f 4f       	sbci	r19, 0xFF	; 255
     3f4:	82 0f       	add	r24, r18
     3f6:	93 1f       	adc	r25, r19
     3f8:	fc 01       	movw	r30, r24
     3fa:	40 83       	st	Z, r20
    unsigned char read_buffer[32];   // Separate buffer for reading
    unsigned int test_address = 0x0010; // Example EEPROM start address
    unsigned char test_size = 0;

    // Manually copy test_string into write_buffer
    for (test_size = 0; test_string[test_size] != '\0'; test_size++) {
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	89 83       	std	Y+1, r24	; 0x01
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	88 2f       	mov	r24, r24
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	2a 81       	ldd	r18, Y+2	; 0x02
     40a:	3b 81       	ldd	r19, Y+3	; 0x03
     40c:	82 0f       	add	r24, r18
     40e:	93 1f       	adc	r25, r19
     410:	fc 01       	movw	r30, r24
     412:	80 81       	ld	r24, Z
     414:	88 23       	and	r24, r24
     416:	f1 f6       	brne	.-68     	; 0x3d4 <test_eeprom_uart+0x2c>
        write_buffer[test_size] = test_string[test_size];
    }
    write_buffer[test_size] = '\0';  // Include null terminator
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	88 2f       	mov	r24, r24
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	9e 01       	movw	r18, r28
     420:	2a 5f       	subi	r18, 0xFA	; 250
     422:	3f 4f       	sbci	r19, 0xFF	; 255
     424:	82 0f       	add	r24, r18
     426:	93 1f       	adc	r25, r19
     428:	fc 01       	movw	r30, r24
     42a:	10 82       	st	Z, r1
    test_size++;  // Add 1 for the null terminator
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	89 83       	std	Y+1, r24	; 0x01

    // Write test data to EEPROM
    eeprom_writebuf(test_address, write_buffer, test_size);
     432:	9e 01       	movw	r18, r28
     434:	2a 5f       	subi	r18, 0xFA	; 250
     436:	3f 4f       	sbci	r19, 0xFF	; 255
     438:	8c 81       	ldd	r24, Y+4	; 0x04
     43a:	9d 81       	ldd	r25, Y+5	; 0x05
     43c:	49 81       	ldd	r20, Y+1	; 0x01
     43e:	b9 01       	movw	r22, r18
     440:	0e 94 e6 00 	call	0x1cc	; 0x1cc <eeprom_writebuf>

    // Simulate EEPROM write completion
    while (eeprom_isbusy()) {
     444:	00 00       	nop
     446:	0e 94 98 01 	call	0x330	; 0x330 <eeprom_isbusy>
     44a:	89 2b       	or	r24, r25
     44c:	e1 f7       	brne	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
        // Simulated EEPROM ISR writes data
    }

    // Read data back from EEPROM
    eeprom_readbuf(test_address, read_buffer, test_size);
     44e:	9e 01       	movw	r18, r28
     450:	2a 5d       	subi	r18, 0xDA	; 218
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	9d 81       	ldd	r25, Y+5	; 0x05
     458:	49 81       	ldd	r20, Y+1	; 0x01
     45a:	b9 01       	movw	r22, r18
     45c:	0e 94 3b 01 	call	0x276	; 0x276 <eeprom_readbuf>

    // Null-terminate the read buffer for safety
    read_buffer[test_size - 1] = '\0';
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	88 2f       	mov	r24, r24
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	9e 01       	movw	r18, r28
     46a:	2a 5d       	subi	r18, 0xDA	; 218
     46c:	3f 4f       	sbci	r19, 0xFF	; 255
     46e:	82 0f       	add	r24, r18
     470:	93 1f       	adc	r25, r19
     472:	fc 01       	movw	r30, r24
     474:	10 82       	st	Z, r1

    // Output the read data via UART
    uart_writestr("Read from EEPROM: ");
     476:	8c e6       	ldi	r24, 0x6C	; 108
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 b9 09 	call	0x1372	; 0x1372 <uart_writestr>
    uart_writestr((char *)read_buffer);
     47e:	ce 01       	movw	r24, r28
     480:	86 96       	adiw	r24, 0x26	; 38
     482:	0e 94 b9 09 	call	0x1372	; 0x1372 <uart_writestr>
    uart_writestr("\n");
     486:	8f e7       	ldi	r24, 0x7F	; 127
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 b9 09 	call	0x1372	; 0x1372 <uart_writestr>
}
     48e:	00 00       	nop
     490:	cb 5b       	subi	r28, 0xBB	; 187
     492:	df 4f       	sbci	r29, 0xFF	; 255
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <enable_global_interrupts>:

#define SREG (*(volatile unsigned char *)0x5F)
#define I_BIT 7

void enable_global_interrupts() {
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
    SREG |= (1 << I_BIT);  // Set the I bit to enable interrupts
     4ac:	8f e5       	ldi	r24, 0x5F	; 95
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 81       	ld	r18, Z
     4b4:	8f e5       	ldi	r24, 0x5F	; 95
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	20 68       	ori	r18, 0x80	; 128
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
}
     4be:	00 00       	nop
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <main>:

int main() {
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <main+0x6>
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
  enable_global_interrupts();
     4d0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <enable_global_interrupts>
  // variable to track if the eeprom has been dumped
  int dumped = 0;
     4d4:	1a 82       	std	Y+2, r1	; 0x02
     4d6:	19 82       	std	Y+1, r1	; 0x01
  test_eeprom_uart();
     4d8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <test_eeprom_uart>
  // init uart
  uart_init();
     4dc:	0e 94 b3 09 	call	0x1366	; 0x1366 <uart_init>
  // init conig
  // init led
  led_init();
     4e0:	0e 94 10 04 	call	0x820	; 0x820 <led_init>
  // init log
  log_init();
     4e4:	0e 94 42 04 	call	0x884	; 0x884 <log_init>
  // init rtc
  // init vpd

  // led blink pattern "--- -.-"
  led_set_blink("--- -.-"); 
     4e8:	81 e8       	ldi	r24, 0x81	; 129
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 a4 03 	call	0x748	; 0x748 <led_set_blink>
  // read/write the token to uart \n

  // set the config_use_static_ip to 1
  // set the config modified state
  // clear the event log
  log_clear();
     4f0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <log_clear>
  log_add_record(0xaa);
     4f4:	8a ea       	ldi	r24, 0xAA	; 170
     4f6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <log_add_record>
  log_add_record(0xbb);
     4fa:	8b eb       	ldi	r24, 0xBB	; 187
     4fc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <log_add_record>
  log_add_record(0xc);
     500:	8c e0       	ldi	r24, 0x0C	; 12
     502:	0e 94 3d 05 	call	0xa7a	; 0xa7a <log_add_record>

  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc
  uart_writechar(log_get_num_entries());
     506:	0e 94 ab 05 	call	0xb56	; 0xb56 <log_get_num_entries>
     50a:	0e 94 b7 09 	call	0x136e	; 0x136e <uart_writechar>

  while(1) {
    // update the blink fsm every
    led_update();
     50e:	0e 94 b6 03 	call	0x76c	; 0x76c <led_update>
      // update the log in EEPROM

    // if (config has changed && eeprom is not busy)
      // update config in EEPROM

    if ((!eeprom_isbusy()) && (!dumped)) {
     512:	0e 94 98 01 	call	0x330	; 0x330 <eeprom_isbusy>
     516:	89 2b       	or	r24, r25
     518:	d1 f7       	brne	.-12     	; 0x50e <main+0x48>
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	9a 81       	ldd	r25, Y+2	; 0x02
     51e:	89 2b       	or	r24, r25
     520:	b1 f7       	brne	.-20     	; 0x50e <main+0x48>
          dump_eeprom(0,0x100);
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	71 e0       	ldi	r23, 0x01	; 1
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <dump_eeprom>
          dumped=1;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	9a 83       	std	Y+2, r25	; 0x02
     534:	89 83       	std	Y+1, r24	; 0x01
  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc
  uart_writechar(log_get_num_entries());

  while(1) {
    // update the blink fsm every
    led_update();
     536:	eb cf       	rjmp	.-42     	; 0x50e <main+0x48>

00000538 <update_checksum>:
#include "util.h"

void update_checksum(unsigned char* data, unsigned int size) {
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	28 97       	sbiw	r28, 0x08	; 8
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	9e 83       	std	Y+6, r25	; 0x06
     54e:	8d 83       	std	Y+5, r24	; 0x05
     550:	78 87       	std	Y+8, r23	; 0x08
     552:	6f 83       	std	Y+7, r22	; 0x07
    if (size == 0) return; // Handle empty data structure
     554:	8f 81       	ldd	r24, Y+7	; 0x07
     556:	98 85       	ldd	r25, Y+8	; 0x08
     558:	89 2b       	or	r24, r25
     55a:	79 f1       	breq	.+94     	; 0x5ba <update_checksum+0x82>

    unsigned int sum = 0;
     55c:	1a 82       	std	Y+2, r1	; 0x02
     55e:	19 82       	std	Y+1, r1	; 0x01

    // Calculate the sum of all bytes except the last one
    for (unsigned int i = 0; i < size - 1; i++) {
     560:	1c 82       	std	Y+4, r1	; 0x04
     562:	1b 82       	std	Y+3, r1	; 0x03
     564:	15 c0       	rjmp	.+42     	; 0x590 <update_checksum+0x58>
        sum += (unsigned char)data[i];
     566:	2d 81       	ldd	r18, Y+5	; 0x05
     568:	3e 81       	ldd	r19, Y+6	; 0x06
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	9c 81       	ldd	r25, Y+4	; 0x04
     56e:	82 0f       	add	r24, r18
     570:	93 1f       	adc	r25, r19
     572:	fc 01       	movw	r30, r24
     574:	80 81       	ld	r24, Z
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	29 81       	ldd	r18, Y+1	; 0x01
     57c:	3a 81       	ldd	r19, Y+2	; 0x02
     57e:	82 0f       	add	r24, r18
     580:	93 1f       	adc	r25, r19
     582:	9a 83       	std	Y+2, r25	; 0x02
     584:	89 83       	std	Y+1, r24	; 0x01
    if (size == 0) return; // Handle empty data structure

    unsigned int sum = 0;

    // Calculate the sum of all bytes except the last one
    for (unsigned int i = 0; i < size - 1; i++) {
     586:	8b 81       	ldd	r24, Y+3	; 0x03
     588:	9c 81       	ldd	r25, Y+4	; 0x04
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	9c 83       	std	Y+4, r25	; 0x04
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	8f 81       	ldd	r24, Y+7	; 0x07
     592:	98 85       	ldd	r25, Y+8	; 0x08
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	2b 81       	ldd	r18, Y+3	; 0x03
     598:	3c 81       	ldd	r19, Y+4	; 0x04
     59a:	28 17       	cp	r18, r24
     59c:	39 07       	cpc	r19, r25
     59e:	18 f3       	brcs	.-58     	; 0x566 <update_checksum+0x2e>
        sum += (unsigned char)data[i];
    }

    // Calculate the checksum value for the last byte
    data[size - 1] = (char)(-sum & 0xFF); // Ensure it wraps within one byte
     5a0:	49 81       	ldd	r20, Y+1	; 0x01
     5a2:	8f 81       	ldd	r24, Y+7	; 0x07
     5a4:	98 85       	ldd	r25, Y+8	; 0x08
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	2d 81       	ldd	r18, Y+5	; 0x05
     5aa:	3e 81       	ldd	r19, Y+6	; 0x06
     5ac:	82 0f       	add	r24, r18
     5ae:	93 1f       	adc	r25, r19
     5b0:	24 2f       	mov	r18, r20
     5b2:	21 95       	neg	r18
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 83       	st	Z, r18
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <update_checksum+0x84>
#include "util.h"

void update_checksum(unsigned char* data, unsigned int size) {
    if (size == 0) return; // Handle empty data structure
     5ba:	00 00       	nop
        sum += (unsigned char)data[i];
    }

    // Calculate the checksum value for the last byte
    data[size - 1] = (char)(-sum & 0xFF); // Ensure it wraps within one byte
}
     5bc:	28 96       	adiw	r28, 0x08	; 8
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <is_checksum_valid>:


int is_checksum_valid(unsigned char* data, unsigned int size) {
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	28 97       	sbiw	r28, 0x08	; 8
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	9e 83       	std	Y+6, r25	; 0x06
     5e4:	8d 83       	std	Y+5, r24	; 0x05
     5e6:	78 87       	std	Y+8, r23	; 0x08
     5e8:	6f 83       	std	Y+7, r22	; 0x07
    if (size == 0) return 0; // Invalid for empty data structure
     5ea:	8f 81       	ldd	r24, Y+7	; 0x07
     5ec:	98 85       	ldd	r25, Y+8	; 0x08
     5ee:	89 2b       	or	r24, r25
     5f0:	19 f4       	brne	.+6      	; 0x5f8 <is_checksum_valid+0x2a>
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	2a c0       	rjmp	.+84     	; 0x64c <is_checksum_valid+0x7e>

    unsigned int sum = 0;
     5f8:	1a 82       	std	Y+2, r1	; 0x02
     5fa:	19 82       	std	Y+1, r1	; 0x01

    // Calculate the sum of all bytes
    for (unsigned int i = 0; i < size; i++) {
     5fc:	1c 82       	std	Y+4, r1	; 0x04
     5fe:	1b 82       	std	Y+3, r1	; 0x03
     600:	15 c0       	rjmp	.+42     	; 0x62c <is_checksum_valid+0x5e>
        sum += (unsigned char)data[i];
     602:	2d 81       	ldd	r18, Y+5	; 0x05
     604:	3e 81       	ldd	r19, Y+6	; 0x06
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	82 0f       	add	r24, r18
     60c:	93 1f       	adc	r25, r19
     60e:	fc 01       	movw	r30, r24
     610:	80 81       	ld	r24, Z
     612:	88 2f       	mov	r24, r24
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	29 81       	ldd	r18, Y+1	; 0x01
     618:	3a 81       	ldd	r19, Y+2	; 0x02
     61a:	82 0f       	add	r24, r18
     61c:	93 1f       	adc	r25, r19
     61e:	9a 83       	std	Y+2, r25	; 0x02
     620:	89 83       	std	Y+1, r24	; 0x01
    if (size == 0) return 0; // Invalid for empty data structure

    unsigned int sum = 0;

    // Calculate the sum of all bytes
    for (unsigned int i = 0; i < size; i++) {
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	9c 81       	ldd	r25, Y+4	; 0x04
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	9c 83       	std	Y+4, r25	; 0x04
     62a:	8b 83       	std	Y+3, r24	; 0x03
     62c:	2b 81       	ldd	r18, Y+3	; 0x03
     62e:	3c 81       	ldd	r19, Y+4	; 0x04
     630:	8f 81       	ldd	r24, Y+7	; 0x07
     632:	98 85       	ldd	r25, Y+8	; 0x08
     634:	28 17       	cp	r18, r24
     636:	39 07       	cpc	r19, r25
     638:	20 f3       	brcs	.-56     	; 0x602 <is_checksum_valid+0x34>
        sum += (unsigned char)data[i];
    }

    // Return 1 if the sum is zero, otherwise 0
    return (sum & 0xFF) == 0;
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	99 27       	eor	r25, r25
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	89 2b       	or	r24, r25
     644:	09 f0       	breq	.+2      	; 0x648 <is_checksum_valid+0x7a>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	82 2f       	mov	r24, r18
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	28 96       	adiw	r28, 0x08	; 8
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <read_vpd>:
struct vpd_struct vpd;
struct vpd_struct defaults = {"SER", "DaVonte", "Carter", "super1337", 0, {'D'&0xFE,'a','V','C','a','r'}, "USA", 0};

/********** private declarations **********/
/* read manufacturer data from eeprom */
void read_vpd() {
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
}
     666:	00 00       	nop
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <vpd_init>:

int cmp_str(const char *str1, const char *str2) ;


/********** public definitions **********/
void vpd_init() {
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
  // wait for the eeprom to free up
  while(eeprom_isbusy());
     676:	00 00       	nop
     678:	0e 94 98 01 	call	0x330	; 0x330 <eeprom_isbusy>
     67c:	89 2b       	or	r24, r25
     67e:	e1 f7       	brne	.-8      	; 0x678 <vpd_init+0xa>
  
  /* read all data from the EEPROM at address 0x000 */

  /* if the data was invalid then write defaults and try to reinitialize */
  while(!vpd_is_data_valid()) {
     680:	00 00       	nop
     682:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vpd_is_data_valid>
     686:	89 2b       	or	r24, r25
     688:	e1 f3       	breq	.-8      	; 0x682 <vpd_init+0x14>
    // initialize data from defaults
    // read defaults
  }
}
     68a:	00 00       	nop
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <vpd_write_defaults>:

void vpd_write_defaults() {
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
  /* update checksum for defaults */
  
  /* write the defaults */


}
     69a:	00 00       	nop
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <vpd_is_data_valid>:

int vpd_is_data_valid() {
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(vpd.token, "SER");
     6aa:	69 e8       	ldi	r22, 0x89	; 137
     6ac:	71 e0       	ldi	r23, 0x01	; 1
     6ae:	86 e6       	ldi	r24, 0x66	; 102
     6b0:	94 e0       	ldi	r25, 0x04	; 4
     6b2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <cmp_str>
    // return (vpd.token == "SER") && is_checksum_valid();

}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <cmp_str>:

/********** private definitions **********/

int cmp_str(const char *str1, const char *str2) {
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <cmp_str+0x6>
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <cmp_str+0x8>
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	7c 83       	std	Y+4, r23	; 0x04
     6ce:	6b 83       	std	Y+3, r22	; 0x03
  while (*str1 && *str2) {
     6d0:	17 c0       	rjmp	.+46     	; 0x700 <cmp_str+0x44>
    if (*str1 != *str2) {
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 81       	ld	r18, Z
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	9c 81       	ldd	r25, Y+4	; 0x04
     6de:	fc 01       	movw	r30, r24
     6e0:	80 81       	ld	r24, Z
     6e2:	28 17       	cp	r18, r24
     6e4:	19 f0       	breq	.+6      	; 0x6ec <cmp_str+0x30>
      return 0;
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	27 c0       	rjmp	.+78     	; 0x73a <cmp_str+0x7e>
    }
    str1++;
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	9a 81       	ldd	r25, Y+2	; 0x02
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	9a 83       	std	Y+2, r25	; 0x02
     6f4:	89 83       	std	Y+1, r24	; 0x01
    str2++;
     6f6:	8b 81       	ldd	r24, Y+3	; 0x03
     6f8:	9c 81       	ldd	r25, Y+4	; 0x04
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	9c 83       	std	Y+4, r25	; 0x04
     6fe:	8b 83       	std	Y+3, r24	; 0x03
}

/********** private definitions **********/

int cmp_str(const char *str1, const char *str2) {
  while (*str1 && *str2) {
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	88 23       	and	r24, r24
     70a:	31 f0       	breq	.+12     	; 0x718 <cmp_str+0x5c>
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	9c 81       	ldd	r25, Y+4	; 0x04
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	88 23       	and	r24, r24
     716:	e9 f6       	brne	.-70     	; 0x6d2 <cmp_str+0x16>
      return 0;
    }
    str1++;
    str2++;
  }
  return *str1 == '\0' && *str2 == '\0';
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	88 23       	and	r24, r24
     722:	49 f4       	brne	.+18     	; 0x736 <cmp_str+0x7a>
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	9c 81       	ldd	r25, Y+4	; 0x04
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	88 23       	and	r24, r24
     72e:	19 f4       	brne	.+6      	; 0x736 <cmp_str+0x7a>
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	02 c0       	rjmp	.+4      	; 0x73a <cmp_str+0x7e>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <led_set_blink>:
     748:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <blink_msg+0x1>
     74c:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <blink_msg>
     750:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <blink_pos+0x1>
     754:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <blink_pos>
     758:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <blink_state>
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_set>
     768:	0c 94 15 04 	jmp	0x82a	; 0x82a <led_off>

0000076c <led_update>:
     76c:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <blink_msg>
     770:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <blink_msg+0x1>
     774:	89 2b       	or	r24, r25
     776:	09 f4       	brne	.+2      	; 0x77a <led_update+0xe>
     778:	52 c0       	rjmp	.+164    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <delay_isdone>
     782:	89 2b       	or	r24, r25
     784:	09 f4       	brne	.+2      	; 0x788 <led_update+0x1c>
     786:	4b c0       	rjmp	.+150    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     788:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <blink_state>
     78c:	81 11       	cpse	r24, r1
     78e:	34 c0       	rjmp	.+104    	; 0x7f8 <led_update+0x8c>
     790:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <blink_pos>
     794:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <blink_pos+0x1>
     798:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <blink_msg>
     79c:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <blink_msg+0x1>
     7a0:	e2 0f       	add	r30, r18
     7a2:	f3 1f       	adc	r31, r19
     7a4:	80 81       	ld	r24, Z
     7a6:	80 32       	cpi	r24, 0x20	; 32
     7a8:	e9 f0       	breq	.+58     	; 0x7e4 <led_update+0x78>
     7aa:	3c f4       	brge	.+14     	; 0x7ba <led_update+0x4e>
     7ac:	81 11       	cpse	r24, r1
     7ae:	1d c0       	rjmp	.+58     	; 0x7ea <led_update+0x7e>
     7b0:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <blink_pos+0x1>
     7b4:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <blink_pos>
     7b8:	08 95       	ret
     7ba:	8d 32       	cpi	r24, 0x2D	; 45
     7bc:	39 f0       	breq	.+14     	; 0x7cc <led_update+0x60>
     7be:	8e 32       	cpi	r24, 0x2E	; 46
     7c0:	a1 f4       	brne	.+40     	; 0x7ea <led_update+0x7e>
     7c2:	0e 94 13 04 	call	0x826	; 0x826 <led_on>
     7c6:	6a ef       	ldi	r22, 0xFA	; 250
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <led_update+0x68>
     7cc:	0e 94 13 04 	call	0x826	; 0x826 <led_on>
     7d0:	6e ee       	ldi	r22, 0xEE	; 238
     7d2:	72 e0       	ldi	r23, 0x02	; 2
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_set>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <blink_state>
     7e2:	08 95       	ret
     7e4:	68 ee       	ldi	r22, 0xE8	; 232
     7e6:	73 e0       	ldi	r23, 0x03	; 3
     7e8:	0b c0       	rjmp	.+22     	; 0x800 <__DATA_REGION_LENGTH__>
     7ea:	2f 5f       	subi	r18, 0xFF	; 255
     7ec:	3f 4f       	sbci	r19, 0xFF	; 255
     7ee:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <blink_pos+0x1>
     7f2:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <blink_pos>
     7f6:	08 95       	ret
     7f8:	0e 94 15 04 	call	0x82a	; 0x82a <led_off>
     7fc:	64 e6       	ldi	r22, 0x64	; 100
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_set>
     808:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <blink_state>
     80c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <blink_pos>
     810:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <blink_pos+0x1>
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <blink_pos+0x1>
     81a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <blink_pos>
     81e:	08 95       	ret

00000820 <led_init>:
     820:	21 9a       	sbi	0x04, 1	; 4
     822:	29 98       	cbi	0x05, 1	; 5
     824:	08 95       	ret

00000826 <led_on>:
     826:	29 9a       	sbi	0x05, 1	; 5
     828:	08 95       	ret

0000082a <led_off>:
     82a:	29 98       	cbi	0x05, 1	; 5
     82c:	08 95       	ret

0000082e <led_is_on>:
     82e:	85 b1       	in	r24, 0x05	; 5
     830:	86 95       	lsr	r24
     832:	81 70       	andi	r24, 0x01	; 1
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	08 95       	ret

00000838 <log_is_data_valid>:
     838:	80 31       	cpi	r24, 0x10	; 16
     83a:	91 05       	cpc	r25, r1
     83c:	04 f5       	brge	.+64     	; 0x87e <log_is_data_valid+0x46>
     83e:	27 e0       	ldi	r18, 0x07	; 7
     840:	28 9f       	mul	r18, r24
     842:	a0 01       	movw	r20, r0
     844:	29 9f       	mul	r18, r25
     846:	50 0d       	add	r21, r0
     848:	11 24       	eor	r1, r1
     84a:	fa 01       	movw	r30, r20
     84c:	e3 54       	subi	r30, 0x43	; 67
     84e:	fe 4f       	sbci	r31, 0xFE	; 254
     850:	80 81       	ld	r24, Z
     852:	81 32       	cpi	r24, 0x21	; 33
     854:	a0 f4       	brcc	.+40     	; 0x87e <log_is_data_valid+0x46>
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	fa 01       	movw	r30, r20
     85e:	e8 0f       	add	r30, r24
     860:	f9 1f       	adc	r31, r25
     862:	e3 54       	subi	r30, 0x43	; 67
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	30 81       	ld	r19, Z
     868:	23 0f       	add	r18, r19
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	87 30       	cpi	r24, 0x07	; 7
     86e:	91 05       	cpc	r25, r1
     870:	a9 f7       	brne	.-22     	; 0x85c <log_is_data_valid+0x24>
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	22 23       	and	r18, r18
     878:	21 f0       	breq	.+8      	; 0x882 <log_is_data_valid+0x4a>
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	08 95       	ret
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	08 95       	ret

00000884 <log_init>:
     884:	6f 92       	push	r6
     886:	7f 92       	push	r7
     888:	8f 92       	push	r8
     88a:	9f 92       	push	r9
     88c:	af 92       	push	r10
     88e:	bf 92       	push	r11
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	0e 94 98 01 	call	0x330	; 0x330 <eeprom_isbusy>
     8a4:	89 2b       	or	r24, r25
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <log_init+0x1c>
     8a8:	0d e2       	ldi	r16, 0x2D	; 45
     8aa:	12 e0       	ldi	r17, 0x02	; 2
     8ac:	c0 e8       	ldi	r28, 0x80	; 128
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
     8b0:	be 01       	movw	r22, r28
     8b2:	63 5c       	subi	r22, 0xC3	; 195
     8b4:	7e 4f       	sbci	r23, 0xFE	; 254
     8b6:	47 e0       	ldi	r20, 0x07	; 7
     8b8:	ce 01       	movw	r24, r28
     8ba:	0e 94 3b 01 	call	0x276	; 0x276 <eeprom_readbuf>
     8be:	f8 01       	movw	r30, r16
     8c0:	11 92       	st	Z+, r1
     8c2:	8f 01       	movw	r16, r30
     8c4:	27 96       	adiw	r28, 0x07	; 7
     8c6:	c0 3f       	cpi	r28, 0xF0	; 240
     8c8:	d1 05       	cpc	r29, r1
     8ca:	91 f7       	brne	.-28     	; 0x8b0 <log_init+0x2c>
     8cc:	4d eb       	ldi	r20, 0xBD	; 189
     8ce:	e4 2e       	mov	r14, r20
     8d0:	41 e0       	ldi	r20, 0x01	; 1
     8d2:	f4 2e       	mov	r15, r20
     8d4:	87 01       	movw	r16, r14
     8d6:	c0 e0       	ldi	r28, 0x00	; 0
     8d8:	d0 e0       	ldi	r29, 0x00	; 0
     8da:	d1 2c       	mov	r13, r1
     8dc:	b1 2c       	mov	r11, r1
     8de:	77 24       	eor	r7, r7
     8e0:	7a 94       	dec	r7
     8e2:	ce 01       	movw	r24, r28
     8e4:	0e 94 1c 04 	call	0x838	; 0x838 <log_is_data_valid>
     8e8:	89 2b       	or	r24, r25
     8ea:	41 f0       	breq	.+16     	; 0x8fc <log_init+0x78>
     8ec:	f8 01       	movw	r30, r16
     8ee:	80 81       	ld	r24, Z
     8f0:	87 15       	cp	r24, r7
     8f2:	20 f4       	brcc	.+8      	; 0x8fc <log_init+0x78>
     8f4:	bc 2e       	mov	r11, r28
     8f6:	78 2e       	mov	r7, r24
     8f8:	dd 24       	eor	r13, r13
     8fa:	d3 94       	inc	r13
     8fc:	21 96       	adiw	r28, 0x01	; 1
     8fe:	09 5f       	subi	r16, 0xF9	; 249
     900:	1f 4f       	sbci	r17, 0xFF	; 255
     902:	c0 31       	cpi	r28, 0x10	; 16
     904:	d1 05       	cpc	r29, r1
     906:	69 f7       	brne	.-38     	; 0x8e2 <log_init+0x5e>
     908:	dd 20       	and	r13, r13
     90a:	09 f4       	brne	.+2      	; 0x90e <__stack+0xf>
     90c:	6a c0       	rjmp	.+212    	; 0x9e2 <__stack+0xe3>
     90e:	b0 92 bc 01 	sts	0x01BC, r11	; 0x8001bc <last_written>
     912:	70 92 bb 01 	sts	0x01BB, r7	; 0x8001bb <last_transaction_written>
     916:	cb 2d       	mov	r28, r11
     918:	d0 e0       	ldi	r29, 0x00	; 0
     91a:	8e 01       	movw	r16, r28
     91c:	0f 5f       	subi	r16, 0xFF	; 255
     91e:	1f 4f       	sbci	r17, 0xFF	; 255
     920:	87 2c       	mov	r8, r7
     922:	2f e0       	ldi	r18, 0x0F	; 15
     924:	a2 2e       	mov	r10, r18
     926:	37 e0       	ldi	r19, 0x07	; 7
     928:	93 2e       	mov	r9, r19
     92a:	68 01       	movw	r12, r16
     92c:	ff e0       	ldi	r31, 0x0F	; 15
     92e:	cf 22       	and	r12, r31
     930:	dd 24       	eor	r13, r13
     932:	c6 01       	movw	r24, r12
     934:	0e 94 1c 04 	call	0x838	; 0x838 <log_is_data_valid>
     938:	89 2b       	or	r24, r25
     93a:	61 f4       	brne	.+24     	; 0x954 <__stack+0x55>
     93c:	b0 92 ba 01 	sts	0x01BA, r11	; 0x8001ba <tail>
     940:	8e 01       	movw	r16, r28
     942:	01 50       	subi	r16, 0x01	; 1
     944:	11 09       	sbc	r17, r1
     946:	60 97       	sbiw	r28, 0x10	; 16
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	a8 2e       	mov	r10, r24
     94c:	b1 2c       	mov	r11, r1
     94e:	97 e0       	ldi	r25, 0x07	; 7
     950:	69 2e       	mov	r6, r25
     952:	3a c0       	rjmp	.+116    	; 0x9c8 <__stack+0xc9>
     954:	9c 9c       	mul	r9, r12
     956:	f0 01       	movw	r30, r0
     958:	9d 9c       	mul	r9, r13
     95a:	f0 0d       	add	r31, r0
     95c:	11 24       	eor	r1, r1
     95e:	e3 54       	subi	r30, 0x43	; 67
     960:	fe 4f       	sbci	r31, 0xFE	; 254
     962:	40 81       	ld	r20, Z
     964:	24 2f       	mov	r18, r20
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	88 2d       	mov	r24, r8
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	8f 71       	andi	r24, 0x1F	; 31
     970:	99 27       	eor	r25, r25
     972:	28 17       	cp	r18, r24
     974:	39 07       	cpc	r19, r25
     976:	11 f7       	brne	.-60     	; 0x93c <__stack+0x3d>
     978:	c0 92 bc 01 	sts	0x01BC, r12	; 0x8001bc <last_written>
     97c:	40 93 bb 01 	sts	0x01BB, r20	; 0x8001bb <last_transaction_written>
     980:	aa 94       	dec	r10
     982:	0f 5f       	subi	r16, 0xFF	; 255
     984:	1f 4f       	sbci	r17, 0xFF	; 255
     986:	aa 20       	and	r10, r10
     988:	c9 f2       	breq	.-78     	; 0x93c <__stack+0x3d>
     98a:	84 2e       	mov	r8, r20
     98c:	ce cf       	rjmp	.-100    	; 0x92a <__stack+0x2b>
     98e:	f7 01       	movw	r30, r14
     990:	20 81       	ld	r18, Z
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	87 2d       	mov	r24, r7
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	4f 96       	adiw	r24, 0x1f	; 31
     99a:	8f 71       	andi	r24, 0x1F	; 31
     99c:	99 27       	eor	r25, r25
     99e:	28 17       	cp	r18, r24
     9a0:	39 07       	cpc	r19, r25
     9a2:	31 f5       	brne	.+76     	; 0x9f0 <__stack+0xf1>
     9a4:	c0 92 ba 01 	sts	0x01BA, r12	; 0x8001ba <tail>
     9a8:	68 9c       	mul	r6, r8
     9aa:	f0 01       	movw	r30, r0
     9ac:	69 9c       	mul	r6, r9
     9ae:	f0 0d       	add	r31, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	e3 54       	subi	r30, 0x43	; 67
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	70 80       	ld	r7, Z
     9b8:	01 50       	subi	r16, 0x01	; 1
     9ba:	11 09       	sbc	r17, r1
     9bc:	f7 e0       	ldi	r31, 0x07	; 7
     9be:	ef 0e       	add	r14, r31
     9c0:	f1 1c       	adc	r15, r1
     9c2:	0c 17       	cp	r16, r28
     9c4:	1d 07       	cpc	r17, r29
     9c6:	a1 f0       	breq	.+40     	; 0x9f0 <__stack+0xf1>
     9c8:	c8 01       	movw	r24, r16
     9ca:	b5 01       	movw	r22, r10
     9cc:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__divmodhi4>
     9d0:	6c 01       	movw	r12, r24
     9d2:	4c 01       	movw	r8, r24
     9d4:	99 24       	eor	r9, r9
     9d6:	c4 01       	movw	r24, r8
     9d8:	0e 94 1c 04 	call	0x838	; 0x838 <log_is_data_valid>
     9dc:	89 2b       	or	r24, r25
     9de:	b9 f6       	brne	.-82     	; 0x98e <__stack+0x8f>
     9e0:	07 c0       	rjmp	.+14     	; 0x9f0 <__stack+0xf1>
     9e2:	8f e0       	ldi	r24, 0x0F	; 15
     9e4:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <last_written>
     9e8:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <last_transaction_written>
     9ec:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <tail>
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	df 90       	pop	r13
     9fe:	cf 90       	pop	r12
     a00:	bf 90       	pop	r11
     a02:	af 90       	pop	r10
     a04:	9f 90       	pop	r9
     a06:	8f 90       	pop	r8
     a08:	7f 90       	pop	r7
     a0a:	6f 90       	pop	r6
     a0c:	08 95       	ret

00000a0e <log_update>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	0e 94 98 01 	call	0x330	; 0x330 <eeprom_isbusy>
     a1c:	89 2b       	or	r24, r25
     a1e:	39 f5       	brne	.+78     	; 0xa6e <log_update+0x60>
     a20:	ed e2       	ldi	r30, 0x2D	; 45
     a22:	f2 e0       	ldi	r31, 0x02	; 2
     a24:	c0 e0       	ldi	r28, 0x00	; 0
     a26:	d0 e0       	ldi	r29, 0x00	; 0
     a28:	81 91       	ld	r24, Z+
     a2a:	88 23       	and	r24, r24
     a2c:	e1 f0       	breq	.+56     	; 0xa66 <log_update+0x58>
     a2e:	17 e0       	ldi	r17, 0x07	; 7
     a30:	1c 9f       	mul	r17, r28
     a32:	c0 01       	movw	r24, r0
     a34:	1d 9f       	mul	r17, r29
     a36:	90 0d       	add	r25, r0
     a38:	11 24       	eor	r1, r1
     a3a:	9c 01       	movw	r18, r24
     a3c:	23 54       	subi	r18, 0x43	; 67
     a3e:	3e 4f       	sbci	r19, 0xFE	; 254
     a40:	79 01       	movw	r14, r18
     a42:	67 e0       	ldi	r22, 0x07	; 7
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	c9 01       	movw	r24, r18
     a48:	0e 94 9c 02 	call	0x538	; 0x538 <update_checksum>
     a4c:	c1 9f       	mul	r28, r17
     a4e:	c0 01       	movw	r24, r0
     a50:	11 24       	eor	r1, r1
     a52:	47 e0       	ldi	r20, 0x07	; 7
     a54:	b7 01       	movw	r22, r14
     a56:	80 58       	subi	r24, 0x80	; 128
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <eeprom_writebuf>
     a5e:	c3 5d       	subi	r28, 0xD3	; 211
     a60:	dd 4f       	sbci	r29, 0xFD	; 253
     a62:	18 82       	st	Y, r1
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <log_update+0x60>
     a66:	21 96       	adiw	r28, 0x01	; 1
     a68:	c0 31       	cpi	r28, 0x10	; 16
     a6a:	d1 05       	cpc	r29, r1
     a6c:	e9 f6       	brne	.-70     	; 0xa28 <log_update+0x1a>
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	08 95       	ret

00000a7a <log_add_record>:
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	e8 2e       	mov	r14, r24
     a88:	c0 91 bc 01 	lds	r28, 0x01BC	; 0x8001bc <last_written>
     a8c:	d0 e0       	ldi	r29, 0x00	; 0
     a8e:	21 96       	adiw	r28, 0x01	; 1
     a90:	cf 70       	andi	r28, 0x0F	; 15
     a92:	dd 27       	eor	r29, r29
     a94:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <tail>
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 1c 04 	call	0x838	; 0x838 <log_is_data_valid>
     a9e:	f8 2e       	mov	r15, r24
     aa0:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <last_transaction_written>
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
     aa6:	81 32       	cpi	r24, 0x21	; 33
     aa8:	18 f4       	brcc	.+6      	; 0xab0 <log_add_record+0x36>
     aaa:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <last_transaction_written>
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <log_add_record+0x3a>
     ab0:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <last_transaction_written>
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	8c 9f       	mul	r24, r28
     ab8:	80 01       	movw	r16, r0
     aba:	8d 9f       	mul	r24, r29
     abc:	10 0d       	add	r17, r0
     abe:	11 24       	eor	r1, r1
     ac0:	03 54       	subi	r16, 0x43	; 67
     ac2:	1e 4f       	sbci	r17, 0xFE	; 254
     ac4:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <last_transaction_written>
     ac8:	f8 01       	movw	r30, r16
     aca:	80 83       	st	Z, r24
     acc:	0e 94 0a 06 	call	0xc14	; 0xc14 <rtc_get_date>
     ad0:	f8 01       	movw	r30, r16
     ad2:	61 83       	std	Z+1, r22	; 0x01
     ad4:	72 83       	std	Z+2, r23	; 0x02
     ad6:	83 83       	std	Z+3, r24	; 0x03
     ad8:	94 83       	std	Z+4, r25	; 0x04
     ada:	e5 82       	std	Z+5, r14	; 0x05
     adc:	c0 93 bc 01 	sts	0x01BC, r28	; 0x8001bc <last_written>
     ae0:	67 e0       	ldi	r22, 0x07	; 7
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	c8 01       	movw	r24, r16
     ae6:	0e 94 9c 02 	call	0x538	; 0x538 <update_checksum>
     aea:	c3 5d       	subi	r28, 0xD3	; 211
     aec:	dd 4f       	sbci	r29, 0xFD	; 253
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	88 83       	st	Y, r24
     af2:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <last_written>
     af6:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <tail>
     afa:	89 13       	cpse	r24, r25
     afc:	08 c0       	rjmp	.+16     	; 0xb0e <log_add_record+0x94>
     afe:	ff 20       	and	r15, r15
     b00:	31 f0       	breq	.+12     	; 0xb0e <log_add_record+0x94>
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	8f 70       	andi	r24, 0x0F	; 15
     b08:	99 27       	eor	r25, r25
     b0a:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <tail>
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	08 95       	ret

00000b1c <log_clear>:
     b1c:	ed eb       	ldi	r30, 0xBD	; 189
     b1e:	f1 e0       	ldi	r31, 0x01	; 1
     b20:	ad e2       	ldi	r26, 0x2D	; 45
     b22:	b2 e0       	ldi	r27, 0x02	; 2
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	4f ef       	ldi	r20, 0xFF	; 255
     b28:	5f ef       	ldi	r21, 0xFF	; 255
     b2a:	ba 01       	movw	r22, r20
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	80 83       	st	Z, r24
     b30:	85 83       	std	Z+5, r24	; 0x05
     b32:	41 83       	std	Z+1, r20	; 0x01
     b34:	52 83       	std	Z+2, r21	; 0x02
     b36:	63 83       	std	Z+3, r22	; 0x03
     b38:	74 83       	std	Z+4, r23	; 0x04
     b3a:	9d 93       	st	X+, r25
     b3c:	37 96       	adiw	r30, 0x07	; 7
     b3e:	22 e0       	ldi	r18, 0x02	; 2
     b40:	ed 32       	cpi	r30, 0x2D	; 45
     b42:	f2 07       	cpc	r31, r18
     b44:	a1 f7       	brne	.-24     	; 0xb2e <log_clear+0x12>
     b46:	8f e0       	ldi	r24, 0x0F	; 15
     b48:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <last_written>
     b4c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <tail>
     b50:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <last_transaction_written>
     b54:	08 95       	ret

00000b56 <log_get_num_entries>:
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	00 91 ba 01 	lds	r16, 0x01BA	; 0x8001ba <tail>
     b62:	c0 2f       	mov	r28, r16
     b64:	10 e0       	ldi	r17, 0x00	; 0
     b66:	d0 e0       	ldi	r29, 0x00	; 0
     b68:	ce 01       	movw	r24, r28
     b6a:	0e 94 1c 04 	call	0x838	; 0x838 <log_is_data_valid>
     b6e:	89 2b       	or	r24, r25
     b70:	29 f0       	breq	.+10     	; 0xb7c <log_get_num_entries+0x26>
     b72:	21 96       	adiw	r28, 0x01	; 1
     b74:	cf 70       	andi	r28, 0x0F	; 15
     b76:	1f 5f       	subi	r17, 0xFF	; 255
     b78:	0c 13       	cpse	r16, r28
     b7a:	f5 cf       	rjmp	.-22     	; 0xb66 <log_get_num_entries+0x10>
     b7c:	81 2f       	mov	r24, r17
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	08 95       	ret

00000b88 <log_get_record>:
     b88:	af 92       	push	r10
     b8a:	bf 92       	push	r11
     b8c:	cf 92       	push	r12
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	6b 01       	movw	r12, r22
     b9e:	7c 01       	movw	r14, r24
     ba0:	8a 01       	movw	r16, r20
     ba2:	59 01       	movw	r10, r18
     ba4:	0e 94 ab 05 	call	0xb56	; 0xb56 <log_get_num_entries>
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	a0 e0       	ldi	r26, 0x00	; 0
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	c8 16       	cp	r12, r24
     bb0:	d9 06       	cpc	r13, r25
     bb2:	ea 06       	cpc	r14, r26
     bb4:	fb 06       	cpc	r15, r27
     bb6:	f8 f4       	brcc	.+62     	; 0xbf6 <log_get_record+0x6e>
     bb8:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <tail>
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	c8 0e       	add	r12, r24
     bc0:	d9 1e       	adc	r13, r25
     bc2:	8f e0       	ldi	r24, 0x0F	; 15
     bc4:	c8 22       	and	r12, r24
     bc6:	dd 24       	eor	r13, r13
     bc8:	87 e0       	ldi	r24, 0x07	; 7
     bca:	8c 9d       	mul	r24, r12
     bcc:	f0 01       	movw	r30, r0
     bce:	8d 9d       	mul	r24, r13
     bd0:	f0 0d       	add	r31, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	e3 54       	subi	r30, 0x43	; 67
     bd6:	fe 4f       	sbci	r31, 0xFE	; 254
     bd8:	81 81       	ldd	r24, Z+1	; 0x01
     bda:	92 81       	ldd	r25, Z+2	; 0x02
     bdc:	a3 81       	ldd	r26, Z+3	; 0x03
     bde:	b4 81       	ldd	r27, Z+4	; 0x04
     be0:	e8 01       	movw	r28, r16
     be2:	88 83       	st	Y, r24
     be4:	99 83       	std	Y+1, r25	; 0x01
     be6:	aa 83       	std	Y+2, r26	; 0x02
     be8:	bb 83       	std	Y+3, r27	; 0x03
     bea:	85 81       	ldd	r24, Z+5	; 0x05
     bec:	f5 01       	movw	r30, r10
     bee:	80 83       	st	Z, r24
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <log_get_record+0x72>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	bf 90       	pop	r11
     c0c:	af 90       	pop	r10
     c0e:	08 95       	ret

00000c10 <rtc_init>:
     c10:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <timer1_init>

00000c14 <rtc_get_date>:
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	0e 94 9b 09 	call	0x1336	; 0x1336 <timer1_get>
     c1c:	00 91 9d 04 	lds	r16, 0x049D	; 0x80049d <rtc_base>
     c20:	10 91 9e 04 	lds	r17, 0x049E	; 0x80049e <rtc_base+0x1>
     c24:	20 91 9f 04 	lds	r18, 0x049F	; 0x80049f <rtc_base+0x2>
     c28:	30 91 a0 04 	lds	r19, 0x04A0	; 0x8004a0 <rtc_base+0x3>
     c2c:	60 0f       	add	r22, r16
     c2e:	71 1f       	adc	r23, r17
     c30:	82 1f       	adc	r24, r18
     c32:	93 1f       	adc	r25, r19
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	08 95       	ret

00000c3a <is_leapyear>:
     c3a:	9c 01       	movw	r18, r24
     c3c:	60 e9       	ldi	r22, 0x90	; 144
     c3e:	71 e0       	ldi	r23, 0x01	; 1
     c40:	0e 94 df 0c 	call	0x19be	; 0x19be <__udivmodhi4>
     c44:	89 2b       	or	r24, r25
     c46:	79 f0       	breq	.+30     	; 0xc66 <is_leapyear+0x2c>
     c48:	c9 01       	movw	r24, r18
     c4a:	83 70       	andi	r24, 0x03	; 3
     c4c:	99 27       	eor	r25, r25
     c4e:	89 2b       	or	r24, r25
     c50:	61 f4       	brne	.+24     	; 0xc6a <is_leapyear+0x30>
     c52:	c9 01       	movw	r24, r18
     c54:	64 e6       	ldi	r22, 0x64	; 100
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	0e 94 df 0c 	call	0x19be	; 0x19be <__udivmodhi4>
     c5c:	9c 01       	movw	r18, r24
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	23 2b       	or	r18, r19
     c62:	21 f4       	brne	.+8      	; 0xc6c <is_leapyear+0x32>
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <is_leapyear+0x30>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	08 95       	ret
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	08 95       	ret

00000c6e <rtc_set_by_datestr>:
     c6e:	2f 92       	push	r2
     c70:	3f 92       	push	r3
     c72:	4f 92       	push	r4
     c74:	5f 92       	push	r5
     c76:	6f 92       	push	r6
     c78:	7f 92       	push	r7
     c7a:	8f 92       	push	r8
     c7c:	9f 92       	push	r9
     c7e:	af 92       	push	r10
     c80:	bf 92       	push	r11
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	67 97       	sbiw	r28, 0x17	; 23
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	2c e0       	ldi	r18, 0x0C	; 12
     ca4:	ed e8       	ldi	r30, 0x8D	; 141
     ca6:	f1 e0       	ldi	r31, 0x01	; 1
     ca8:	ae 01       	movw	r20, r28
     caa:	4f 5f       	subi	r20, 0xFF	; 255
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	1a 01       	movw	r2, r20
     cb0:	da 01       	movw	r26, r20
     cb2:	01 90       	ld	r0, Z+
     cb4:	0d 92       	st	X+, r0
     cb6:	2a 95       	dec	r18
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <rtc_set_by_datestr+0x44>
     cba:	dc 01       	movw	r26, r24
     cbc:	2c 91       	ld	r18, X
     cbe:	22 0f       	add	r18, r18
     cc0:	20 56       	subi	r18, 0x60	; 96
     cc2:	32 2f       	mov	r19, r18
     cc4:	33 0f       	add	r19, r19
     cc6:	33 0f       	add	r19, r19
     cc8:	23 0f       	add	r18, r19
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	3c 91       	ld	r19, X
     cce:	11 97       	sbiw	r26, 0x01	; 1
     cd0:	31 53       	subi	r19, 0x31	; 49
     cd2:	23 0f       	add	r18, r19
     cd4:	2d 87       	std	Y+13, r18	; 0x0d
     cd6:	13 96       	adiw	r26, 0x03	; 3
     cd8:	2c 91       	ld	r18, X
     cda:	13 97       	sbiw	r26, 0x03	; 3
     cdc:	02 2e       	mov	r0, r18
     cde:	00 0c       	add	r0, r0
     ce0:	33 0b       	sbc	r19, r19
     ce2:	20 53       	subi	r18, 0x30	; 48
     ce4:	31 09       	sbc	r19, r1
     ce6:	6a e0       	ldi	r22, 0x0A	; 10
     ce8:	62 9f       	mul	r22, r18
     cea:	a0 01       	movw	r20, r0
     cec:	63 9f       	mul	r22, r19
     cee:	50 0d       	add	r21, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	14 96       	adiw	r26, 0x04	; 4
     cf4:	cc 90       	ld	r12, X
     cf6:	0c 2c       	mov	r0, r12
     cf8:	00 0c       	add	r0, r0
     cfa:	dd 08       	sbc	r13, r13
     cfc:	b0 e3       	ldi	r27, 0x30	; 48
     cfe:	cb 1a       	sub	r12, r27
     d00:	d1 08       	sbc	r13, r1
     d02:	c4 0e       	add	r12, r20
     d04:	d5 1e       	adc	r13, r21
     d06:	86 01       	movw	r16, r12
     d08:	01 50       	subi	r16, 0x01	; 1
     d0a:	11 09       	sbc	r17, r1
     d0c:	fc 01       	movw	r30, r24
     d0e:	26 81       	ldd	r18, Z+6	; 0x06
     d10:	02 2e       	mov	r0, r18
     d12:	00 0c       	add	r0, r0
     d14:	33 0b       	sbc	r19, r19
     d16:	20 53       	subi	r18, 0x30	; 48
     d18:	31 09       	sbc	r19, r1
     d1a:	e8 ee       	ldi	r30, 0xE8	; 232
     d1c:	f3 e0       	ldi	r31, 0x03	; 3
     d1e:	2e 9f       	mul	r18, r30
     d20:	a0 01       	movw	r20, r0
     d22:	2f 9f       	mul	r18, r31
     d24:	50 0d       	add	r21, r0
     d26:	3e 9f       	mul	r19, r30
     d28:	50 0d       	add	r21, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	dc 01       	movw	r26, r24
     d2e:	17 96       	adiw	r26, 0x07	; 7
     d30:	2c 91       	ld	r18, X
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	02 2e       	mov	r0, r18
     d36:	00 0c       	add	r0, r0
     d38:	33 0b       	sbc	r19, r19
     d3a:	20 53       	subi	r18, 0x30	; 48
     d3c:	31 09       	sbc	r19, r1
     d3e:	74 e6       	ldi	r23, 0x64	; 100
     d40:	72 9f       	mul	r23, r18
     d42:	70 01       	movw	r14, r0
     d44:	73 9f       	mul	r23, r19
     d46:	f0 0c       	add	r15, r0
     d48:	11 24       	eor	r1, r1
     d4a:	e4 0e       	add	r14, r20
     d4c:	f5 1e       	adc	r15, r21
     d4e:	18 96       	adiw	r26, 0x08	; 8
     d50:	4c 91       	ld	r20, X
     d52:	18 97       	sbiw	r26, 0x08	; 8
     d54:	04 2e       	mov	r0, r20
     d56:	00 0c       	add	r0, r0
     d58:	55 0b       	sbc	r21, r21
     d5a:	40 53       	subi	r20, 0x30	; 48
     d5c:	51 09       	sbc	r21, r1
     d5e:	64 9f       	mul	r22, r20
     d60:	90 01       	movw	r18, r0
     d62:	65 9f       	mul	r22, r21
     d64:	30 0d       	add	r19, r0
     d66:	11 24       	eor	r1, r1
     d68:	e2 0e       	add	r14, r18
     d6a:	f3 1e       	adc	r15, r19
     d6c:	19 96       	adiw	r26, 0x09	; 9
     d6e:	2c 91       	ld	r18, X
     d70:	19 97       	sbiw	r26, 0x09	; 9
     d72:	f7 01       	movw	r30, r14
     d74:	e2 0f       	add	r30, r18
     d76:	f1 1d       	adc	r31, r1
     d78:	27 fd       	sbrc	r18, 7
     d7a:	fa 95       	dec	r31
     d7c:	af 01       	movw	r20, r30
     d7e:	58 50       	subi	r21, 0x08	; 8
     d80:	7a 01       	movw	r14, r20
     d82:	1b 96       	adiw	r26, 0x0b	; 11
     d84:	2c 91       	ld	r18, X
     d86:	1b 97       	sbiw	r26, 0x0b	; 11
     d88:	22 0f       	add	r18, r18
     d8a:	20 56       	subi	r18, 0x60	; 96
     d8c:	32 2f       	mov	r19, r18
     d8e:	33 0f       	add	r19, r19
     d90:	33 0f       	add	r19, r19
     d92:	23 0f       	add	r18, r19
     d94:	1c 96       	adiw	r26, 0x0c	; 12
     d96:	3c 91       	ld	r19, X
     d98:	1c 97       	sbiw	r26, 0x0c	; 12
     d9a:	30 53       	subi	r19, 0x30	; 48
     d9c:	23 0f       	add	r18, r19
     d9e:	29 8b       	std	Y+17, r18	; 0x11
     da0:	1e 96       	adiw	r26, 0x0e	; 14
     da2:	2c 91       	ld	r18, X
     da4:	1e 97       	sbiw	r26, 0x0e	; 14
     da6:	22 0f       	add	r18, r18
     da8:	20 56       	subi	r18, 0x60	; 96
     daa:	32 2f       	mov	r19, r18
     dac:	33 0f       	add	r19, r19
     dae:	33 0f       	add	r19, r19
     db0:	23 0f       	add	r18, r19
     db2:	1f 96       	adiw	r26, 0x0f	; 15
     db4:	3c 91       	ld	r19, X
     db6:	1f 97       	sbiw	r26, 0x0f	; 15
     db8:	30 53       	subi	r19, 0x30	; 48
     dba:	23 0f       	add	r18, r19
     dbc:	2a 8b       	std	Y+18, r18	; 0x12
     dbe:	51 96       	adiw	r26, 0x11	; 17
     dc0:	2c 91       	ld	r18, X
     dc2:	51 97       	sbiw	r26, 0x11	; 17
     dc4:	22 0f       	add	r18, r18
     dc6:	20 56       	subi	r18, 0x60	; 96
     dc8:	32 2f       	mov	r19, r18
     dca:	33 0f       	add	r19, r19
     dcc:	33 0f       	add	r19, r19
     dce:	23 0f       	add	r18, r19
     dd0:	52 96       	adiw	r26, 0x12	; 18
     dd2:	8c 91       	ld	r24, X
     dd4:	80 53       	subi	r24, 0x30	; 48
     dd6:	28 0f       	add	r18, r24
     dd8:	2b 8b       	std	Y+19, r18	; 0x13
     dda:	ca 01       	movw	r24, r20
     ddc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <is_leapyear>
     de0:	88 23       	and	r24, r24
     de2:	21 f0       	breq	.+8      	; 0xdec <rtc_set_by_datestr+0x17e>
     de4:	5d 85       	ldd	r21, Y+13	; 0x0d
     de6:	52 30       	cpi	r21, 0x02	; 2
     de8:	08 f0       	brcs	.+2      	; 0xdec <rtc_set_by_datestr+0x17e>
     dea:	86 01       	movw	r16, r12
     dec:	c7 01       	movw	r24, r14
     dee:	60 e9       	ldi	r22, 0x90	; 144
     df0:	71 e0       	ldi	r23, 0x01	; 1
     df2:	0e 94 df 0c 	call	0x19be	; 0x19be <__udivmodhi4>
     df6:	fc 01       	movw	r30, r24
     df8:	db 01       	movw	r26, r22
     dfa:	20 e8       	ldi	r18, 0x80	; 128
     dfc:	39 e5       	ldi	r19, 0x59	; 89
     dfe:	40 e6       	ldi	r20, 0x60	; 96
     e00:	50 ef       	ldi	r21, 0xF0	; 240
     e02:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__muluhisi3>
     e06:	2b 01       	movw	r4, r22
     e08:	3c 01       	movw	r6, r24
     e0a:	cf 01       	movw	r24, r30
     e0c:	64 e6       	ldi	r22, 0x64	; 100
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	0e 94 df 0c 	call	0x19be	; 0x19be <__udivmodhi4>
     e14:	fc 01       	movw	r30, r24
     e16:	db 01       	movw	r26, r22
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	32 ec       	ldi	r19, 0xC2	; 194
     e1c:	47 e1       	ldi	r20, 0x17	; 23
     e1e:	5c eb       	ldi	r21, 0xBC	; 188
     e20:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__muluhisi3>
     e24:	4b 01       	movw	r8, r22
     e26:	5c 01       	movw	r10, r24
     e28:	df 01       	movw	r26, r30
     e2a:	b6 95       	lsr	r27
     e2c:	a7 95       	ror	r26
     e2e:	b6 95       	lsr	r27
     e30:	a7 95       	ror	r26
     e32:	20 e8       	ldi	r18, 0x80	; 128
     e34:	3f e1       	ldi	r19, 0x1F	; 31
     e36:	46 e8       	ldi	r20, 0x86	; 134
     e38:	57 e0       	ldi	r21, 0x07	; 7
     e3a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__muluhisi3>
     e3e:	6b 01       	movw	r12, r22
     e40:	7c 01       	movw	r14, r24
     e42:	df 01       	movw	r26, r30
     e44:	a3 70       	andi	r26, 0x03	; 3
     e46:	bb 27       	eor	r27, r27
     e48:	20 e8       	ldi	r18, 0x80	; 128
     e4a:	33 e3       	ldi	r19, 0x33	; 51
     e4c:	41 ee       	ldi	r20, 0xE1	; 225
     e4e:	51 e0       	ldi	r21, 0x01	; 1
     e50:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__muluhisi3>
     e54:	6c 8b       	std	Y+20, r22	; 0x14
     e56:	7d 8b       	std	Y+21, r23	; 0x15
     e58:	8e 8b       	std	Y+22, r24	; 0x16
     e5a:	9f 8b       	std	Y+23, r25	; 0x17
     e5c:	f1 01       	movw	r30, r2
     e5e:	8e 2f       	mov	r24, r30
     e60:	82 19       	sub	r24, r2
     e62:	9d 85       	ldd	r25, Y+13	; 0x0d
     e64:	89 17       	cp	r24, r25
     e66:	20 f4       	brcc	.+8      	; 0xe70 <rtc_set_by_datestr+0x202>
     e68:	81 91       	ld	r24, Z+
     e6a:	08 0f       	add	r16, r24
     e6c:	11 1d       	adc	r17, r1
     e6e:	f7 cf       	rjmp	.-18     	; 0xe5e <rtc_set_by_datestr+0x1f0>
     e70:	a9 89       	ldd	r26, Y+17	; 0x11
     e72:	2a 2f       	mov	r18, r26
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	a0 e1       	ldi	r26, 0x10	; 16
     e78:	be e0       	ldi	r27, 0x0E	; 14
     e7a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     e7e:	6d 87       	std	Y+13, r22	; 0x0d
     e80:	7e 87       	std	Y+14, r23	; 0x0e
     e82:	8f 87       	std	Y+15, r24	; 0x0f
     e84:	98 8b       	std	Y+16, r25	; 0x10
     e86:	ba 89       	ldd	r27, Y+18	; 0x12
     e88:	2b 2f       	mov	r18, r27
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	ac e3       	ldi	r26, 0x3C	; 60
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     e94:	2d 85       	ldd	r18, Y+13	; 0x0d
     e96:	3e 85       	ldd	r19, Y+14	; 0x0e
     e98:	4f 85       	ldd	r20, Y+15	; 0x0f
     e9a:	58 89       	ldd	r21, Y+16	; 0x10
     e9c:	26 0f       	add	r18, r22
     e9e:	37 1f       	adc	r19, r23
     ea0:	48 1f       	adc	r20, r24
     ea2:	59 1f       	adc	r21, r25
     ea4:	da 01       	movw	r26, r20
     ea6:	c9 01       	movw	r24, r18
     ea8:	3b 89       	ldd	r19, Y+19	; 0x13
     eaa:	83 0f       	add	r24, r19
     eac:	91 1d       	adc	r25, r1
     eae:	a1 1d       	adc	r26, r1
     eb0:	b1 1d       	adc	r27, r1
     eb2:	48 0e       	add	r4, r24
     eb4:	59 1e       	adc	r5, r25
     eb6:	6a 1e       	adc	r6, r26
     eb8:	7b 1e       	adc	r7, r27
     eba:	84 0c       	add	r8, r4
     ebc:	95 1c       	adc	r9, r5
     ebe:	a6 1c       	adc	r10, r6
     ec0:	b7 1c       	adc	r11, r7
     ec2:	c8 0c       	add	r12, r8
     ec4:	d9 1c       	adc	r13, r9
     ec6:	ea 1c       	adc	r14, r10
     ec8:	fb 1c       	adc	r15, r11
     eca:	8c 89       	ldd	r24, Y+20	; 0x14
     ecc:	9d 89       	ldd	r25, Y+21	; 0x15
     ece:	ae 89       	ldd	r26, Y+22	; 0x16
     ed0:	bf 89       	ldd	r27, Y+23	; 0x17
     ed2:	c8 0e       	add	r12, r24
     ed4:	d9 1e       	adc	r13, r25
     ed6:	ea 1e       	adc	r14, r26
     ed8:	fb 1e       	adc	r15, r27
     eda:	d8 01       	movw	r26, r16
     edc:	20 e8       	ldi	r18, 0x80	; 128
     ede:	31 e5       	ldi	r19, 0x51	; 81
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__muluhisi3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	8c 0d       	add	r24, r12
     eee:	9d 1d       	adc	r25, r13
     ef0:	ae 1d       	adc	r26, r14
     ef2:	bf 1d       	adc	r27, r15
     ef4:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <rtc_base>
     ef8:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <rtc_base+0x1>
     efc:	a0 93 9f 04 	sts	0x049F, r26	; 0x80049f <rtc_base+0x2>
     f00:	b0 93 a0 04 	sts	0x04A0, r27	; 0x8004a0 <rtc_base+0x3>
     f04:	67 96       	adiw	r28, 0x17	; 23
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	df 90       	pop	r13
     f1e:	cf 90       	pop	r12
     f20:	bf 90       	pop	r11
     f22:	af 90       	pop	r10
     f24:	9f 90       	pop	r9
     f26:	8f 90       	pop	r8
     f28:	7f 90       	pop	r7
     f2a:	6f 90       	pop	r6
     f2c:	5f 90       	pop	r5
     f2e:	4f 90       	pop	r4
     f30:	3f 90       	pop	r3
     f32:	2f 90       	pop	r2
     f34:	0c 94 a7 09 	jmp	0x134e	; 0x134e <timer1_clear>

00000f38 <get_month>:
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	68 97       	sbiw	r28, 0x18	; 24
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	7b 01       	movw	r14, r22
     f56:	2c e0       	ldi	r18, 0x0C	; 12
     f58:	ed e8       	ldi	r30, 0x8D	; 141
     f5a:	f1 e0       	ldi	r31, 0x01	; 1
     f5c:	de 01       	movw	r26, r28
     f5e:	1d 96       	adiw	r26, 0x0d	; 13
     f60:	01 90       	ld	r0, Z+
     f62:	0d 92       	st	X+, r0
     f64:	2a 95       	dec	r18
     f66:	e1 f7       	brne	.-8      	; 0xf60 <get_month+0x28>
     f68:	8e 01       	movw	r16, r28
     f6a:	0f 5f       	subi	r16, 0xFF	; 255
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	2c e0       	ldi	r18, 0x0C	; 12
     f70:	f8 01       	movw	r30, r16
     f72:	11 92       	st	Z+, r1
     f74:	2a 95       	dec	r18
     f76:	e9 f7       	brne	.-6      	; 0xf72 <get_month+0x3a>
     f78:	0e 94 1d 06 	call	0xc3a	; 0xc3a <is_leapyear>
     f7c:	8a 83       	std	Y+2, r24	; 0x02
     f7e:	de 01       	movw	r26, r28
     f80:	1d 96       	adiw	r26, 0x0d	; 13
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	f7 01       	movw	r30, r14
     f86:	40 81       	ld	r20, Z
     f88:	51 81       	ldd	r21, Z+1	; 0x01
     f8a:	9d 91       	ld	r25, X+
     f8c:	f8 01       	movw	r30, r16
     f8e:	21 91       	ld	r18, Z+
     f90:	8f 01       	movw	r16, r30
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	29 0f       	add	r18, r25
     f96:	31 1d       	adc	r19, r1
     f98:	42 17       	cp	r20, r18
     f9a:	53 07       	cpc	r21, r19
     f9c:	40 f0       	brcs	.+16     	; 0xfae <get_month+0x76>
     f9e:	42 1b       	sub	r20, r18
     fa0:	53 0b       	sbc	r21, r19
     fa2:	f7 01       	movw	r30, r14
     fa4:	51 83       	std	Z+1, r21	; 0x01
     fa6:	40 83       	st	Z, r20
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	8c 30       	cpi	r24, 0x0C	; 12
     fac:	59 f7       	brne	.-42     	; 0xf84 <get_month+0x4c>
     fae:	68 96       	adiw	r28, 0x18	; 24
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	08 95       	ret

00000fc8 <rtc_num2datestr>:
     fc8:	4f 92       	push	r4
     fca:	5f 92       	push	r5
     fcc:	6f 92       	push	r6
     fce:	7f 92       	push	r7
     fd0:	8f 92       	push	r8
     fd2:	9f 92       	push	r9
     fd4:	af 92       	push	r10
     fd6:	bf 92       	push	r11
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <rtc_num2datestr+0x1e>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	2b 01       	movw	r4, r22
     fec:	3c 01       	movw	r6, r24
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	20 e8       	ldi	r18, 0x80	; 128
     ff8:	42 16       	cp	r4, r18
     ffa:	29 e5       	ldi	r18, 0x59	; 89
     ffc:	52 06       	cpc	r5, r18
     ffe:	20 e6       	ldi	r18, 0x60	; 96
    1000:	62 06       	cpc	r6, r18
    1002:	20 ef       	ldi	r18, 0xF0	; 240
    1004:	72 06       	cpc	r7, r18
    1006:	18 f4       	brcc	.+6      	; 0x100e <rtc_num2datestr+0x46>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	dc 01       	movw	r26, r24
    100e:	20 e9       	ldi	r18, 0x90	; 144
    1010:	31 e0       	ldi	r19, 0x01	; 1
    1012:	82 9f       	mul	r24, r18
    1014:	50 01       	movw	r10, r0
    1016:	83 9f       	mul	r24, r19
    1018:	b0 0c       	add	r11, r0
    101a:	92 9f       	mul	r25, r18
    101c:	b0 0c       	add	r11, r0
    101e:	11 24       	eor	r1, r1
    1020:	80 e3       	ldi	r24, 0x30	; 48
    1022:	a8 1a       	sub	r10, r24
    1024:	88 ef       	ldi	r24, 0xF8	; 248
    1026:	b8 0a       	sbc	r11, r24
    1028:	c1 2c       	mov	r12, r1
    102a:	d1 2c       	mov	r13, r1
    102c:	76 01       	movw	r14, r12
    102e:	c3 94       	inc	r12
    1030:	20 e8       	ldi	r18, 0x80	; 128
    1032:	42 16       	cp	r4, r18
    1034:	29 e5       	ldi	r18, 0x59	; 89
    1036:	52 06       	cpc	r5, r18
    1038:	20 e6       	ldi	r18, 0x60	; 96
    103a:	62 06       	cpc	r6, r18
    103c:	20 ef       	ldi	r18, 0xF0	; 240
    103e:	72 06       	cpc	r7, r18
    1040:	18 f4       	brcc	.+6      	; 0x1048 <rtc_num2datestr+0x80>
    1042:	c1 2c       	mov	r12, r1
    1044:	d1 2c       	mov	r13, r1
    1046:	76 01       	movw	r14, r12
    1048:	a7 01       	movw	r20, r14
    104a:	96 01       	movw	r18, r12
    104c:	60 e8       	ldi	r22, 0x80	; 128
    104e:	79 e5       	ldi	r23, 0x59	; 89
    1050:	80 e6       	ldi	r24, 0x60	; 96
    1052:	90 ef       	ldi	r25, 0xF0	; 240
    1054:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsi3>
    1058:	73 01       	movw	r14, r6
    105a:	62 01       	movw	r12, r4
    105c:	c6 1a       	sub	r12, r22
    105e:	d7 0a       	sbc	r13, r23
    1060:	e8 0a       	sbc	r14, r24
    1062:	f9 0a       	sbc	r15, r25
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	c1 14       	cp	r12, r1
    106e:	22 ec       	ldi	r18, 0xC2	; 194
    1070:	d2 06       	cpc	r13, r18
    1072:	27 e1       	ldi	r18, 0x17	; 23
    1074:	e2 06       	cpc	r14, r18
    1076:	2c eb       	ldi	r18, 0xBC	; 188
    1078:	f2 06       	cpc	r15, r18
    107a:	18 f4       	brcc	.+6      	; 0x1082 <rtc_num2datestr+0xba>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	dc 01       	movw	r26, r24
    1082:	44 e6       	ldi	r20, 0x64	; 100
    1084:	48 9f       	mul	r20, r24
    1086:	90 01       	movw	r18, r0
    1088:	49 9f       	mul	r20, r25
    108a:	30 0d       	add	r19, r0
    108c:	11 24       	eor	r1, r1
    108e:	a2 0e       	add	r10, r18
    1090:	b3 1e       	adc	r11, r19
    1092:	21 e0       	ldi	r18, 0x01	; 1
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	c1 14       	cp	r12, r1
    109c:	82 ec       	ldi	r24, 0xC2	; 194
    109e:	d8 06       	cpc	r13, r24
    10a0:	87 e1       	ldi	r24, 0x17	; 23
    10a2:	e8 06       	cpc	r14, r24
    10a4:	8c eb       	ldi	r24, 0xBC	; 188
    10a6:	f8 06       	cpc	r15, r24
    10a8:	18 f4       	brcc	.+6      	; 0x10b0 <rtc_num2datestr+0xe8>
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	72 ec       	ldi	r23, 0xC2	; 194
    10b4:	87 e1       	ldi	r24, 0x17	; 23
    10b6:	9c eb       	ldi	r25, 0xBC	; 188
    10b8:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsi3>
    10bc:	a7 01       	movw	r20, r14
    10be:	96 01       	movw	r18, r12
    10c0:	26 1b       	sub	r18, r22
    10c2:	37 0b       	sbc	r19, r23
    10c4:	48 0b       	sbc	r20, r24
    10c6:	59 0b       	sbc	r21, r25
    10c8:	ca 01       	movw	r24, r20
    10ca:	b9 01       	movw	r22, r18
    10cc:	20 e8       	ldi	r18, 0x80	; 128
    10ce:	3f e1       	ldi	r19, 0x1F	; 31
    10d0:	46 e8       	ldi	r20, 0x86	; 134
    10d2:	57 e0       	ldi	r21, 0x07	; 7
    10d4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
    10d8:	22 0f       	add	r18, r18
    10da:	33 1f       	adc	r19, r19
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	a2 0e       	add	r10, r18
    10e2:	b3 1e       	adc	r11, r19
    10e4:	20 e8       	ldi	r18, 0x80	; 128
    10e6:	33 e3       	ldi	r19, 0x33	; 51
    10e8:	41 ee       	ldi	r20, 0xE1	; 225
    10ea:	51 e0       	ldi	r21, 0x01	; 1
    10ec:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
    10f0:	75 01       	movw	r14, r10
    10f2:	e2 0e       	add	r14, r18
    10f4:	f3 1e       	adc	r15, r19
    10f6:	20 e8       	ldi	r18, 0x80	; 128
    10f8:	31 e5       	ldi	r19, 0x51	; 81
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
    1102:	4b 01       	movw	r8, r22
    1104:	5c 01       	movw	r10, r24
    1106:	3a 83       	std	Y+2, r19	; 0x02
    1108:	29 83       	std	Y+1, r18	; 0x01
    110a:	be 01       	movw	r22, r28
    110c:	6f 5f       	subi	r22, 0xFF	; 255
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	c7 01       	movw	r24, r14
    1112:	0e 94 9c 07 	call	0xf38	; 0xf38 <get_month>
    1116:	d8 2e       	mov	r13, r24
    1118:	c5 01       	movw	r24, r10
    111a:	b4 01       	movw	r22, r8
    111c:	20 e1       	ldi	r18, 0x10	; 16
    111e:	3e e0       	ldi	r19, 0x0E	; 14
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
    1128:	29 01       	movw	r4, r18
    112a:	3a 01       	movw	r6, r20
    112c:	4b 01       	movw	r8, r22
    112e:	5c 01       	movw	r10, r24
    1130:	69 e9       	ldi	r22, 0x99	; 153
    1132:	71 e0       	ldi	r23, 0x01	; 1
    1134:	89 e4       	ldi	r24, 0x49	; 73
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <str_cpy>
    113c:	6d 2d       	mov	r22, r13
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	6f 5f       	subi	r22, 0xFF	; 255
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	42 e0       	ldi	r20, 0x02	; 2
    1146:	89 e4       	ldi	r24, 0x49	; 73
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 05 09 	call	0x120a	; 0x120a <str_writeudec16>
    114e:	69 81       	ldd	r22, Y+1	; 0x01
    1150:	7a 81       	ldd	r23, Y+2	; 0x02
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	42 e0       	ldi	r20, 0x02	; 2
    1158:	8c e4       	ldi	r24, 0x4C	; 76
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 05 09 	call	0x120a	; 0x120a <str_writeudec16>
    1160:	44 e0       	ldi	r20, 0x04	; 4
    1162:	b7 01       	movw	r22, r14
    1164:	8f e4       	ldi	r24, 0x4F	; 79
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	0e 94 05 09 	call	0x120a	; 0x120a <str_writeudec16>
    116c:	42 e0       	ldi	r20, 0x02	; 2
    116e:	b2 01       	movw	r22, r4
    1170:	84 e5       	ldi	r24, 0x54	; 84
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 05 09 	call	0x120a	; 0x120a <str_writeudec16>
    1178:	c5 01       	movw	r24, r10
    117a:	b4 01       	movw	r22, r8
    117c:	2c e3       	ldi	r18, 0x3C	; 60
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
    1188:	49 01       	movw	r8, r18
    118a:	5a 01       	movw	r10, r20
    118c:	6b 01       	movw	r12, r22
    118e:	7c 01       	movw	r14, r24
    1190:	42 e0       	ldi	r20, 0x02	; 2
    1192:	b4 01       	movw	r22, r8
    1194:	87 e5       	ldi	r24, 0x57	; 87
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	0e 94 05 09 	call	0x120a	; 0x120a <str_writeudec16>
    119c:	42 e0       	ldi	r20, 0x02	; 2
    119e:	b6 01       	movw	r22, r12
    11a0:	8a e5       	ldi	r24, 0x5A	; 90
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 05 09 	call	0x120a	; 0x120a <str_writeudec16>
    11a8:	89 e4       	ldi	r24, 0x49	; 73
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	bf 90       	pop	r11
    11be:	af 90       	pop	r10
    11c0:	9f 90       	pop	r9
    11c2:	8f 90       	pop	r8
    11c4:	7f 90       	pop	r7
    11c6:	6f 90       	pop	r6
    11c8:	5f 90       	pop	r5
    11ca:	4f 90       	pop	r4
    11cc:	08 95       	ret

000011ce <rtc_get_date_string>:
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	0e 94 9b 09 	call	0x1336	; 0x1336 <timer1_get>
    11d6:	00 91 9d 04 	lds	r16, 0x049D	; 0x80049d <rtc_base>
    11da:	10 91 9e 04 	lds	r17, 0x049E	; 0x80049e <rtc_base+0x1>
    11de:	20 91 9f 04 	lds	r18, 0x049F	; 0x80049f <rtc_base+0x2>
    11e2:	30 91 a0 04 	lds	r19, 0x04A0	; 0x8004a0 <rtc_base+0x3>
    11e6:	60 0f       	add	r22, r16
    11e8:	71 1f       	adc	r23, r17
    11ea:	82 1f       	adc	r24, r18
    11ec:	93 1f       	adc	r25, r19
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <rtc_num2datestr>

000011f6 <str_cpy>:
    11f6:	fc 01       	movw	r30, r24
    11f8:	db 01       	movw	r26, r22
    11fa:	8d 91       	ld	r24, X+
    11fc:	bd 01       	movw	r22, r26
    11fe:	88 23       	and	r24, r24
    1200:	11 f0       	breq	.+4      	; 0x1206 <str_cpy+0x10>
    1202:	81 93       	st	Z+, r24
    1204:	f9 cf       	rjmp	.-14     	; 0x11f8 <str_cpy+0x2>
    1206:	10 82       	st	Z, r1
    1208:	08 95       	ret

0000120a <str_writeudec16>:
    120a:	9f 92       	push	r9
    120c:	af 92       	push	r10
    120e:	bf 92       	push	r11
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	00 d0       	rcall	.+0      	; 0x1222 <str_writeudec16+0x18>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <str_writeudec16+0x1a>
    1224:	1f 92       	push	r1
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	fc 01       	movw	r30, r24
    122c:	6b 01       	movw	r12, r22
    122e:	9e 01       	movw	r18, r28
    1230:	2f 5f       	subi	r18, 0xFF	; 255
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	8e 01       	movw	r16, r28
    1236:	0a 5f       	subi	r16, 0xFA	; 250
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	ee 24       	eor	r14, r14
    123c:	e3 94       	inc	r14
    123e:	f1 2c       	mov	r15, r1
    1240:	9a e0       	ldi	r25, 0x0A	; 10
    1242:	99 2e       	mov	r9, r25
    1244:	9e 9c       	mul	r9, r14
    1246:	50 01       	movw	r10, r0
    1248:	9f 9c       	mul	r9, r15
    124a:	b0 0c       	add	r11, r0
    124c:	11 24       	eor	r1, r1
    124e:	c6 01       	movw	r24, r12
    1250:	b5 01       	movw	r22, r10
    1252:	0e 94 df 0c 	call	0x19be	; 0x19be <__udivmodhi4>
    1256:	b7 01       	movw	r22, r14
    1258:	0e 94 df 0c 	call	0x19be	; 0x19be <__udivmodhi4>
    125c:	d9 01       	movw	r26, r18
    125e:	6d 93       	st	X+, r22
    1260:	9d 01       	movw	r18, r26
    1262:	c6 1a       	sub	r12, r22
    1264:	d1 08       	sbc	r13, r1
    1266:	67 fd       	sbrc	r22, 7
    1268:	d3 94       	inc	r13
    126a:	75 01       	movw	r14, r10
    126c:	a0 17       	cp	r26, r16
    126e:	b1 07       	cpc	r27, r17
    1270:	49 f7       	brne	.-46     	; 0x1244 <str_writeudec16+0x3a>
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	84 e0       	ldi	r24, 0x04	; 4
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	d8 01       	movw	r26, r16
    127e:	2e 91       	ld	r18, -X
    1280:	8d 01       	movw	r16, r26
    1282:	21 11       	cpse	r18, r1
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <str_writeudec16+0x86>
    1286:	61 15       	cp	r22, r1
    1288:	71 05       	cpc	r23, r1
    128a:	11 f4       	brne	.+4      	; 0x1290 <str_writeudec16+0x86>
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	41 f4       	brne	.+16     	; 0x12a0 <str_writeudec16+0x96>
    1290:	84 17       	cp	r24, r20
    1292:	95 07       	cpc	r25, r21
    1294:	2c f4       	brge	.+10     	; 0x12a0 <str_writeudec16+0x96>
    1296:	20 5d       	subi	r18, 0xD0	; 208
    1298:	21 93       	st	Z+, r18
    129a:	61 e0       	ldi	r22, 0x01	; 1
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <str_writeudec16+0x9e>
    12a0:	84 17       	cp	r24, r20
    12a2:	95 07       	cpc	r25, r21
    12a4:	0c f4       	brge	.+2      	; 0x12a8 <str_writeudec16+0x9e>
    12a6:	31 96       	adiw	r30, 0x01	; 1
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	40 f7       	brcc	.-48     	; 0x127c <str_writeudec16+0x72>
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	08 95       	ret

000012ce <__vector_11>:
    12ce:	1f 92       	push	r1
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	11 24       	eor	r1, r1
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	af 93       	push	r26
    12de:	bf 93       	push	r27
    12e0:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <timer1_count>
    12e4:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <timer1_count+0x1>
    12e8:	a0 91 3f 02 	lds	r26, 0x023F	; 0x80023f <timer1_count+0x2>
    12ec:	b0 91 40 02 	lds	r27, 0x0240	; 0x800240 <timer1_count+0x3>
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	a1 1d       	adc	r26, r1
    12f4:	b1 1d       	adc	r27, r1
    12f6:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <timer1_count>
    12fa:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <timer1_count+0x1>
    12fe:	a0 93 3f 02 	sts	0x023F, r26	; 0x80023f <timer1_count+0x2>
    1302:	b0 93 40 02 	sts	0x0240, r27	; 0x800240 <timer1_count+0x3>
    1306:	bf 91       	pop	r27
    1308:	af 91       	pop	r26
    130a:	9f 91       	pop	r25
    130c:	8f 91       	pop	r24
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <timer1_init>:
    1318:	83 e2       	ldi	r24, 0x23	; 35
    131a:	94 ef       	ldi	r25, 0xF4	; 244
    131c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1320:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1324:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1328:	8c e0       	ldi	r24, 0x0C	; 12
    132a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1334:	08 95       	ret

00001336 <timer1_get>:
    1336:	2f b7       	in	r18, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <timer1_count>
    133e:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <timer1_count+0x1>
    1342:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <timer1_count+0x2>
    1346:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <timer1_count+0x3>
    134a:	2f bf       	out	0x3f, r18	; 63
    134c:	08 95       	ret

0000134e <timer1_clear>:
    134e:	8f b7       	in	r24, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <timer1_count>
    1356:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <timer1_count+0x1>
    135a:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <timer1_count+0x2>
    135e:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <timer1_count+0x3>
    1362:	8f bf       	out	0x3f, r24	; 63
    1364:	08 95       	ret

00001366 <uart_init>:
    1366:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <serial_init>
    136a:	78 94       	sei
    136c:	08 95       	ret

0000136e <uart_writechar>:
    136e:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <serial_writechar>

00001372 <uart_writestr>:
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	ec 01       	movw	r28, r24
    1378:	89 91       	ld	r24, Y+
    137a:	88 23       	and	r24, r24
    137c:	19 f0       	breq	.+6      	; 0x1384 <uart_writestr+0x12>
    137e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <serial_writechar>
    1382:	fa cf       	rjmp	.-12     	; 0x1378 <uart_writestr+0x6>
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <uart_writehex8>:
    138a:	cf 93       	push	r28
    138c:	c8 2f       	mov	r28, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	24 e0       	ldi	r18, 0x04	; 4
    1392:	95 95       	asr	r25
    1394:	87 95       	ror	r24
    1396:	2a 95       	dec	r18
    1398:	e1 f7       	brne	.-8      	; 0x1392 <uart_writehex8+0x8>
    139a:	8a 30       	cpi	r24, 0x0A	; 10
    139c:	10 f4       	brcc	.+4      	; 0x13a2 <uart_writehex8+0x18>
    139e:	80 5d       	subi	r24, 0xD0	; 208
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <uart_writehex8+0x1a>
    13a2:	89 5c       	subi	r24, 0xC9	; 201
    13a4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <serial_writechar>
    13a8:	8c 2f       	mov	r24, r28
    13aa:	8f 70       	andi	r24, 0x0F	; 15
    13ac:	8a 30       	cpi	r24, 0x0A	; 10
    13ae:	10 f0       	brcs	.+4      	; 0x13b4 <uart_writehex8+0x2a>
    13b0:	89 5c       	subi	r24, 0xC9	; 201
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <uart_writehex8+0x2c>
    13b4:	80 5d       	subi	r24, 0xD0	; 208
    13b6:	cf 91       	pop	r28
    13b8:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <serial_writechar>

000013bc <uart_writehex16>:
    13bc:	cf 93       	push	r28
    13be:	c8 2f       	mov	r28, r24
    13c0:	89 2f       	mov	r24, r25
    13c2:	0e 94 c5 09 	call	0x138a	; 0x138a <uart_writehex8>
    13c6:	8c 2f       	mov	r24, r28
    13c8:	cf 91       	pop	r28
    13ca:	0c 94 c5 09 	jmp	0x138a	; 0x138a <uart_writehex8>

000013ce <uart_writedec32>:
    13ce:	2f 92       	push	r2
    13d0:	3f 92       	push	r3
    13d2:	4f 92       	push	r4
    13d4:	5f 92       	push	r5
    13d6:	6f 92       	push	r6
    13d8:	7f 92       	push	r7
    13da:	8f 92       	push	r8
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	63 97       	sbiw	r28, 0x13	; 19
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	6b 01       	movw	r12, r22
    1404:	7c 01       	movw	r14, r24
    1406:	97 ff       	sbrs	r25, 7
    1408:	0d c0       	rjmp	.+26     	; 0x1424 <uart_writedec32+0x56>
    140a:	f0 94       	com	r15
    140c:	e0 94       	com	r14
    140e:	d0 94       	com	r13
    1410:	c0 94       	com	r12
    1412:	c1 1c       	adc	r12, r1
    1414:	d1 1c       	adc	r13, r1
    1416:	e1 1c       	adc	r14, r1
    1418:	f1 1c       	adc	r15, r1
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9b 8b       	std	Y+19, r25	; 0x13
    1420:	8a 8b       	std	Y+18, r24	; 0x12
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <uart_writedec32+0x5a>
    1424:	1b 8a       	std	Y+19, r1	; 0x13
    1426:	1a 8a       	std	Y+18, r1	; 0x12
    1428:	fe 01       	movw	r30, r28
    142a:	31 96       	adiw	r30, 0x01	; 1
    142c:	5f 01       	movw	r10, r30
    142e:	8e 01       	movw	r16, r28
    1430:	05 5f       	subi	r16, 0xF5	; 245
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	f9 8b       	std	Y+17, r31	; 0x11
    1436:	e8 8b       	std	Y+16, r30	; 0x10
    1438:	66 24       	eor	r6, r6
    143a:	63 94       	inc	r6
    143c:	71 2c       	mov	r7, r1
    143e:	81 2c       	mov	r8, r1
    1440:	91 2c       	mov	r9, r1
    1442:	aa e0       	ldi	r26, 0x0A	; 10
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	93 01       	movw	r18, r6
    1448:	a4 01       	movw	r20, r8
    144a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__muluhisi3>
    144e:	1b 01       	movw	r2, r22
    1450:	2c 01       	movw	r4, r24
    1452:	c7 01       	movw	r24, r14
    1454:	b6 01       	movw	r22, r12
    1456:	91 01       	movw	r18, r2
    1458:	a2 01       	movw	r20, r4
    145a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__divmodsi4>
    145e:	93 01       	movw	r18, r6
    1460:	a4 01       	movw	r20, r8
    1462:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__divmodsi4>
    1466:	e8 89       	ldd	r30, Y+16	; 0x10
    1468:	f9 89       	ldd	r31, Y+17	; 0x11
    146a:	21 93       	st	Z+, r18
    146c:	f9 8b       	std	Y+17, r31	; 0x11
    146e:	e8 8b       	std	Y+16, r30	; 0x10
    1470:	82 2f       	mov	r24, r18
    1472:	22 0f       	add	r18, r18
    1474:	99 0b       	sbc	r25, r25
    1476:	aa 0b       	sbc	r26, r26
    1478:	bb 0b       	sbc	r27, r27
    147a:	c8 1a       	sub	r12, r24
    147c:	d9 0a       	sbc	r13, r25
    147e:	ea 0a       	sbc	r14, r26
    1480:	fb 0a       	sbc	r15, r27
    1482:	31 01       	movw	r6, r2
    1484:	42 01       	movw	r8, r4
    1486:	0e 17       	cp	r16, r30
    1488:	1f 07       	cpc	r17, r31
    148a:	d9 f6       	brne	.-74     	; 0x1442 <uart_writedec32+0x74>
    148c:	8a 89       	ldd	r24, Y+18	; 0x12
    148e:	9b 89       	ldd	r25, Y+19	; 0x13
    1490:	89 2b       	or	r24, r25
    1492:	11 f0       	breq	.+4      	; 0x1498 <uart_writedec32+0xca>
    1494:	8d e2       	ldi	r24, 0x2D	; 45
    1496:	01 c0       	rjmp	.+2      	; 0x149a <uart_writedec32+0xcc>
    1498:	80 e2       	ldi	r24, 0x20	; 32
    149a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <serial_writechar>
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	f8 01       	movw	r30, r16
    14a4:	82 91       	ld	r24, -Z
    14a6:	8f 01       	movw	r16, r30
    14a8:	81 11       	cpse	r24, r1
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <uart_writedec32+0xea>
    14ac:	21 15       	cp	r18, r1
    14ae:	31 05       	cpc	r19, r1
    14b0:	19 f4       	brne	.+6      	; 0x14b8 <uart_writedec32+0xea>
    14b2:	ea 15       	cp	r30, r10
    14b4:	fb 05       	cpc	r31, r11
    14b6:	29 f4       	brne	.+10     	; 0x14c2 <uart_writedec32+0xf4>
    14b8:	80 5d       	subi	r24, 0xD0	; 208
    14ba:	0e 94 75 0c 	call	0x18ea	; 0x18ea <serial_writechar>
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	0a 15       	cp	r16, r10
    14c4:	1b 05       	cpc	r17, r11
    14c6:	69 f7       	brne	.-38     	; 0x14a2 <uart_writedec32+0xd4>
    14c8:	63 96       	adiw	r28, 0x13	; 19
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	bf 90       	pop	r11
    14e6:	af 90       	pop	r10
    14e8:	9f 90       	pop	r9
    14ea:	8f 90       	pop	r8
    14ec:	7f 90       	pop	r7
    14ee:	6f 90       	pop	r6
    14f0:	5f 90       	pop	r5
    14f2:	4f 90       	pop	r4
    14f4:	3f 90       	pop	r3
    14f6:	2f 90       	pop	r2
    14f8:	08 95       	ret

000014fa <dump_eeprom>:
    14fa:	2f 92       	push	r2
    14fc:	3f 92       	push	r3
    14fe:	4f 92       	push	r4
    1500:	5f 92       	push	r5
    1502:	6f 92       	push	r6
    1504:	7f 92       	push	r7
    1506:	8f 92       	push	r8
    1508:	9f 92       	push	r9
    150a:	af 92       	push	r10
    150c:	bf 92       	push	r11
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	64 97       	sbiw	r28, 0x14	; 20
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	8c 01       	movw	r16, r24
    1530:	61 15       	cp	r22, r1
    1532:	71 05       	cpc	r23, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <dump_eeprom+0x3e>
    1536:	92 c0       	rjmp	.+292    	; 0x165c <dump_eeprom+0x162>
    1538:	81 2c       	mov	r8, r1
    153a:	91 2c       	mov	r9, r1
    153c:	54 01       	movw	r10, r8
    153e:	cb 01       	movw	r24, r22
    1540:	a0 e0       	ldi	r26, 0x00	; 0
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	89 8b       	std	Y+17, r24	; 0x11
    1546:	9a 8b       	std	Y+18, r25	; 0x12
    1548:	ab 8b       	std	Y+19, r26	; 0x13
    154a:	bc 8b       	std	Y+20, r27	; 0x14
    154c:	de 01       	movw	r26, r28
    154e:	11 96       	adiw	r26, 0x01	; 1
    1550:	1d 01       	movw	r2, r26
    1552:	89 89       	ldd	r24, Y+17	; 0x11
    1554:	9a 89       	ldd	r25, Y+18	; 0x12
    1556:	ab 89       	ldd	r26, Y+19	; 0x13
    1558:	bc 89       	ldd	r27, Y+20	; 0x14
    155a:	88 16       	cp	r8, r24
    155c:	99 06       	cpc	r9, r25
    155e:	aa 06       	cpc	r10, r26
    1560:	bb 06       	cpc	r11, r27
    1562:	08 f0       	brcs	.+2      	; 0x1566 <dump_eeprom+0x6c>
    1564:	7b c0       	rjmp	.+246    	; 0x165c <dump_eeprom+0x162>
    1566:	81 2f       	mov	r24, r17
    1568:	0e 94 c5 09 	call	0x138a	; 0x138a <uart_writehex8>
    156c:	80 2f       	mov	r24, r16
    156e:	80 7f       	andi	r24, 0xF0	; 240
    1570:	0e 94 c5 09 	call	0x138a	; 0x138a <uart_writehex8>
    1574:	80 e2       	ldi	r24, 0x20	; 32
    1576:	0e 94 b7 09 	call	0x136e	; 0x136e <uart_writechar>
    157a:	61 01       	movw	r12, r2
    157c:	78 01       	movw	r14, r16
    157e:	41 2c       	mov	r4, r1
    1580:	51 2c       	mov	r5, r1
    1582:	32 01       	movw	r6, r4
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	b6 01       	movw	r22, r12
    1588:	c7 01       	movw	r24, r14
    158a:	0e 94 3b 01 	call	0x276	; 0x276 <eeprom_readbuf>
    158e:	bf ef       	ldi	r27, 0xFF	; 255
    1590:	eb 1a       	sub	r14, r27
    1592:	fb 0a       	sbc	r15, r27
    1594:	ef ef       	ldi	r30, 0xFF	; 255
    1596:	4e 1a       	sub	r4, r30
    1598:	5e 0a       	sbc	r5, r30
    159a:	6e 0a       	sbc	r6, r30
    159c:	7e 0a       	sbc	r7, r30
    159e:	ff ef       	ldi	r31, 0xFF	; 255
    15a0:	8f 1a       	sub	r8, r31
    15a2:	9f 0a       	sbc	r9, r31
    15a4:	af 0a       	sbc	r10, r31
    15a6:	bf 0a       	sbc	r11, r31
    15a8:	89 89       	ldd	r24, Y+17	; 0x11
    15aa:	9a 89       	ldd	r25, Y+18	; 0x12
    15ac:	ab 89       	ldd	r26, Y+19	; 0x13
    15ae:	bc 89       	ldd	r27, Y+20	; 0x14
    15b0:	88 16       	cp	r8, r24
    15b2:	99 06       	cpc	r9, r25
    15b4:	aa 06       	cpc	r10, r26
    15b6:	bb 06       	cpc	r11, r27
    15b8:	50 f0       	brcs	.+20     	; 0x15ce <dump_eeprom+0xd4>
    15ba:	68 01       	movw	r12, r16
    15bc:	9f e0       	ldi	r25, 0x0F	; 15
    15be:	c9 22       	and	r12, r25
    15c0:	dd 24       	eor	r13, r13
    15c2:	00 e0       	ldi	r16, 0x00	; 0
    15c4:	10 e0       	ldi	r17, 0x00	; 0
    15c6:	32 01       	movw	r6, r4
    15c8:	6c 0c       	add	r6, r12
    15ca:	7d 1c       	adc	r7, r13
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <dump_eeprom+0xe6>
    15ce:	af ef       	ldi	r26, 0xFF	; 255
    15d0:	ca 1a       	sub	r12, r26
    15d2:	da 0a       	sbc	r13, r26
    15d4:	c7 01       	movw	r24, r14
    15d6:	8f 70       	andi	r24, 0x0F	; 15
    15d8:	99 27       	eor	r25, r25
    15da:	89 2b       	or	r24, r25
    15dc:	99 f6       	brne	.-90     	; 0x1584 <dump_eeprom+0x8a>
    15de:	ed cf       	rjmp	.-38     	; 0x15ba <dump_eeprom+0xc0>
    15e0:	0c 15       	cp	r16, r12
    15e2:	1d 05       	cpc	r17, r13
    15e4:	18 f0       	brcs	.+6      	; 0x15ec <dump_eeprom+0xf2>
    15e6:	06 15       	cp	r16, r6
    15e8:	17 05       	cpc	r17, r7
    15ea:	28 f0       	brcs	.+10     	; 0x15f6 <dump_eeprom+0xfc>
    15ec:	8d ea       	ldi	r24, 0xAD	; 173
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	0e 94 b9 09 	call	0x1372	; 0x1372 <uart_writestr>
    15f4:	0b c0       	rjmp	.+22     	; 0x160c <dump_eeprom+0x112>
    15f6:	f8 01       	movw	r30, r16
    15f8:	ec 19       	sub	r30, r12
    15fa:	fd 09       	sbc	r31, r13
    15fc:	e2 0d       	add	r30, r2
    15fe:	f3 1d       	adc	r31, r3
    1600:	80 81       	ld	r24, Z
    1602:	0e 94 c5 09 	call	0x138a	; 0x138a <uart_writehex8>
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	0e 94 b7 09 	call	0x136e	; 0x136e <uart_writechar>
    160c:	0f 5f       	subi	r16, 0xFF	; 255
    160e:	1f 4f       	sbci	r17, 0xFF	; 255
    1610:	00 31       	cpi	r16, 0x10	; 16
    1612:	11 05       	cpc	r17, r1
    1614:	29 f7       	brne	.-54     	; 0x15e0 <dump_eeprom+0xe6>
    1616:	00 e0       	ldi	r16, 0x00	; 0
    1618:	10 e0       	ldi	r17, 0x00	; 0
    161a:	c0 16       	cp	r12, r16
    161c:	d1 06       	cpc	r13, r17
    161e:	31 f0       	breq	.+12     	; 0x162c <dump_eeprom+0x132>
    1620:	80 e2       	ldi	r24, 0x20	; 32
    1622:	0e 94 b7 09 	call	0x136e	; 0x136e <uart_writechar>
    1626:	0f 5f       	subi	r16, 0xFF	; 255
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	f7 cf       	rjmp	.-18     	; 0x161a <dump_eeprom+0x120>
    162c:	81 01       	movw	r16, r2
    162e:	c8 01       	movw	r24, r16
    1630:	82 19       	sub	r24, r2
    1632:	93 09       	sbc	r25, r3
    1634:	84 15       	cp	r24, r4
    1636:	95 05       	cpc	r25, r5
    1638:	58 f4       	brcc	.+22     	; 0x1650 <dump_eeprom+0x156>
    163a:	f8 01       	movw	r30, r16
    163c:	81 91       	ld	r24, Z+
    163e:	8f 01       	movw	r16, r30
    1640:	90 ee       	ldi	r25, 0xE0	; 224
    1642:	98 0f       	add	r25, r24
    1644:	90 36       	cpi	r25, 0x60	; 96
    1646:	08 f0       	brcs	.+2      	; 0x164a <dump_eeprom+0x150>
    1648:	8e e2       	ldi	r24, 0x2E	; 46
    164a:	0e 94 b7 09 	call	0x136e	; 0x136e <uart_writechar>
    164e:	ef cf       	rjmp	.-34     	; 0x162e <dump_eeprom+0x134>
    1650:	81 eb       	ldi	r24, 0xB1	; 177
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	0e 94 b9 09 	call	0x1372	; 0x1372 <uart_writestr>
    1658:	87 01       	movw	r16, r14
    165a:	7b cf       	rjmp	.-266    	; 0x1552 <dump_eeprom+0x58>
    165c:	64 96       	adiw	r28, 0x14	; 20
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	4f 90       	pop	r4
    1688:	3f 90       	pop	r3
    168a:	2f 90       	pop	r2
    168c:	08 95       	ret

0000168e <__vector_14>:
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	2f 93       	push	r18
    169a:	3f 93       	push	r19
    169c:	8f 93       	push	r24
    169e:	9f 93       	push	r25
    16a0:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <delay_count>
    16a4:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <delay_count+0x1>
    16a8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <delay_limit>
    16ac:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <delay_limit+0x1>
    16b0:	28 17       	cp	r18, r24
    16b2:	39 07       	cpc	r19, r25
    16b4:	49 f0       	breq	.+18     	; 0x16c8 <__vector_14+0x3a>
    16b6:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <delay_count>
    16ba:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <delay_count+0x1>
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <delay_count+0x1>
    16c4:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <delay_count>
    16c8:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <delay_count+0x2>
    16cc:	30 91 4a 02 	lds	r19, 0x024A	; 0x80024a <delay_count+0x3>
    16d0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <delay_limit+0x2>
    16d4:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <delay_limit+0x3>
    16d8:	28 17       	cp	r18, r24
    16da:	39 07       	cpc	r19, r25
    16dc:	49 f0       	breq	.+18     	; 0x16f0 <__vector_14+0x62>
    16de:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <delay_count+0x2>
    16e2:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <delay_count+0x3>
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <delay_count+0x3>
    16ec:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <delay_count+0x2>
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	3f 91       	pop	r19
    16f6:	2f 91       	pop	r18
    16f8:	0f 90       	pop	r0
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	0f 90       	pop	r0
    16fe:	1f 90       	pop	r1
    1700:	18 95       	reti

00001702 <delay_init>:
    1702:	89 ef       	ldi	r24, 0xF9	; 249
    1704:	87 bd       	out	0x27, r24	; 39
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	84 bd       	out	0x24, r24	; 36
    170a:	93 e0       	ldi	r25, 0x03	; 3
    170c:	95 bd       	out	0x25, r25	; 37
    170e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1712:	08 95       	ret

00001714 <delay_get>:
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	91 05       	cpc	r25, r1
    1718:	50 f4       	brcc	.+20     	; 0x172e <delay_get+0x1a>
    171a:	f8 94       	cli
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	fc 01       	movw	r30, r24
    1722:	e9 5b       	subi	r30, 0xB9	; 185
    1724:	fd 4f       	sbci	r31, 0xFD	; 253
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	78 94       	sei
    172c:	08 95       	ret
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	08 95       	ret

00001734 <delay_isdone>:
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	91 05       	cpc	r25, r1
    1738:	98 f4       	brcc	.+38     	; 0x1760 <delay_isdone+0x2c>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	fc 01       	movw	r30, r24
    1740:	e9 5b       	subi	r30, 0xB9	; 185
    1742:	fd 4f       	sbci	r31, 0xFD	; 253
    1744:	20 81       	ld	r18, Z
    1746:	31 81       	ldd	r19, Z+1	; 0x01
    1748:	fc 01       	movw	r30, r24
    174a:	ed 5b       	subi	r30, 0xBD	; 189
    174c:	fd 4f       	sbci	r31, 0xFD	; 253
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	40 81       	ld	r20, Z
    1754:	51 81       	ldd	r21, Z+1	; 0x01
    1756:	42 17       	cp	r20, r18
    1758:	53 07       	cpc	r21, r19
    175a:	21 f0       	breq	.+8      	; 0x1764 <delay_isdone+0x30>
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	08 95       	ret
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	08 95       	ret

00001766 <delay_set>:
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	ec 01       	movw	r28, r24
    1770:	8b 01       	movw	r16, r22
    1772:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <initialized.1590>
    1776:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <initialized.1590+0x1>
    177a:	89 2b       	or	r24, r25
    177c:	41 f4       	brne	.+16     	; 0x178e <delay_set+0x28>
    177e:	0e 94 81 0b 	call	0x1702	; 0x1702 <delay_init>
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <initialized.1590+0x1>
    178a:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <initialized.1590>
    178e:	c2 30       	cpi	r28, 0x02	; 2
    1790:	d1 05       	cpc	r29, r1
    1792:	70 f4       	brcc	.+28     	; 0x17b0 <delay_set+0x4a>
    1794:	8f b7       	in	r24, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	cc 0f       	add	r28, r28
    179a:	dd 1f       	adc	r29, r29
    179c:	fe 01       	movw	r30, r28
    179e:	ed 5b       	subi	r30, 0xBD	; 189
    17a0:	fd 4f       	sbci	r31, 0xFD	; 253
    17a2:	11 83       	std	Z+1, r17	; 0x01
    17a4:	00 83       	st	Z, r16
    17a6:	c9 5b       	subi	r28, 0xB9	; 185
    17a8:	dd 4f       	sbci	r29, 0xFD	; 253
    17aa:	19 82       	std	Y+1, r1	; 0x01
    17ac:	18 82       	st	Y, r1
    17ae:	8f bf       	out	0x3f, r24	; 63
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <serial_init>:
    17ba:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    17be:	87 e6       	ldi	r24, 0x67	; 103
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    17c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    17ca:	e1 ec       	ldi	r30, 0xC1	; 193
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	88 e1       	ldi	r24, 0x18	; 24
    17d0:	80 83       	st	Z, r24
    17d2:	86 e0       	ldi	r24, 0x06	; 6
    17d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    17d8:	80 81       	ld	r24, Z
    17da:	80 6a       	ori	r24, 0xA0	; 160
    17dc:	80 83       	st	Z, r24
    17de:	08 95       	ret

000017e0 <__vector_18>:
    17e0:	1f 92       	push	r1
    17e2:	0f 92       	push	r0
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	0f 92       	push	r0
    17e8:	11 24       	eor	r1, r1
    17ea:	2f 93       	push	r18
    17ec:	8f 93       	push	r24
    17ee:	9f 93       	push	r25
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
    17f4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <rxtail>
    17f8:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <rxhead>
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	82 1b       	sub	r24, r18
    1800:	91 09       	sbc	r25, r1
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	8f 73       	andi	r24, 0x3F	; 63
    1806:	99 27       	eor	r25, r25
    1808:	89 2b       	or	r24, r25
    180a:	79 f0       	breq	.+30     	; 0x182a <__vector_18+0x4a>
    180c:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <rxhead>
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1816:	ef 55       	subi	r30, 0x5F	; 95
    1818:	fb 4f       	sbci	r31, 0xFB	; 251
    181a:	80 83       	st	Z, r24
    181c:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <rxhead>
    1820:	8f 5f       	subi	r24, 0xFF	; 255
    1822:	8f 73       	andi	r24, 0x3F	; 63
    1824:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <rxhead>
    1828:	02 c0       	rjmp	.+4      	; 0x182e <__vector_18+0x4e>
    182a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	9f 91       	pop	r25
    1834:	8f 91       	pop	r24
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <__vector_19>:
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	2f 93       	push	r18
    184e:	8f 93       	push	r24
    1850:	9f 93       	push	r25
    1852:	ef 93       	push	r30
    1854:	ff 93       	push	r31
    1856:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <txhead>
    185a:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <txtail>
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	82 1b       	sub	r24, r18
    1862:	91 09       	sbc	r25, r1
    1864:	8f 73       	andi	r24, 0x3F	; 63
    1866:	99 27       	eor	r25, r25
    1868:	89 2b       	or	r24, r25
    186a:	79 f0       	breq	.+30     	; 0x188a <__vector_19+0x48>
    186c:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <txtail>
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	ef 51       	subi	r30, 0x1F	; 31
    1874:	fb 4f       	sbci	r31, 0xFB	; 251
    1876:	80 81       	ld	r24, Z
    1878:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    187c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <txtail>
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	8f 73       	andi	r24, 0x3F	; 63
    1884:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <txtail>
    1888:	05 c0       	rjmp	.+10     	; 0x1894 <__vector_19+0x52>
    188a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    188e:	8f 7d       	andi	r24, 0xDF	; 223
    1890:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	2f 91       	pop	r18
    189e:	0f 90       	pop	r0
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	0f 90       	pop	r0
    18a4:	1f 90       	pop	r1
    18a6:	18 95       	reti

000018a8 <serial_rxchars>:
    18a8:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <rxhead>
    18ac:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <rxtail>
    18b0:	89 1b       	sub	r24, r25
    18b2:	8f 73       	andi	r24, 0x3F	; 63
    18b4:	08 95       	ret

000018b6 <serial_popchar>:
    18b6:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <rxhead>
    18ba:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <rxtail>
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	82 1b       	sub	r24, r18
    18c2:	91 09       	sbc	r25, r1
    18c4:	8f 73       	andi	r24, 0x3F	; 63
    18c6:	99 27       	eor	r25, r25
    18c8:	89 2b       	or	r24, r25
    18ca:	69 f0       	breq	.+26     	; 0x18e6 <serial_popchar+0x30>
    18cc:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <rxtail>
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	ef 55       	subi	r30, 0x5F	; 95
    18d4:	fb 4f       	sbci	r31, 0xFB	; 251
    18d6:	80 81       	ld	r24, Z
    18d8:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <rxtail>
    18dc:	9f 5f       	subi	r25, 0xFF	; 255
    18de:	9f 73       	andi	r25, 0x3F	; 63
    18e0:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <rxtail>
    18e4:	08 95       	ret
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	08 95       	ret

000018ea <serial_writechar>:
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	07 fe       	sbrs	r0, 7
    18ee:	0e c0       	rjmp	.+28     	; 0x190c <serial_writechar+0x22>
    18f0:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <txtail>
    18f4:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <txhead>
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	29 1b       	sub	r18, r25
    18fc:	31 09       	sbc	r19, r1
    18fe:	21 50       	subi	r18, 0x01	; 1
    1900:	31 09       	sbc	r19, r1
    1902:	2f 73       	andi	r18, 0x3F	; 63
    1904:	33 27       	eor	r19, r19
    1906:	23 2b       	or	r18, r19
    1908:	99 f3       	breq	.-26     	; 0x18f0 <serial_writechar+0x6>
    190a:	0d c0       	rjmp	.+26     	; 0x1926 <serial_writechar+0x3c>
    190c:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <txtail>
    1910:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <txhead>
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	29 1b       	sub	r18, r25
    1918:	31 09       	sbc	r19, r1
    191a:	21 50       	subi	r18, 0x01	; 1
    191c:	31 09       	sbc	r19, r1
    191e:	2f 73       	andi	r18, 0x3F	; 63
    1920:	33 27       	eor	r19, r19
    1922:	23 2b       	or	r18, r19
    1924:	61 f0       	breq	.+24     	; 0x193e <serial_writechar+0x54>
    1926:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <txhead>
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	ef 51       	subi	r30, 0x1F	; 31
    192e:	fb 4f       	sbci	r31, 0xFB	; 251
    1930:	80 83       	st	Z, r24
    1932:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <txhead>
    1936:	8f 5f       	subi	r24, 0xFF	; 255
    1938:	8f 73       	andi	r24, 0x3F	; 63
    193a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <txhead>
    193e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1942:	80 62       	ori	r24, 0x20	; 32
    1944:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1948:	08 95       	ret

0000194a <serial_writestr>:
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	ec 01       	movw	r28, r24
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	11 e0       	ldi	r17, 0x01	; 1
    1956:	18 0f       	add	r17, r24
    1958:	fe 01       	movw	r30, r28
    195a:	e8 0f       	add	r30, r24
    195c:	f1 1d       	adc	r31, r1
    195e:	80 81       	ld	r24, Z
    1960:	88 23       	and	r24, r24
    1962:	21 f0       	breq	.+8      	; 0x196c <serial_writestr+0x22>
    1964:	0e 94 75 0c 	call	0x18ea	; 0x18ea <serial_writechar>
    1968:	81 2f       	mov	r24, r17
    196a:	f4 cf       	rjmp	.-24     	; 0x1954 <serial_writestr+0xa>
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	08 95       	ret

00001974 <serial_writestr_P>:
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	ec 01       	movw	r28, r24
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	11 e0       	ldi	r17, 0x01	; 1
    1980:	18 0f       	add	r17, r24
    1982:	fe 01       	movw	r30, r28
    1984:	e8 0f       	add	r30, r24
    1986:	f1 1d       	adc	r31, r1
    1988:	84 91       	lpm	r24, Z
    198a:	88 23       	and	r24, r24
    198c:	21 f0       	breq	.+8      	; 0x1996 <serial_writestr_P+0x22>
    198e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <serial_writechar>
    1992:	81 2f       	mov	r24, r17
    1994:	f4 cf       	rjmp	.-24     	; 0x197e <serial_writestr_P+0xa>
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	08 95       	ret

0000199e <__mulsi3>:
    199e:	db 01       	movw	r26, r22
    19a0:	8f 93       	push	r24
    19a2:	9f 93       	push	r25
    19a4:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__muluhisi3>
    19a8:	bf 91       	pop	r27
    19aa:	af 91       	pop	r26
    19ac:	a2 9f       	mul	r26, r18
    19ae:	80 0d       	add	r24, r0
    19b0:	91 1d       	adc	r25, r1
    19b2:	a3 9f       	mul	r26, r19
    19b4:	90 0d       	add	r25, r0
    19b6:	b2 9f       	mul	r27, r18
    19b8:	90 0d       	add	r25, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	08 95       	ret

000019be <__udivmodhi4>:
    19be:	aa 1b       	sub	r26, r26
    19c0:	bb 1b       	sub	r27, r27
    19c2:	51 e1       	ldi	r21, 0x11	; 17
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <__udivmodhi4_ep>

000019c6 <__udivmodhi4_loop>:
    19c6:	aa 1f       	adc	r26, r26
    19c8:	bb 1f       	adc	r27, r27
    19ca:	a6 17       	cp	r26, r22
    19cc:	b7 07       	cpc	r27, r23
    19ce:	10 f0       	brcs	.+4      	; 0x19d4 <__udivmodhi4_ep>
    19d0:	a6 1b       	sub	r26, r22
    19d2:	b7 0b       	sbc	r27, r23

000019d4 <__udivmodhi4_ep>:
    19d4:	88 1f       	adc	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	5a 95       	dec	r21
    19da:	a9 f7       	brne	.-22     	; 0x19c6 <__udivmodhi4_loop>
    19dc:	80 95       	com	r24
    19de:	90 95       	com	r25
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	08 95       	ret

000019e6 <__divmodhi4>:
    19e6:	97 fb       	bst	r25, 7
    19e8:	07 2e       	mov	r0, r23
    19ea:	16 f4       	brtc	.+4      	; 0x19f0 <__divmodhi4+0xa>
    19ec:	00 94       	com	r0
    19ee:	07 d0       	rcall	.+14     	; 0x19fe <__divmodhi4_neg1>
    19f0:	77 fd       	sbrc	r23, 7
    19f2:	09 d0       	rcall	.+18     	; 0x1a06 <__divmodhi4_neg2>
    19f4:	0e 94 df 0c 	call	0x19be	; 0x19be <__udivmodhi4>
    19f8:	07 fc       	sbrc	r0, 7
    19fa:	05 d0       	rcall	.+10     	; 0x1a06 <__divmodhi4_neg2>
    19fc:	3e f4       	brtc	.+14     	; 0x1a0c <__divmodhi4_exit>

000019fe <__divmodhi4_neg1>:
    19fe:	90 95       	com	r25
    1a00:	81 95       	neg	r24
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	08 95       	ret

00001a06 <__divmodhi4_neg2>:
    1a06:	70 95       	com	r23
    1a08:	61 95       	neg	r22
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255

00001a0c <__divmodhi4_exit>:
    1a0c:	08 95       	ret

00001a0e <__udivmodsi4>:
    1a0e:	a1 e2       	ldi	r26, 0x21	; 33
    1a10:	1a 2e       	mov	r1, r26
    1a12:	aa 1b       	sub	r26, r26
    1a14:	bb 1b       	sub	r27, r27
    1a16:	fd 01       	movw	r30, r26
    1a18:	0d c0       	rjmp	.+26     	; 0x1a34 <__udivmodsi4_ep>

00001a1a <__udivmodsi4_loop>:
    1a1a:	aa 1f       	adc	r26, r26
    1a1c:	bb 1f       	adc	r27, r27
    1a1e:	ee 1f       	adc	r30, r30
    1a20:	ff 1f       	adc	r31, r31
    1a22:	a2 17       	cp	r26, r18
    1a24:	b3 07       	cpc	r27, r19
    1a26:	e4 07       	cpc	r30, r20
    1a28:	f5 07       	cpc	r31, r21
    1a2a:	20 f0       	brcs	.+8      	; 0x1a34 <__udivmodsi4_ep>
    1a2c:	a2 1b       	sub	r26, r18
    1a2e:	b3 0b       	sbc	r27, r19
    1a30:	e4 0b       	sbc	r30, r20
    1a32:	f5 0b       	sbc	r31, r21

00001a34 <__udivmodsi4_ep>:
    1a34:	66 1f       	adc	r22, r22
    1a36:	77 1f       	adc	r23, r23
    1a38:	88 1f       	adc	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	1a 94       	dec	r1
    1a3e:	69 f7       	brne	.-38     	; 0x1a1a <__udivmodsi4_loop>
    1a40:	60 95       	com	r22
    1a42:	70 95       	com	r23
    1a44:	80 95       	com	r24
    1a46:	90 95       	com	r25
    1a48:	9b 01       	movw	r18, r22
    1a4a:	ac 01       	movw	r20, r24
    1a4c:	bd 01       	movw	r22, r26
    1a4e:	cf 01       	movw	r24, r30
    1a50:	08 95       	ret

00001a52 <__divmodsi4>:
    1a52:	05 2e       	mov	r0, r21
    1a54:	97 fb       	bst	r25, 7
    1a56:	1e f4       	brtc	.+6      	; 0x1a5e <__divmodsi4+0xc>
    1a58:	00 94       	com	r0
    1a5a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__negsi2>
    1a5e:	57 fd       	sbrc	r21, 7
    1a60:	07 d0       	rcall	.+14     	; 0x1a70 <__divmodsi4_neg2>
    1a62:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
    1a66:	07 fc       	sbrc	r0, 7
    1a68:	03 d0       	rcall	.+6      	; 0x1a70 <__divmodsi4_neg2>
    1a6a:	4e f4       	brtc	.+18     	; 0x1a7e <__divmodsi4_exit>
    1a6c:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__negsi2>

00001a70 <__divmodsi4_neg2>:
    1a70:	50 95       	com	r21
    1a72:	40 95       	com	r20
    1a74:	30 95       	com	r19
    1a76:	21 95       	neg	r18
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a7c:	5f 4f       	sbci	r21, 0xFF	; 255

00001a7e <__divmodsi4_exit>:
    1a7e:	08 95       	ret

00001a80 <__negsi2>:
    1a80:	90 95       	com	r25
    1a82:	80 95       	com	r24
    1a84:	70 95       	com	r23
    1a86:	61 95       	neg	r22
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	08 95       	ret

00001a90 <__umulhisi3>:
    1a90:	a2 9f       	mul	r26, r18
    1a92:	b0 01       	movw	r22, r0
    1a94:	b3 9f       	mul	r27, r19
    1a96:	c0 01       	movw	r24, r0
    1a98:	a3 9f       	mul	r26, r19
    1a9a:	70 0d       	add	r23, r0
    1a9c:	81 1d       	adc	r24, r1
    1a9e:	11 24       	eor	r1, r1
    1aa0:	91 1d       	adc	r25, r1
    1aa2:	b2 9f       	mul	r27, r18
    1aa4:	70 0d       	add	r23, r0
    1aa6:	81 1d       	adc	r24, r1
    1aa8:	11 24       	eor	r1, r1
    1aaa:	91 1d       	adc	r25, r1
    1aac:	08 95       	ret

00001aae <__muluhisi3>:
    1aae:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
    1ab2:	a5 9f       	mul	r26, r21
    1ab4:	90 0d       	add	r25, r0
    1ab6:	b4 9f       	mul	r27, r20
    1ab8:	90 0d       	add	r25, r0
    1aba:	a4 9f       	mul	r26, r20
    1abc:	80 0d       	add	r24, r0
    1abe:	91 1d       	adc	r25, r1
    1ac0:	11 24       	eor	r1, r1
    1ac2:	08 95       	ret

00001ac4 <_exit>:
    1ac4:	f8 94       	cli

00001ac6 <__stop_program>:
    1ac6:	ff cf       	rjmp	.-2      	; 0x1ac6 <__stop_program>
