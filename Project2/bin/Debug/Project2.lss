
bin/Debug/Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  00000c10  00000ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000255  00800214  00800214  00000db8  2**0
                  ALLOC
  3 .stab         00001aac  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000141e  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003c82  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c94  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00003cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  000042c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000486a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00004884  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 36       	cpi	r26, 0x69	; 105
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 83 02 	call	0x506	; 0x506 <main>
  9e:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
/*********** Private declarations ***********/
int is_data_valid();
void write_defaults();

/*********** Public definitions ***********/
void config_init() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  /* while the data is not valid */

  /* write defaults */
  /* init config with defaults */
  /* clear the modified flag */
}
  ae:	00 00       	nop
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <config_update>:
void config_update() {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  /* if eeprom is busy or !modified just return */

  /* update the checksum */
  /* write config to eeprom */
  /* clear the modified flag */
}
  be:	00 00       	nop
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <config_set_modified>:
void config_set_modified() {
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  config_modified = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
}
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <is_data_valid>:


/*********** Private definitions ***********/
int is_data_valid() {
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  // todo 
  return 0;
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <write_defaults>:
void write_defaults() {
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  /* upate_checksum() for defaults*/

  /* write defaults to eeprom */
  f6:	00 00       	nop
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <__vector__23>:

/* Enabled when writebuf() places new data in the write buffer, this ISR sends
 * one byte at a time to the EEPROM. When the last byte is sent, it disables
 * futher EERPOM interrupts */
/* should this bee vector 22 or 23?? Documents say 23 for EE ready */
void __vector__23(){
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
  // if (EECR & (1<<EEPE)) { return; } /* not ready. Don't block */

  /* if you haven't written all characters in then keep writing */
  /* should we check to see if it is ready to write? */
  if (bufidx < writesize) {
 106:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <bufidx>
 10a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <writesize>
 10e:	98 17       	cp	r25, r24
 110:	18 f5       	brcc	.+70     	; 0x158 <__vector__23+0x5a>
    /* set low byte */
    EEARL = writeaddr & 0xFF; 
 112:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <writeaddr>
 116:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <writeaddr+0x1>
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
    /* set high byte */
    EEARH = (writeaddr >> 8) & 0xFF;
 122:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <writeaddr>
 126:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <writeaddr+0x1>
 12a:	29 2f       	mov	r18, r25
 12c:	33 27       	eor	r19, r19
 12e:	82 e4       	ldi	r24, 0x42	; 66
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
    EEDR = writebuf[bufidx++];
 136:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <bufidx>
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	98 0f       	add	r25, r24
 13e:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <bufidx>
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	80 e4       	ldi	r24, 0x40	; 64
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	25 5d       	subi	r18, 0xD5	; 213
 14c:	3d 4f       	sbci	r19, 0xFD	; 253
 14e:	f9 01       	movw	r30, r18
 150:	20 81       	ld	r18, Z
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
    /* disable interrupts */
    disable_interrupt();
    /* make ready to write another */
    write_busy = 0;
  }
}
 156:	1c c0       	rjmp	.+56     	; 0x190 <__vector__23+0x92>
    EEARL = writeaddr & 0xFF; 
    /* set high byte */
    EEARH = (writeaddr >> 8) & 0xFF;
    EEDR = writebuf[bufidx++];
  }
  else if(bufidx >= writesize) {
 158:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <bufidx>
 15c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <writesize>
 160:	98 17       	cp	r25, r24
 162:	b0 f0       	brcs	.+44     	; 0x190 <__vector__23+0x92>
    /* take EEPROM out of write mode */
    EECR &= ~(1<<EEMPE);
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	20 81       	ld	r18, Z
 16c:	8f e3       	ldi	r24, 0x3F	; 63
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	2b 7f       	andi	r18, 0xFB	; 251
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
    EECR &= ~(1<<EEPE);
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	fc 01       	movw	r30, r24
 17c:	20 81       	ld	r18, Z
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	2d 7f       	andi	r18, 0xFD	; 253
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18

    /* disable interrupts */
    disable_interrupt();
 188:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <disable_interrupt>
    /* make ready to write another */
    write_busy = 0;
 18c:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <write_busy>
  }
}
 190:	00 00       	nop
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <eeprom_writebuf>:

/* this function places the data (specified buf and size) into the write buffer
 * for later writing to the EEPROM. The addr parameter specifies the location to
 * write the data to. */
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf, unsigned char size) {
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <eeprom_writebuf+0x6>
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <eeprom_writebuf+0x8>
 1a0:	1f 92       	push	r1
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	9a 83       	std	Y+2, r25	; 0x02
 1a8:	89 83       	std	Y+1, r24	; 0x01
 1aa:	7c 83       	std	Y+4, r23	; 0x04
 1ac:	6b 83       	std	Y+3, r22	; 0x03
 1ae:	4d 83       	std	Y+5, r20	; 0x05
  // check that write_busy is 0
  if (write_busy > 0) {
 1b0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <write_busy>
 1b4:	88 23       	and	r24, r24
 1b6:	a9 f0       	breq	.+42     	; 0x1e2 <eeprom_writebuf+0x4a>
    // write to the console
    LOG_ERROR("Tried to write while EEPROM was busy")
 1b8:	89 e4       	ldi	r24, 0x49	; 73
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	89 2f       	mov	r24, r25
 1be:	8f 93       	push	r24
 1c0:	89 e4       	ldi	r24, 0x49	; 73
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	8f 93       	push	r24
 1c6:	8e e6       	ldi	r24, 0x6E	; 110
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	89 2f       	mov	r24, r25
 1cc:	8f 93       	push	r24
 1ce:	8e e6       	ldi	r24, 0x6E	; 110
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	8f 93       	push	r24
 1d4:	0e 94 10 03 	call	0x620	; 0x620 <printf>
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
    return;
 1e0:	64 c0       	rjmp	.+200    	; 0x2aa <eeprom_writebuf+0x112>
  }
  if (size > 64) {
 1e2:	8d 81       	ldd	r24, Y+5	; 0x05
 1e4:	81 34       	cpi	r24, 0x41	; 65
 1e6:	a8 f0       	brcs	.+42     	; 0x212 <eeprom_writebuf+0x7a>
    /* write error. buffer is too big */
    LOG_ERROR("Tried to write too much data to buffer")
 1e8:	89 e7       	ldi	r24, 0x79	; 121
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	89 2f       	mov	r24, r25
 1ee:	8f 93       	push	r24
 1f0:	89 e7       	ldi	r24, 0x79	; 121
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	8f 93       	push	r24
 1f6:	8e e6       	ldi	r24, 0x6E	; 110
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	89 2f       	mov	r24, r25
 1fc:	8f 93       	push	r24
 1fe:	8e e6       	ldi	r24, 0x6E	; 110
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	8f 93       	push	r24
 204:	0e 94 10 03 	call	0x620	; 0x620 <printf>
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
    return;
 210:	4c c0       	rjmp	.+152    	; 0x2aa <eeprom_writebuf+0x112>
  }
  if ((addr + size) > 0x3FF) {
 212:	8d 81       	ldd	r24, Y+5	; 0x05
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	9a 81       	ldd	r25, Y+2	; 0x02
 21c:	82 0f       	add	r24, r18
 21e:	93 1f       	adc	r25, r19
 220:	81 15       	cp	r24, r1
 222:	94 40       	sbci	r25, 0x04	; 4
 224:	a8 f0       	brcs	.+42     	; 0x250 <eeprom_writebuf+0xb8>
    LOG_ERROR("Address out of range")
 226:	80 ea       	ldi	r24, 0xA0	; 160
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	89 2f       	mov	r24, r25
 22c:	8f 93       	push	r24
 22e:	80 ea       	ldi	r24, 0xA0	; 160
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	8f 93       	push	r24
 234:	8e e6       	ldi	r24, 0x6E	; 110
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	89 2f       	mov	r24, r25
 23a:	8f 93       	push	r24
 23c:	8e e6       	ldi	r24, 0x6E	; 110
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	8f 93       	push	r24
 242:	0e 94 10 03 	call	0x620	; 0x620 <printf>
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
    return;
 24e:	2d c0       	rjmp	.+90     	; 0x2aa <eeprom_writebuf+0x112>
  }
  /* the EEPROM is now writing */
  write_busy = 1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <write_busy>
  /* change the write address */
  writeaddr = addr;
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	9a 81       	ldd	r25, Y+2	; 0x02
 25a:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <writeaddr+0x1>
 25e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <writeaddr>
  /* start reading from the beginning of the buffer */
  bufidx = 0;
 262:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <bufidx>

  /* copy buf to writebuf and configure writesize */
  memcpy(writebuf, buf, size);
 266:	8d 81       	ldd	r24, Y+5	; 0x05
 268:	28 2f       	mov	r18, r24
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	a9 01       	movw	r20, r18
 272:	bc 01       	movw	r22, r24
 274:	8b e2       	ldi	r24, 0x2B	; 43
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	0e 94 07 03 	call	0x60e	; 0x60e <memcpy>

  writesize = size;
 27c:	8d 81       	ldd	r24, Y+5	; 0x05
 27e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <writesize>

  /* set the EEPROM to write mode */
  EECR |= (1<<EEMPE);
 282:	8f e3       	ldi	r24, 0x3F	; 63
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	fc 01       	movw	r30, r24
 288:	20 81       	ld	r18, Z
 28a:	8f e3       	ldi	r24, 0x3F	; 63
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	24 60       	ori	r18, 0x04	; 4
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
  EECR |= (1<<EEPE);
 294:	8f e3       	ldi	r24, 0x3F	; 63
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	20 81       	ld	r18, Z
 29c:	8f e3       	ldi	r24, 0x3F	; 63
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	22 60       	ori	r18, 0x02	; 2
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 83       	st	Z, r18
  
  /* enable the EEPROM ready interrupts */
  enable_interrupt();
 2a6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <enable_interrupt>
}
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <eeprom_readbuf>:

/* this function reads a specified amount of data(size) from the EEPROM starting
 * at a specified address(addr) and places it in the specified buffer(buf) */
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <eeprom_readbuf+0x6>
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <eeprom_readbuf+0x8>
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <eeprom_readbuf+0xa>
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	9b 83       	std	Y+3, r25	; 0x03
 2ca:	8a 83       	std	Y+2, r24	; 0x02
 2cc:	7d 83       	std	Y+5, r23	; 0x05
 2ce:	6c 83       	std	Y+4, r22	; 0x04
 2d0:	4e 83       	std	Y+6, r20	; 0x06

  // check that write_busy is 0
  if (write_busy > 0) {
 2d2:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <write_busy>
 2d6:	88 23       	and	r24, r24
 2d8:	a9 f0       	breq	.+42     	; 0x304 <eeprom_readbuf+0x4a>
    // write to the console
    LOG_ERROR("Tried to read while eeprom was busy")
 2da:	85 eb       	ldi	r24, 0xB5	; 181
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	89 2f       	mov	r24, r25
 2e0:	8f 93       	push	r24
 2e2:	85 eb       	ldi	r24, 0xB5	; 181
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	8f 93       	push	r24
 2e8:	8e e6       	ldi	r24, 0x6E	; 110
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	89 2f       	mov	r24, r25
 2ee:	8f 93       	push	r24
 2f0:	8e e6       	ldi	r24, 0x6E	; 110
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	8f 93       	push	r24
 2f6:	0e 94 10 03 	call	0x620	; 0x620 <printf>
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
    return;
 302:	49 c0       	rjmp	.+146    	; 0x396 <eeprom_readbuf+0xdc>
  }
  if (size > 64) {
 304:	8e 81       	ldd	r24, Y+6	; 0x06
 306:	81 34       	cpi	r24, 0x41	; 65
 308:	a8 f0       	brcs	.+42     	; 0x334 <eeprom_readbuf+0x7a>
    /* write error. buffer is too big */
    LOG_ERROR("Tried to write too much data to buffer")
 30a:	89 e7       	ldi	r24, 0x79	; 121
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	89 2f       	mov	r24, r25
 310:	8f 93       	push	r24
 312:	89 e7       	ldi	r24, 0x79	; 121
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	8f 93       	push	r24
 318:	8e e6       	ldi	r24, 0x6E	; 110
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	89 2f       	mov	r24, r25
 31e:	8f 93       	push	r24
 320:	8e e6       	ldi	r24, 0x6E	; 110
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	8f 93       	push	r24
 326:	0e 94 10 03 	call	0x620	; 0x620 <printf>
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
    return;
 332:	31 c0       	rjmp	.+98     	; 0x396 <eeprom_readbuf+0xdc>
  }

  for (unsigned char i = 0; i < size; i++) {
 334:	19 82       	std	Y+1, r1	; 0x01
 336:	2b c0       	rjmp	.+86     	; 0x38e <eeprom_readbuf+0xd4>
    /* set the address */
    /* set low byte */
    EEARL = addr & 0xFF; 
 338:	81 e4       	ldi	r24, 0x41	; 65
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	2a 81       	ldd	r18, Y+2	; 0x02
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18

    /* set high byte */
    EEARH = (addr >> 8) & 0xFF;
 342:	8a 81       	ldd	r24, Y+2	; 0x02
 344:	9b 81       	ldd	r25, Y+3	; 0x03
 346:	29 2f       	mov	r18, r25
 348:	33 27       	eor	r19, r19
 34a:	82 e4       	ldi	r24, 0x42	; 66
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18

    /* set mode to read */
    EECR |= (1<<EERE);
 352:	8f e3       	ldi	r24, 0x3F	; 63
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	fc 01       	movw	r30, r24
 358:	20 81       	ld	r18, Z
 35a:	8f e3       	ldi	r24, 0x3F	; 63
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	21 60       	ori	r18, 0x01	; 1
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
    /* write from register to buffer */
    buf[i] = EEDR;
 364:	20 e4       	ldi	r18, 0x40	; 64
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	88 2f       	mov	r24, r24
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	4c 81       	ldd	r20, Y+4	; 0x04
 370:	5d 81       	ldd	r21, Y+5	; 0x05
 372:	84 0f       	add	r24, r20
 374:	95 1f       	adc	r25, r21
 376:	f9 01       	movw	r30, r18
 378:	20 81       	ld	r18, Z
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18

    addr++;
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	9b 81       	ldd	r25, Y+3	; 0x03
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	9b 83       	std	Y+3, r25	; 0x03
 386:	8a 83       	std	Y+2, r24	; 0x02
    /* write error. buffer is too big */
    LOG_ERROR("Tried to write too much data to buffer")
    return;
  }

  for (unsigned char i = 0; i < size; i++) {
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	89 83       	std	Y+1, r24	; 0x01
 38e:	99 81       	ldd	r25, Y+1	; 0x01
 390:	8e 81       	ldd	r24, Y+6	; 0x06
 392:	98 17       	cp	r25, r24
 394:	88 f2       	brcs	.-94     	; 0x338 <eeprom_readbuf+0x7e>
    buf[i] = EEDR;

    addr++;
  }
  
}
 396:	26 96       	adiw	r28, 0x06	; 6
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <eeprom_isbusy>:

/* this functiosn returns 0 if write_busy is 0, otherwise, returns 1 */
int eeprom_isbusy() { return write_busy==1; }
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <write_busy>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	91 30       	cpi	r25, 0x01	; 1
 3b8:	09 f0       	breq	.+2      	; 0x3bc <eeprom_isbusy+0x14>
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <enable_interrupt>:

void enable_interrupt() {
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
  EECR |= (1<<EERIE);
 3ce:	8f e3       	ldi	r24, 0x3F	; 63
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 81       	ld	r18, Z
 3d6:	8f e3       	ldi	r24, 0x3F	; 63
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	28 60       	ori	r18, 0x08	; 8
 3dc:	fc 01       	movw	r30, r24
 3de:	20 83       	st	Z, r18
}
 3e0:	00 00       	nop
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <disable_interrupt>:

void disable_interrupt() {
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
  EECR &= ~(1<<EERIE);
 3f0:	8f e3       	ldi	r24, 0x3F	; 63
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 81       	ld	r18, Z
 3f8:	8f e3       	ldi	r24, 0x3F	; 63
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	27 7f       	andi	r18, 0xF7	; 247
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
}
 402:	00 00       	nop
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <test_eeprom_operations>:

#include <assert.h>
#include <stdio.h>

// Function to test EEPROM operations
void test_eeprom_operations() {
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	c5 58       	subi	r28, 0x85	; 133
 414:	d1 09       	sbc	r29, r1
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
    printf("Starting EEPROM Unit Test...\n");
 420:	89 ed       	ldi	r24, 0xD9	; 217
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 26 03 	call	0x64c	; 0x64c <puts>

    // Test buffer and parameters
    unsigned char write_buffer[64];
    unsigned char read_buffer[64];
    unsigned int test_address = 0x10;
 428:	80 e1       	ldi	r24, 0x10	; 16
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	9c 83       	std	Y+4, r25	; 0x04
 42e:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char test_size = 16;
 430:	80 e1       	ldi	r24, 0x10	; 16
 432:	8d 83       	std	Y+5, r24	; 0x05

    // Fill the write buffer with test data
    for (unsigned char i = 0; i < test_size; i++) {
 434:	19 82       	std	Y+1, r1	; 0x01
 436:	10 c0       	rjmp	.+32     	; 0x458 <test_eeprom_operations+0x4e>
        write_buffer[i] = i + 1;  // Test data: 1, 2, 3, ..., 16
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	88 2f       	mov	r24, r24
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	29 81       	ldd	r18, Y+1	; 0x01
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	42 0f       	add	r20, r18
 444:	9e 01       	movw	r18, r28
 446:	2a 5f       	subi	r18, 0xFA	; 250
 448:	3f 4f       	sbci	r19, 0xFF	; 255
 44a:	82 0f       	add	r24, r18
 44c:	93 1f       	adc	r25, r19
 44e:	fc 01       	movw	r30, r24
 450:	40 83       	st	Z, r20
    unsigned char read_buffer[64];
    unsigned int test_address = 0x10;
    unsigned char test_size = 16;

    // Fill the write buffer with test data
    for (unsigned char i = 0; i < test_size; i++) {
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	89 83       	std	Y+1, r24	; 0x01
 458:	99 81       	ldd	r25, Y+1	; 0x01
 45a:	8d 81       	ldd	r24, Y+5	; 0x05
 45c:	98 17       	cp	r25, r24
 45e:	60 f3       	brcs	.-40     	; 0x438 <test_eeprom_operations+0x2e>
        write_buffer[i] = i + 1;  // Test data: 1, 2, 3, ..., 16
    }

    // Test 1: Write to EEPROM
    eeprom_writebuf(test_address, write_buffer, test_size);
 460:	9e 01       	movw	r18, r28
 462:	2a 5f       	subi	r18, 0xFA	; 250
 464:	3f 4f       	sbci	r19, 0xFF	; 255
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	9c 81       	ldd	r25, Y+4	; 0x04
 46a:	4d 81       	ldd	r20, Y+5	; 0x05
 46c:	b9 01       	movw	r22, r18
 46e:	0e 94 cc 00 	call	0x198	; 0x198 <eeprom_writebuf>
    // Ensure EEPROM is busy during the write
    assert(eeprom_isbusy() == 1);
 472:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <eeprom_isbusy>
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	11 f0       	breq	.+4      	; 0x47e <test_eeprom_operations+0x74>
 47a:	0e 94 02 03 	call	0x604	; 0x604 <abort>

    // Simulate the completion of the write
    while (eeprom_isbusy()) {
 47e:	00 00       	nop
 480:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <eeprom_isbusy>
 484:	89 2b       	or	r24, r25
 486:	e1 f7       	brne	.-8      	; 0x480 <test_eeprom_operations+0x76>
        // Simulated EEPROM interrupt-driven write occurs here
    }

    // Ensure EEPROM is no longer busy
    assert(eeprom_isbusy() == 0);
 488:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <eeprom_isbusy>
 48c:	89 2b       	or	r24, r25
 48e:	11 f0       	breq	.+4      	; 0x494 <test_eeprom_operations+0x8a>
 490:	0e 94 02 03 	call	0x604	; 0x604 <abort>

    // Test 2: Read back the data from EEPROM
    eeprom_readbuf(test_address, read_buffer, test_size);
 494:	9e 01       	movw	r18, r28
 496:	2a 5b       	subi	r18, 0xBA	; 186
 498:	3f 4f       	sbci	r19, 0xFF	; 255
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	9c 81       	ldd	r25, Y+4	; 0x04
 49e:	4d 81       	ldd	r20, Y+5	; 0x05
 4a0:	b9 01       	movw	r22, r18
 4a2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <eeprom_readbuf>

    // Validate that the read data matches the written data
    for (unsigned char i = 0; i < test_size; i++) {
 4a6:	1a 82       	std	Y+2, r1	; 0x02
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <test_eeprom_operations+0xd6>
        assert(read_buffer[i] == write_buffer[i]);
 4aa:	8a 81       	ldd	r24, Y+2	; 0x02
 4ac:	88 2f       	mov	r24, r24
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	9e 01       	movw	r18, r28
 4b2:	2a 5b       	subi	r18, 0xBA	; 186
 4b4:	3f 4f       	sbci	r19, 0xFF	; 255
 4b6:	82 0f       	add	r24, r18
 4b8:	93 1f       	adc	r25, r19
 4ba:	fc 01       	movw	r30, r24
 4bc:	40 81       	ld	r20, Z
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	88 2f       	mov	r24, r24
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	9e 01       	movw	r18, r28
 4c6:	2a 5f       	subi	r18, 0xFA	; 250
 4c8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ca:	82 0f       	add	r24, r18
 4cc:	93 1f       	adc	r25, r19
 4ce:	fc 01       	movw	r30, r24
 4d0:	80 81       	ld	r24, Z
 4d2:	48 17       	cp	r20, r24
 4d4:	11 f0       	breq	.+4      	; 0x4da <test_eeprom_operations+0xd0>
 4d6:	0e 94 02 03 	call	0x604	; 0x604 <abort>

    // Test 2: Read back the data from EEPROM
    eeprom_readbuf(test_address, read_buffer, test_size);

    // Validate that the read data matches the written data
    for (unsigned char i = 0; i < test_size; i++) {
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	8f 5f       	subi	r24, 0xFF	; 255
 4de:	8a 83       	std	Y+2, r24	; 0x02
 4e0:	9a 81       	ldd	r25, Y+2	; 0x02
 4e2:	8d 81       	ldd	r24, Y+5	; 0x05
 4e4:	98 17       	cp	r25, r24
 4e6:	08 f3       	brcs	.-62     	; 0x4aa <test_eeprom_operations+0xa0>
        assert(read_buffer[i] == write_buffer[i]);
    }

    printf("EEPROM Unit Test Passed!\n");
 4e8:	86 ef       	ldi	r24, 0xF6	; 246
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
}
 4f0:	00 00       	nop
 4f2:	cb 57       	subi	r28, 0x7B	; 123
 4f4:	df 4f       	sbci	r29, 0xFF	; 255
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	f8 94       	cli
 4fa:	de bf       	out	0x3e, r29	; 62
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	cd bf       	out	0x3d, r28	; 61
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <main>:


int main() {
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	00 d0       	rcall	.+0      	; 0x50c <main+0x6>
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
  // variable to track if the eeprom has been dumped
  int dumped = 0;
 510:	1a 82       	std	Y+2, r1	; 0x02
 512:	19 82       	std	Y+1, r1	; 0x01

  // set the config_use_static_ip to 1
  // set the config modified state
  // clear the event log
  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc
  test_eeprom_operations();
 514:	0e 94 05 02 	call	0x40a	; 0x40a <test_eeprom_operations>
  
  while(1) {
 518:	ff cf       	rjmp	.-2      	; 0x518 <main+0x12>

0000051a <read_vpd>:
struct vpd_struct vpd;
struct vpd_struct defaults = {"SER", "DaVonte", "Carter", "super1337", 0, {'D'&0xFE,'a','V','C','a','r'}, "USA", 0};

/********** private declarations **********/
/* read manufacturer data from eeprom */
void read_vpd() {
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
}
 522:	00 00       	nop
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <vpd_init>:

int cmp_str(const char *str1, const char *str2) ;


/********** public definitions **********/
void vpd_init() {
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	cd b7       	in	r28, 0x3d	; 61
 530:	de b7       	in	r29, 0x3e	; 62
  // wait for the eeprom to free up
  while(eeprom_isbusy());
 532:	00 00       	nop
 534:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <eeprom_isbusy>
 538:	89 2b       	or	r24, r25
 53a:	e1 f7       	brne	.-8      	; 0x534 <vpd_init+0xa>
  
  /* read all data from the EEPROM at address 0x000 */

  /* if the data was invalid then write defaults and try to reinitialize */
  while(!vpd_is_data_valid()) {
 53c:	00 00       	nop
 53e:	0e 94 af 02 	call	0x55e	; 0x55e <vpd_is_data_valid>
 542:	89 2b       	or	r24, r25
 544:	e1 f3       	breq	.-8      	; 0x53e <vpd_init+0x14>
    // initialize data from defaults
    // read defaults
  }
}
 546:	00 00       	nop
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <vpd_write_defaults>:

void vpd_write_defaults() {
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
  /* update checksum for defaults */
  
  /* write the defaults */


}
 556:	00 00       	nop
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <vpd_is_data_valid>:

int vpd_is_data_valid() {
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	cd b7       	in	r28, 0x3d	; 61
 564:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(vpd.token, "SER");
 566:	6f e0       	ldi	r22, 0x0F	; 15
 568:	72 e0       	ldi	r23, 0x02	; 2
 56a:	8c e2       	ldi	r24, 0x2C	; 44
 56c:	94 e0       	ldi	r25, 0x04	; 4
 56e:	0e 94 bc 02 	call	0x578	; 0x578 <cmp_str>
    // return (vpd.token == "SER") && is_checksum_valid();

}
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <cmp_str>:

/********** private definitions **********/

int cmp_str(const char *str1, const char *str2) {
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	00 d0       	rcall	.+0      	; 0x57e <cmp_str+0x6>
 57e:	00 d0       	rcall	.+0      	; 0x580 <cmp_str+0x8>
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	9a 83       	std	Y+2, r25	; 0x02
 586:	89 83       	std	Y+1, r24	; 0x01
 588:	7c 83       	std	Y+4, r23	; 0x04
 58a:	6b 83       	std	Y+3, r22	; 0x03
  while (*str1 && *str2) {
 58c:	17 c0       	rjmp	.+46     	; 0x5bc <cmp_str+0x44>
    if (*str1 != *str2) {
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	9a 81       	ldd	r25, Y+2	; 0x02
 592:	fc 01       	movw	r30, r24
 594:	20 81       	ld	r18, Z
 596:	8b 81       	ldd	r24, Y+3	; 0x03
 598:	9c 81       	ldd	r25, Y+4	; 0x04
 59a:	fc 01       	movw	r30, r24
 59c:	80 81       	ld	r24, Z
 59e:	28 17       	cp	r18, r24
 5a0:	19 f0       	breq	.+6      	; 0x5a8 <cmp_str+0x30>
      return 0;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	27 c0       	rjmp	.+78     	; 0x5f6 <cmp_str+0x7e>
    }
    str1++;
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	9a 81       	ldd	r25, Y+2	; 0x02
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	9a 83       	std	Y+2, r25	; 0x02
 5b0:	89 83       	std	Y+1, r24	; 0x01
    str2++;
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	9c 81       	ldd	r25, Y+4	; 0x04
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	9c 83       	std	Y+4, r25	; 0x04
 5ba:	8b 83       	std	Y+3, r24	; 0x03
}

/********** private definitions **********/

int cmp_str(const char *str1, const char *str2) {
  while (*str1 && *str2) {
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	9a 81       	ldd	r25, Y+2	; 0x02
 5c0:	fc 01       	movw	r30, r24
 5c2:	80 81       	ld	r24, Z
 5c4:	88 23       	and	r24, r24
 5c6:	31 f0       	breq	.+12     	; 0x5d4 <cmp_str+0x5c>
 5c8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ca:	9c 81       	ldd	r25, Y+4	; 0x04
 5cc:	fc 01       	movw	r30, r24
 5ce:	80 81       	ld	r24, Z
 5d0:	88 23       	and	r24, r24
 5d2:	e9 f6       	brne	.-70     	; 0x58e <cmp_str+0x16>
      return 0;
    }
    str1++;
    str2++;
  }
  return *str1 == '\0' && *str2 == '\0';
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	9a 81       	ldd	r25, Y+2	; 0x02
 5d8:	fc 01       	movw	r30, r24
 5da:	80 81       	ld	r24, Z
 5dc:	88 23       	and	r24, r24
 5de:	49 f4       	brne	.+18     	; 0x5f2 <cmp_str+0x7a>
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	9c 81       	ldd	r25, Y+4	; 0x04
 5e4:	fc 01       	movw	r30, r24
 5e6:	80 81       	ld	r24, Z
 5e8:	88 23       	and	r24, r24
 5ea:	19 f4       	brne	.+6      	; 0x5f2 <cmp_str+0x7a>
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <cmp_str+0x7e>
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0f 90       	pop	r0
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	0f 90       	pop	r0
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <abort>:
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	f8 94       	cli
 60a:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <_exit>

0000060e <memcpy>:
 60e:	fb 01       	movw	r30, r22
 610:	dc 01       	movw	r26, r24
 612:	02 c0       	rjmp	.+4      	; 0x618 <memcpy+0xa>
 614:	01 90       	ld	r0, Z+
 616:	0d 92       	st	X+, r0
 618:	41 50       	subi	r20, 0x01	; 1
 61a:	50 40       	sbci	r21, 0x00	; 0
 61c:	d8 f7       	brcc	.-10     	; 0x614 <memcpy+0x6>
 61e:	08 95       	ret

00000620 <printf>:
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	a0 e0       	ldi	r26, 0x00	; 0
 624:	e6 e1       	ldi	r30, 0x16	; 22
 626:	f3 e0       	ldi	r31, 0x03	; 3
 628:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__prologue_saves__+0x20>
 62c:	ae 01       	movw	r20, r28
 62e:	4b 5f       	subi	r20, 0xFB	; 251
 630:	5f 4f       	sbci	r21, 0xFF	; 255
 632:	fa 01       	movw	r30, r20
 634:	61 91       	ld	r22, Z+
 636:	71 91       	ld	r23, Z+
 638:	af 01       	movw	r20, r30
 63a:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <__iob+0x2>
 63e:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <__iob+0x3>
 642:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vfprintf>
 646:	e2 e0       	ldi	r30, 0x02	; 2
 648:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__epilogue_restores__+0x20>

0000064c <puts>:
 64c:	0f 93       	push	r16
 64e:	1f 93       	push	r17
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	e0 91 65 04 	lds	r30, 0x0465	; 0x800465 <__iob+0x2>
 658:	f0 91 66 04 	lds	r31, 0x0466	; 0x800466 <__iob+0x3>
 65c:	23 81       	ldd	r18, Z+3	; 0x03
 65e:	ec 01       	movw	r28, r24
 660:	10 e0       	ldi	r17, 0x00	; 0
 662:	00 e0       	ldi	r16, 0x00	; 0
 664:	21 fd       	sbrc	r18, 1
 666:	08 c0       	rjmp	.+16     	; 0x678 <puts+0x2c>
 668:	0f ef       	ldi	r16, 0xFF	; 255
 66a:	1f ef       	ldi	r17, 0xFF	; 255
 66c:	14 c0       	rjmp	.+40     	; 0x696 <puts+0x4a>
 66e:	09 95       	icall
 670:	89 2b       	or	r24, r25
 672:	11 f0       	breq	.+4      	; 0x678 <puts+0x2c>
 674:	0f ef       	ldi	r16, 0xFF	; 255
 676:	1f ef       	ldi	r17, 0xFF	; 255
 678:	89 91       	ld	r24, Y+
 67a:	60 91 65 04 	lds	r22, 0x0465	; 0x800465 <__iob+0x2>
 67e:	70 91 66 04 	lds	r23, 0x0466	; 0x800466 <__iob+0x3>
 682:	db 01       	movw	r26, r22
 684:	18 96       	adiw	r26, 0x08	; 8
 686:	ed 91       	ld	r30, X+
 688:	fc 91       	ld	r31, X
 68a:	81 11       	cpse	r24, r1
 68c:	f0 cf       	rjmp	.-32     	; 0x66e <puts+0x22>
 68e:	8a e0       	ldi	r24, 0x0A	; 10
 690:	09 95       	icall
 692:	89 2b       	or	r24, r25
 694:	49 f7       	brne	.-46     	; 0x668 <puts+0x1c>
 696:	c8 01       	movw	r24, r16
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	08 95       	ret

000006a2 <vfprintf>:
 6a2:	ab e0       	ldi	r26, 0x0B	; 11
 6a4:	b0 e0       	ldi	r27, 0x00	; 0
 6a6:	e7 e5       	ldi	r30, 0x57	; 87
 6a8:	f3 e0       	ldi	r31, 0x03	; 3
 6aa:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__prologue_saves__>
 6ae:	7c 01       	movw	r14, r24
 6b0:	3b 01       	movw	r6, r22
 6b2:	8a 01       	movw	r16, r20
 6b4:	fc 01       	movw	r30, r24
 6b6:	17 82       	std	Z+7, r1	; 0x07
 6b8:	16 82       	std	Z+6, r1	; 0x06
 6ba:	83 81       	ldd	r24, Z+3	; 0x03
 6bc:	81 ff       	sbrs	r24, 1
 6be:	c8 c1       	rjmp	.+912    	; 0xa50 <__stack+0x151>
 6c0:	ce 01       	movw	r24, r28
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	5c 01       	movw	r10, r24
 6c6:	f7 01       	movw	r30, r14
 6c8:	93 81       	ldd	r25, Z+3	; 0x03
 6ca:	f3 01       	movw	r30, r6
 6cc:	93 fd       	sbrc	r25, 3
 6ce:	85 91       	lpm	r24, Z+
 6d0:	93 ff       	sbrs	r25, 3
 6d2:	81 91       	ld	r24, Z+
 6d4:	3f 01       	movw	r6, r30
 6d6:	88 23       	and	r24, r24
 6d8:	09 f4       	brne	.+2      	; 0x6dc <vfprintf+0x3a>
 6da:	53 c1       	rjmp	.+678    	; 0x982 <__stack+0x83>
 6dc:	85 32       	cpi	r24, 0x25	; 37
 6de:	39 f4       	brne	.+14     	; 0x6ee <vfprintf+0x4c>
 6e0:	93 fd       	sbrc	r25, 3
 6e2:	85 91       	lpm	r24, Z+
 6e4:	93 ff       	sbrs	r25, 3
 6e6:	81 91       	ld	r24, Z+
 6e8:	3f 01       	movw	r6, r30
 6ea:	85 32       	cpi	r24, 0x25	; 37
 6ec:	29 f4       	brne	.+10     	; 0x6f8 <vfprintf+0x56>
 6ee:	b7 01       	movw	r22, r14
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 41 05 	call	0xa82	; 0xa82 <fputc>
 6f6:	e7 cf       	rjmp	.-50     	; 0x6c6 <vfprintf+0x24>
 6f8:	91 2c       	mov	r9, r1
 6fa:	21 2c       	mov	r2, r1
 6fc:	31 2c       	mov	r3, r1
 6fe:	ff e1       	ldi	r31, 0x1F	; 31
 700:	f3 15       	cp	r31, r3
 702:	38 f0       	brcs	.+14     	; 0x712 <vfprintf+0x70>
 704:	8b 32       	cpi	r24, 0x2B	; 43
 706:	11 f1       	breq	.+68     	; 0x74c <vfprintf+0xaa>
 708:	90 f4       	brcc	.+36     	; 0x72e <vfprintf+0x8c>
 70a:	80 32       	cpi	r24, 0x20	; 32
 70c:	09 f1       	breq	.+66     	; 0x750 <vfprintf+0xae>
 70e:	83 32       	cpi	r24, 0x23	; 35
 710:	29 f1       	breq	.+74     	; 0x75c <vfprintf+0xba>
 712:	37 fc       	sbrc	r3, 7
 714:	3c c0       	rjmp	.+120    	; 0x78e <vfprintf+0xec>
 716:	20 ed       	ldi	r18, 0xD0	; 208
 718:	28 0f       	add	r18, r24
 71a:	2a 30       	cpi	r18, 0x0A	; 10
 71c:	50 f5       	brcc	.+84     	; 0x772 <vfprintf+0xd0>
 71e:	36 fe       	sbrs	r3, 6
 720:	20 c0       	rjmp	.+64     	; 0x762 <vfprintf+0xc0>
 722:	8a e0       	ldi	r24, 0x0A	; 10
 724:	98 9e       	mul	r9, r24
 726:	20 0d       	add	r18, r0
 728:	11 24       	eor	r1, r1
 72a:	92 2e       	mov	r9, r18
 72c:	06 c0       	rjmp	.+12     	; 0x73a <vfprintf+0x98>
 72e:	8d 32       	cpi	r24, 0x2D	; 45
 730:	91 f0       	breq	.+36     	; 0x756 <vfprintf+0xb4>
 732:	80 33       	cpi	r24, 0x30	; 48
 734:	71 f7       	brne	.-36     	; 0x712 <vfprintf+0x70>
 736:	68 94       	set
 738:	30 f8       	bld	r3, 0
 73a:	f3 01       	movw	r30, r6
 73c:	93 fd       	sbrc	r25, 3
 73e:	85 91       	lpm	r24, Z+
 740:	93 ff       	sbrs	r25, 3
 742:	81 91       	ld	r24, Z+
 744:	3f 01       	movw	r6, r30
 746:	81 11       	cpse	r24, r1
 748:	da cf       	rjmp	.-76     	; 0x6fe <vfprintf+0x5c>
 74a:	21 c0       	rjmp	.+66     	; 0x78e <vfprintf+0xec>
 74c:	68 94       	set
 74e:	31 f8       	bld	r3, 1
 750:	68 94       	set
 752:	32 f8       	bld	r3, 2
 754:	f2 cf       	rjmp	.-28     	; 0x73a <vfprintf+0x98>
 756:	68 94       	set
 758:	33 f8       	bld	r3, 3
 75a:	ef cf       	rjmp	.-34     	; 0x73a <vfprintf+0x98>
 75c:	68 94       	set
 75e:	34 f8       	bld	r3, 4
 760:	ec cf       	rjmp	.-40     	; 0x73a <vfprintf+0x98>
 762:	ea e0       	ldi	r30, 0x0A	; 10
 764:	2e 9e       	mul	r2, r30
 766:	20 0d       	add	r18, r0
 768:	11 24       	eor	r1, r1
 76a:	22 2e       	mov	r2, r18
 76c:	68 94       	set
 76e:	35 f8       	bld	r3, 5
 770:	e4 cf       	rjmp	.-56     	; 0x73a <vfprintf+0x98>
 772:	8e 32       	cpi	r24, 0x2E	; 46
 774:	29 f4       	brne	.+10     	; 0x780 <vfprintf+0xde>
 776:	36 fc       	sbrc	r3, 6
 778:	04 c1       	rjmp	.+520    	; 0x982 <__stack+0x83>
 77a:	68 94       	set
 77c:	36 f8       	bld	r3, 6
 77e:	dd cf       	rjmp	.-70     	; 0x73a <vfprintf+0x98>
 780:	8c 36       	cpi	r24, 0x6C	; 108
 782:	19 f4       	brne	.+6      	; 0x78a <vfprintf+0xe8>
 784:	68 94       	set
 786:	37 f8       	bld	r3, 7
 788:	d8 cf       	rjmp	.-80     	; 0x73a <vfprintf+0x98>
 78a:	88 36       	cpi	r24, 0x68	; 104
 78c:	b1 f2       	breq	.-84     	; 0x73a <vfprintf+0x98>
 78e:	98 2f       	mov	r25, r24
 790:	9f 7d       	andi	r25, 0xDF	; 223
 792:	95 54       	subi	r25, 0x45	; 69
 794:	93 30       	cpi	r25, 0x03	; 3
 796:	e0 f0       	brcs	.+56     	; 0x7d0 <vfprintf+0x12e>
 798:	83 36       	cpi	r24, 0x63	; 99
 79a:	a1 f1       	breq	.+104    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 79c:	83 37       	cpi	r24, 0x73	; 115
 79e:	c1 f1       	breq	.+112    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7a0:	83 35       	cpi	r24, 0x53	; 83
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <vfprintf+0x104>
 7a4:	63 c0       	rjmp	.+198    	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 7a6:	28 01       	movw	r4, r16
 7a8:	f2 e0       	ldi	r31, 0x02	; 2
 7aa:	4f 0e       	add	r4, r31
 7ac:	51 1c       	adc	r5, r1
 7ae:	f8 01       	movw	r30, r16
 7b0:	c0 80       	ld	r12, Z
 7b2:	d1 80       	ldd	r13, Z+1	; 0x01
 7b4:	69 2d       	mov	r22, r9
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	36 fc       	sbrc	r3, 6
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <vfprintf+0x11e>
 7bc:	6f ef       	ldi	r22, 0xFF	; 255
 7be:	7f ef       	ldi	r23, 0xFF	; 255
 7c0:	c6 01       	movw	r24, r12
 7c2:	0e 94 2b 05 	call	0xa56	; 0xa56 <strnlen_P>
 7c6:	4c 01       	movw	r8, r24
 7c8:	68 94       	set
 7ca:	37 f8       	bld	r3, 7
 7cc:	82 01       	movw	r16, r4
 7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <vfprintf+0x142>
 7d0:	0c 5f       	subi	r16, 0xFC	; 252
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	ff e3       	ldi	r31, 0x3F	; 63
 7d6:	f9 83       	std	Y+1, r31	; 0x01
 7d8:	88 24       	eor	r8, r8
 7da:	83 94       	inc	r8
 7dc:	91 2c       	mov	r9, r1
 7de:	65 01       	movw	r12, r10
 7e0:	e8 94       	clt
 7e2:	37 f8       	bld	r3, 7
 7e4:	33 fe       	sbrs	r3, 3
 7e6:	2d c0       	rjmp	.+90     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7e8:	52 2c       	mov	r5, r2
 7ea:	81 14       	cp	r8, r1
 7ec:	91 04       	cpc	r9, r1
 7ee:	71 f5       	brne	.+92     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 7f0:	55 20       	and	r5, r5
 7f2:	09 f4       	brne	.+2      	; 0x7f6 <vfprintf+0x154>
 7f4:	68 cf       	rjmp	.-304    	; 0x6c6 <vfprintf+0x24>
 7f6:	b7 01       	movw	r22, r14
 7f8:	80 e2       	ldi	r24, 0x20	; 32
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 41 05 	call	0xa82	; 0xa82 <fputc>
 800:	5a 94       	dec	r5
 802:	f6 cf       	rjmp	.-20     	; 0x7f0 <vfprintf+0x14e>
 804:	f8 01       	movw	r30, r16
 806:	80 81       	ld	r24, Z
 808:	89 83       	std	Y+1, r24	; 0x01
 80a:	0e 5f       	subi	r16, 0xFE	; 254
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	e4 cf       	rjmp	.-56     	; 0x7d8 <vfprintf+0x136>
 810:	28 01       	movw	r4, r16
 812:	f2 e0       	ldi	r31, 0x02	; 2
 814:	4f 0e       	add	r4, r31
 816:	51 1c       	adc	r5, r1
 818:	f8 01       	movw	r30, r16
 81a:	c0 80       	ld	r12, Z
 81c:	d1 80       	ldd	r13, Z+1	; 0x01
 81e:	69 2d       	mov	r22, r9
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	36 fc       	sbrc	r3, 6
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	6f ef       	ldi	r22, 0xFF	; 255
 828:	7f ef       	ldi	r23, 0xFF	; 255
 82a:	c6 01       	movw	r24, r12
 82c:	0e 94 36 05 	call	0xa6c	; 0xa6c <strnlen>
 830:	4c 01       	movw	r8, r24
 832:	82 01       	movw	r16, r4
 834:	d5 cf       	rjmp	.-86     	; 0x7e0 <vfprintf+0x13e>
 836:	b7 01       	movw	r22, r14
 838:	80 e2       	ldi	r24, 0x20	; 32
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 41 05 	call	0xa82	; 0xa82 <fputc>
 840:	2a 94       	dec	r2
 842:	28 14       	cp	r2, r8
 844:	19 04       	cpc	r1, r9
 846:	09 f0       	breq	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 848:	b0 f7       	brcc	.-20     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 84a:	ce cf       	rjmp	.-100    	; 0x7e8 <vfprintf+0x146>
 84c:	f6 01       	movw	r30, r12
 84e:	37 fc       	sbrc	r3, 7
 850:	85 91       	lpm	r24, Z+
 852:	37 fe       	sbrs	r3, 7
 854:	81 91       	ld	r24, Z+
 856:	6f 01       	movw	r12, r30
 858:	b7 01       	movw	r22, r14
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 41 05 	call	0xa82	; 0xa82 <fputc>
 860:	51 10       	cpse	r5, r1
 862:	5a 94       	dec	r5
 864:	f1 e0       	ldi	r31, 0x01	; 1
 866:	8f 1a       	sub	r8, r31
 868:	91 08       	sbc	r9, r1
 86a:	bf cf       	rjmp	.-130    	; 0x7ea <vfprintf+0x148>
 86c:	84 36       	cpi	r24, 0x64	; 100
 86e:	19 f0       	breq	.+6      	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 870:	89 36       	cpi	r24, 0x69	; 105
 872:	09 f0       	breq	.+2      	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 874:	77 c0       	rjmp	.+238    	; 0x964 <__stack+0x65>
 876:	f8 01       	movw	r30, r16
 878:	37 fe       	sbrs	r3, 7
 87a:	6b c0       	rjmp	.+214    	; 0x952 <__stack+0x53>
 87c:	60 81       	ld	r22, Z
 87e:	71 81       	ldd	r23, Z+1	; 0x01
 880:	82 81       	ldd	r24, Z+2	; 0x02
 882:	93 81       	ldd	r25, Z+3	; 0x03
 884:	0c 5f       	subi	r16, 0xFC	; 252
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	f3 2d       	mov	r31, r3
 88a:	ff 76       	andi	r31, 0x6F	; 111
 88c:	3f 2e       	mov	r3, r31
 88e:	97 ff       	sbrs	r25, 7
 890:	09 c0       	rjmp	.+18     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 892:	90 95       	com	r25
 894:	80 95       	com	r24
 896:	70 95       	com	r23
 898:	61 95       	neg	r22
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	68 94       	set
 8a2:	37 f8       	bld	r3, 7
 8a4:	2a e0       	ldi	r18, 0x0A	; 10
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	a5 01       	movw	r20, r10
 8aa:	0e 94 71 05 	call	0xae2	; 0xae2 <__ultoa_invert>
 8ae:	c8 2e       	mov	r12, r24
 8b0:	ca 18       	sub	r12, r10
 8b2:	8c 2c       	mov	r8, r12
 8b4:	43 2c       	mov	r4, r3
 8b6:	36 fe       	sbrs	r3, 6
 8b8:	0c c0       	rjmp	.+24     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8ba:	e8 94       	clt
 8bc:	40 f8       	bld	r4, 0
 8be:	c9 14       	cp	r12, r9
 8c0:	40 f4       	brcc	.+16     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8c2:	34 fe       	sbrs	r3, 4
 8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8c6:	32 fc       	sbrc	r3, 2
 8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8ca:	f3 2d       	mov	r31, r3
 8cc:	fe 7e       	andi	r31, 0xEE	; 238
 8ce:	4f 2e       	mov	r4, r31
 8d0:	89 2c       	mov	r8, r9
 8d2:	44 fe       	sbrs	r4, 4
 8d4:	95 c0       	rjmp	.+298    	; 0xa00 <__stack+0x101>
 8d6:	fe 01       	movw	r30, r28
 8d8:	ec 0d       	add	r30, r12
 8da:	f1 1d       	adc	r31, r1
 8dc:	80 81       	ld	r24, Z
 8de:	80 33       	cpi	r24, 0x30	; 48
 8e0:	09 f0       	breq	.+2      	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8e2:	87 c0       	rjmp	.+270    	; 0x9f2 <__stack+0xf3>
 8e4:	24 2d       	mov	r18, r4
 8e6:	29 7e       	andi	r18, 0xE9	; 233
 8e8:	42 2e       	mov	r4, r18
 8ea:	84 2d       	mov	r24, r4
 8ec:	88 70       	andi	r24, 0x08	; 8
 8ee:	58 2e       	mov	r5, r24
 8f0:	43 fc       	sbrc	r4, 3
 8f2:	95 c0       	rjmp	.+298    	; 0xa1e <__stack+0x11f>
 8f4:	40 fe       	sbrs	r4, 0
 8f6:	8f c0       	rjmp	.+286    	; 0xa16 <__stack+0x117>
 8f8:	9c 2c       	mov	r9, r12
 8fa:	82 14       	cp	r8, r2
 8fc:	18 f4       	brcc	.+6      	; 0x904 <__stack+0x5>
 8fe:	2c 0c       	add	r2, r12
 900:	92 2c       	mov	r9, r2
 902:	98 18       	sub	r9, r8
 904:	44 fe       	sbrs	r4, 4
 906:	91 c0       	rjmp	.+290    	; 0xa2a <__stack+0x12b>
 908:	b7 01       	movw	r22, r14
 90a:	80 e3       	ldi	r24, 0x30	; 48
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 41 05 	call	0xa82	; 0xa82 <fputc>
 912:	42 fe       	sbrs	r4, 2
 914:	09 c0       	rjmp	.+18     	; 0x928 <__stack+0x29>
 916:	88 e7       	ldi	r24, 0x78	; 120
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	41 fe       	sbrs	r4, 1
 91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
 91e:	88 e5       	ldi	r24, 0x58	; 88
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	b7 01       	movw	r22, r14
 924:	0e 94 41 05 	call	0xa82	; 0xa82 <fputc>
 928:	c9 14       	cp	r12, r9
 92a:	08 f4       	brcc	.+2      	; 0x92e <__stack+0x2f>
 92c:	8a c0       	rjmp	.+276    	; 0xa42 <__stack+0x143>
 92e:	ca 94       	dec	r12
 930:	d1 2c       	mov	r13, r1
 932:	9f ef       	ldi	r25, 0xFF	; 255
 934:	c9 1a       	sub	r12, r25
 936:	d9 0a       	sbc	r13, r25
 938:	ca 0c       	add	r12, r10
 93a:	db 1c       	adc	r13, r11
 93c:	f6 01       	movw	r30, r12
 93e:	82 91       	ld	r24, -Z
 940:	6f 01       	movw	r12, r30
 942:	b7 01       	movw	r22, r14
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 94 41 05 	call	0xa82	; 0xa82 <fputc>
 94a:	ac 14       	cp	r10, r12
 94c:	bd 04       	cpc	r11, r13
 94e:	b1 f7       	brne	.-20     	; 0x93c <__stack+0x3d>
 950:	4f cf       	rjmp	.-354    	; 0x7f0 <vfprintf+0x14e>
 952:	60 81       	ld	r22, Z
 954:	71 81       	ldd	r23, Z+1	; 0x01
 956:	07 2e       	mov	r0, r23
 958:	00 0c       	add	r0, r0
 95a:	88 0b       	sbc	r24, r24
 95c:	99 0b       	sbc	r25, r25
 95e:	0e 5f       	subi	r16, 0xFE	; 254
 960:	1f 4f       	sbci	r17, 0xFF	; 255
 962:	92 cf       	rjmp	.-220    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 964:	d3 2c       	mov	r13, r3
 966:	e8 94       	clt
 968:	d4 f8       	bld	r13, 4
 96a:	2a e0       	ldi	r18, 0x0A	; 10
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	85 37       	cpi	r24, 0x75	; 117
 970:	39 f1       	breq	.+78     	; 0x9c0 <__stack+0xc1>
 972:	23 2d       	mov	r18, r3
 974:	29 7f       	andi	r18, 0xF9	; 249
 976:	d2 2e       	mov	r13, r18
 978:	8f 36       	cpi	r24, 0x6F	; 111
 97a:	01 f1       	breq	.+64     	; 0x9bc <__stack+0xbd>
 97c:	48 f4       	brcc	.+18     	; 0x990 <__stack+0x91>
 97e:	88 35       	cpi	r24, 0x58	; 88
 980:	a9 f0       	breq	.+42     	; 0x9ac <__stack+0xad>
 982:	f7 01       	movw	r30, r14
 984:	86 81       	ldd	r24, Z+6	; 0x06
 986:	97 81       	ldd	r25, Z+7	; 0x07
 988:	2b 96       	adiw	r28, 0x0b	; 11
 98a:	e2 e1       	ldi	r30, 0x12	; 18
 98c:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__epilogue_restores__>
 990:	80 37       	cpi	r24, 0x70	; 112
 992:	49 f0       	breq	.+18     	; 0x9a6 <__stack+0xa7>
 994:	88 37       	cpi	r24, 0x78	; 120
 996:	a9 f7       	brne	.-22     	; 0x982 <__stack+0x83>
 998:	d4 fe       	sbrs	r13, 4
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__stack+0xa1>
 99c:	68 94       	set
 99e:	d2 f8       	bld	r13, 2
 9a0:	20 e1       	ldi	r18, 0x10	; 16
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	0d c0       	rjmp	.+26     	; 0x9c0 <__stack+0xc1>
 9a6:	68 94       	set
 9a8:	d4 f8       	bld	r13, 4
 9aa:	f6 cf       	rjmp	.-20     	; 0x998 <__stack+0x99>
 9ac:	34 fe       	sbrs	r3, 4
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
 9b0:	82 2f       	mov	r24, r18
 9b2:	86 60       	ori	r24, 0x06	; 6
 9b4:	d8 2e       	mov	r13, r24
 9b6:	20 e1       	ldi	r18, 0x10	; 16
 9b8:	32 e0       	ldi	r19, 0x02	; 2
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0xc1>
 9bc:	28 e0       	ldi	r18, 0x08	; 8
 9be:	30 e0       	ldi	r19, 0x00	; 0
 9c0:	f8 01       	movw	r30, r16
 9c2:	d7 fe       	sbrs	r13, 7
 9c4:	0f c0       	rjmp	.+30     	; 0x9e4 <__stack+0xe5>
 9c6:	60 81       	ld	r22, Z
 9c8:	71 81       	ldd	r23, Z+1	; 0x01
 9ca:	82 81       	ldd	r24, Z+2	; 0x02
 9cc:	93 81       	ldd	r25, Z+3	; 0x03
 9ce:	0c 5f       	subi	r16, 0xFC	; 252
 9d0:	1f 4f       	sbci	r17, 0xFF	; 255
 9d2:	a5 01       	movw	r20, r10
 9d4:	0e 94 71 05 	call	0xae2	; 0xae2 <__ultoa_invert>
 9d8:	c8 2e       	mov	r12, r24
 9da:	ca 18       	sub	r12, r10
 9dc:	3d 2c       	mov	r3, r13
 9de:	e8 94       	clt
 9e0:	37 f8       	bld	r3, 7
 9e2:	67 cf       	rjmp	.-306    	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 9e4:	60 81       	ld	r22, Z
 9e6:	71 81       	ldd	r23, Z+1	; 0x01
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	0e 5f       	subi	r16, 0xFE	; 254
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	f0 cf       	rjmp	.-32     	; 0x9d2 <__stack+0xd3>
 9f2:	42 fc       	sbrc	r4, 2
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <__stack+0xfb>
 9f6:	83 94       	inc	r8
 9f8:	78 cf       	rjmp	.-272    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 9fa:	83 94       	inc	r8
 9fc:	83 94       	inc	r8
 9fe:	75 cf       	rjmp	.-278    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 a00:	84 2d       	mov	r24, r4
 a02:	86 78       	andi	r24, 0x86	; 134
 a04:	09 f4       	brne	.+2      	; 0xa08 <__stack+0x109>
 a06:	71 cf       	rjmp	.-286    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 a08:	f6 cf       	rjmp	.-20     	; 0x9f6 <__stack+0xf7>
 a0a:	b7 01       	movw	r22, r14
 a0c:	80 e2       	ldi	r24, 0x20	; 32
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 41 05 	call	0xa82	; 0xa82 <fputc>
 a14:	83 94       	inc	r8
 a16:	82 14       	cp	r8, r2
 a18:	c0 f3       	brcs	.-16     	; 0xa0a <__stack+0x10b>
 a1a:	51 2c       	mov	r5, r1
 a1c:	73 cf       	rjmp	.-282    	; 0x904 <__stack+0x5>
 a1e:	52 2c       	mov	r5, r2
 a20:	58 18       	sub	r5, r8
 a22:	82 14       	cp	r8, r2
 a24:	08 f4       	brcc	.+2      	; 0xa28 <__stack+0x129>
 a26:	6e cf       	rjmp	.-292    	; 0x904 <__stack+0x5>
 a28:	f8 cf       	rjmp	.-16     	; 0xa1a <__stack+0x11b>
 a2a:	84 2d       	mov	r24, r4
 a2c:	86 78       	andi	r24, 0x86	; 134
 a2e:	09 f4       	brne	.+2      	; 0xa32 <__stack+0x133>
 a30:	7b cf       	rjmp	.-266    	; 0x928 <__stack+0x29>
 a32:	8b e2       	ldi	r24, 0x2B	; 43
 a34:	41 fe       	sbrs	r4, 1
 a36:	80 e2       	ldi	r24, 0x20	; 32
 a38:	47 fc       	sbrc	r4, 7
 a3a:	8d e2       	ldi	r24, 0x2D	; 45
 a3c:	b7 01       	movw	r22, r14
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	71 cf       	rjmp	.-286    	; 0x924 <__stack+0x25>
 a42:	b7 01       	movw	r22, r14
 a44:	80 e3       	ldi	r24, 0x30	; 48
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 41 05 	call	0xa82	; 0xa82 <fputc>
 a4c:	9a 94       	dec	r9
 a4e:	6c cf       	rjmp	.-296    	; 0x928 <__stack+0x29>
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	99 cf       	rjmp	.-206    	; 0x988 <__stack+0x89>

00000a56 <strnlen_P>:
 a56:	fc 01       	movw	r30, r24
 a58:	05 90       	lpm	r0, Z+
 a5a:	61 50       	subi	r22, 0x01	; 1
 a5c:	70 40       	sbci	r23, 0x00	; 0
 a5e:	01 10       	cpse	r0, r1
 a60:	d8 f7       	brcc	.-10     	; 0xa58 <strnlen_P+0x2>
 a62:	80 95       	com	r24
 a64:	90 95       	com	r25
 a66:	8e 0f       	add	r24, r30
 a68:	9f 1f       	adc	r25, r31
 a6a:	08 95       	ret

00000a6c <strnlen>:
 a6c:	fc 01       	movw	r30, r24
 a6e:	61 50       	subi	r22, 0x01	; 1
 a70:	70 40       	sbci	r23, 0x00	; 0
 a72:	01 90       	ld	r0, Z+
 a74:	01 10       	cpse	r0, r1
 a76:	d8 f7       	brcc	.-10     	; 0xa6e <strnlen+0x2>
 a78:	80 95       	com	r24
 a7a:	90 95       	com	r25
 a7c:	8e 0f       	add	r24, r30
 a7e:	9f 1f       	adc	r25, r31
 a80:	08 95       	ret

00000a82 <fputc>:
 a82:	0f 93       	push	r16
 a84:	1f 93       	push	r17
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	18 2f       	mov	r17, r24
 a8c:	09 2f       	mov	r16, r25
 a8e:	eb 01       	movw	r28, r22
 a90:	8b 81       	ldd	r24, Y+3	; 0x03
 a92:	81 fd       	sbrc	r24, 1
 a94:	09 c0       	rjmp	.+18     	; 0xaa8 <fputc+0x26>
 a96:	1f ef       	ldi	r17, 0xFF	; 255
 a98:	0f ef       	ldi	r16, 0xFF	; 255
 a9a:	81 2f       	mov	r24, r17
 a9c:	90 2f       	mov	r25, r16
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	1f 91       	pop	r17
 aa4:	0f 91       	pop	r16
 aa6:	08 95       	ret
 aa8:	82 ff       	sbrs	r24, 2
 aaa:	14 c0       	rjmp	.+40     	; 0xad4 <fputc+0x52>
 aac:	2e 81       	ldd	r18, Y+6	; 0x06
 aae:	3f 81       	ldd	r19, Y+7	; 0x07
 ab0:	8c 81       	ldd	r24, Y+4	; 0x04
 ab2:	9d 81       	ldd	r25, Y+5	; 0x05
 ab4:	28 17       	cp	r18, r24
 ab6:	39 07       	cpc	r19, r25
 ab8:	3c f4       	brge	.+14     	; 0xac8 <fputc+0x46>
 aba:	e8 81       	ld	r30, Y
 abc:	f9 81       	ldd	r31, Y+1	; 0x01
 abe:	cf 01       	movw	r24, r30
 ac0:	01 96       	adiw	r24, 0x01	; 1
 ac2:	99 83       	std	Y+1, r25	; 0x01
 ac4:	88 83       	st	Y, r24
 ac6:	10 83       	st	Z, r17
 ac8:	8e 81       	ldd	r24, Y+6	; 0x06
 aca:	9f 81       	ldd	r25, Y+7	; 0x07
 acc:	01 96       	adiw	r24, 0x01	; 1
 ace:	9f 83       	std	Y+7, r25	; 0x07
 ad0:	8e 83       	std	Y+6, r24	; 0x06
 ad2:	e3 cf       	rjmp	.-58     	; 0xa9a <fputc+0x18>
 ad4:	e8 85       	ldd	r30, Y+8	; 0x08
 ad6:	f9 85       	ldd	r31, Y+9	; 0x09
 ad8:	81 2f       	mov	r24, r17
 ada:	09 95       	icall
 adc:	89 2b       	or	r24, r25
 ade:	a1 f3       	breq	.-24     	; 0xac8 <fputc+0x46>
 ae0:	da cf       	rjmp	.-76     	; 0xa96 <fputc+0x14>

00000ae2 <__ultoa_invert>:
 ae2:	fa 01       	movw	r30, r20
 ae4:	aa 27       	eor	r26, r26
 ae6:	28 30       	cpi	r18, 0x08	; 8
 ae8:	51 f1       	breq	.+84     	; 0xb3e <__ultoa_invert+0x5c>
 aea:	20 31       	cpi	r18, 0x10	; 16
 aec:	81 f1       	breq	.+96     	; 0xb4e <__ultoa_invert+0x6c>
 aee:	e8 94       	clt
 af0:	6f 93       	push	r22
 af2:	6e 7f       	andi	r22, 0xFE	; 254
 af4:	6e 5f       	subi	r22, 0xFE	; 254
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	8f 4f       	sbci	r24, 0xFF	; 255
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	af 4f       	sbci	r26, 0xFF	; 255
 afe:	b1 e0       	ldi	r27, 0x01	; 1
 b00:	3e d0       	rcall	.+124    	; 0xb7e <__ultoa_invert+0x9c>
 b02:	b4 e0       	ldi	r27, 0x04	; 4
 b04:	3c d0       	rcall	.+120    	; 0xb7e <__ultoa_invert+0x9c>
 b06:	67 0f       	add	r22, r23
 b08:	78 1f       	adc	r23, r24
 b0a:	89 1f       	adc	r24, r25
 b0c:	9a 1f       	adc	r25, r26
 b0e:	a1 1d       	adc	r26, r1
 b10:	68 0f       	add	r22, r24
 b12:	79 1f       	adc	r23, r25
 b14:	8a 1f       	adc	r24, r26
 b16:	91 1d       	adc	r25, r1
 b18:	a1 1d       	adc	r26, r1
 b1a:	6a 0f       	add	r22, r26
 b1c:	71 1d       	adc	r23, r1
 b1e:	81 1d       	adc	r24, r1
 b20:	91 1d       	adc	r25, r1
 b22:	a1 1d       	adc	r26, r1
 b24:	20 d0       	rcall	.+64     	; 0xb66 <__ultoa_invert+0x84>
 b26:	09 f4       	brne	.+2      	; 0xb2a <__ultoa_invert+0x48>
 b28:	68 94       	set
 b2a:	3f 91       	pop	r19
 b2c:	2a e0       	ldi	r18, 0x0A	; 10
 b2e:	26 9f       	mul	r18, r22
 b30:	11 24       	eor	r1, r1
 b32:	30 19       	sub	r19, r0
 b34:	30 5d       	subi	r19, 0xD0	; 208
 b36:	31 93       	st	Z+, r19
 b38:	de f6       	brtc	.-74     	; 0xaf0 <__ultoa_invert+0xe>
 b3a:	cf 01       	movw	r24, r30
 b3c:	08 95       	ret
 b3e:	46 2f       	mov	r20, r22
 b40:	47 70       	andi	r20, 0x07	; 7
 b42:	40 5d       	subi	r20, 0xD0	; 208
 b44:	41 93       	st	Z+, r20
 b46:	b3 e0       	ldi	r27, 0x03	; 3
 b48:	0f d0       	rcall	.+30     	; 0xb68 <__ultoa_invert+0x86>
 b4a:	c9 f7       	brne	.-14     	; 0xb3e <__ultoa_invert+0x5c>
 b4c:	f6 cf       	rjmp	.-20     	; 0xb3a <__ultoa_invert+0x58>
 b4e:	46 2f       	mov	r20, r22
 b50:	4f 70       	andi	r20, 0x0F	; 15
 b52:	40 5d       	subi	r20, 0xD0	; 208
 b54:	4a 33       	cpi	r20, 0x3A	; 58
 b56:	18 f0       	brcs	.+6      	; 0xb5e <__ultoa_invert+0x7c>
 b58:	49 5d       	subi	r20, 0xD9	; 217
 b5a:	31 fd       	sbrc	r19, 1
 b5c:	40 52       	subi	r20, 0x20	; 32
 b5e:	41 93       	st	Z+, r20
 b60:	02 d0       	rcall	.+4      	; 0xb66 <__ultoa_invert+0x84>
 b62:	a9 f7       	brne	.-22     	; 0xb4e <__ultoa_invert+0x6c>
 b64:	ea cf       	rjmp	.-44     	; 0xb3a <__ultoa_invert+0x58>
 b66:	b4 e0       	ldi	r27, 0x04	; 4
 b68:	a6 95       	lsr	r26
 b6a:	97 95       	ror	r25
 b6c:	87 95       	ror	r24
 b6e:	77 95       	ror	r23
 b70:	67 95       	ror	r22
 b72:	ba 95       	dec	r27
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__ultoa_invert+0x86>
 b76:	00 97       	sbiw	r24, 0x00	; 0
 b78:	61 05       	cpc	r22, r1
 b7a:	71 05       	cpc	r23, r1
 b7c:	08 95       	ret
 b7e:	9b 01       	movw	r18, r22
 b80:	ac 01       	movw	r20, r24
 b82:	0a 2e       	mov	r0, r26
 b84:	06 94       	lsr	r0
 b86:	57 95       	ror	r21
 b88:	47 95       	ror	r20
 b8a:	37 95       	ror	r19
 b8c:	27 95       	ror	r18
 b8e:	ba 95       	dec	r27
 b90:	c9 f7       	brne	.-14     	; 0xb84 <__ultoa_invert+0xa2>
 b92:	62 0f       	add	r22, r18
 b94:	73 1f       	adc	r23, r19
 b96:	84 1f       	adc	r24, r20
 b98:	95 1f       	adc	r25, r21
 b9a:	a0 1d       	adc	r26, r0
 b9c:	08 95       	ret

00000b9e <__prologue_saves__>:
 b9e:	2f 92       	push	r2
 ba0:	3f 92       	push	r3
 ba2:	4f 92       	push	r4
 ba4:	5f 92       	push	r5
 ba6:	6f 92       	push	r6
 ba8:	7f 92       	push	r7
 baa:	8f 92       	push	r8
 bac:	9f 92       	push	r9
 bae:	af 92       	push	r10
 bb0:	bf 92       	push	r11
 bb2:	cf 92       	push	r12
 bb4:	df 92       	push	r13
 bb6:	ef 92       	push	r14
 bb8:	ff 92       	push	r15
 bba:	0f 93       	push	r16
 bbc:	1f 93       	push	r17
 bbe:	cf 93       	push	r28
 bc0:	df 93       	push	r29
 bc2:	cd b7       	in	r28, 0x3d	; 61
 bc4:	de b7       	in	r29, 0x3e	; 62
 bc6:	ca 1b       	sub	r28, r26
 bc8:	db 0b       	sbc	r29, r27
 bca:	0f b6       	in	r0, 0x3f	; 63
 bcc:	f8 94       	cli
 bce:	de bf       	out	0x3e, r29	; 62
 bd0:	0f be       	out	0x3f, r0	; 63
 bd2:	cd bf       	out	0x3d, r28	; 61
 bd4:	09 94       	ijmp

00000bd6 <__epilogue_restores__>:
 bd6:	2a 88       	ldd	r2, Y+18	; 0x12
 bd8:	39 88       	ldd	r3, Y+17	; 0x11
 bda:	48 88       	ldd	r4, Y+16	; 0x10
 bdc:	5f 84       	ldd	r5, Y+15	; 0x0f
 bde:	6e 84       	ldd	r6, Y+14	; 0x0e
 be0:	7d 84       	ldd	r7, Y+13	; 0x0d
 be2:	8c 84       	ldd	r8, Y+12	; 0x0c
 be4:	9b 84       	ldd	r9, Y+11	; 0x0b
 be6:	aa 84       	ldd	r10, Y+10	; 0x0a
 be8:	b9 84       	ldd	r11, Y+9	; 0x09
 bea:	c8 84       	ldd	r12, Y+8	; 0x08
 bec:	df 80       	ldd	r13, Y+7	; 0x07
 bee:	ee 80       	ldd	r14, Y+6	; 0x06
 bf0:	fd 80       	ldd	r15, Y+5	; 0x05
 bf2:	0c 81       	ldd	r16, Y+4	; 0x04
 bf4:	1b 81       	ldd	r17, Y+3	; 0x03
 bf6:	aa 81       	ldd	r26, Y+2	; 0x02
 bf8:	b9 81       	ldd	r27, Y+1	; 0x01
 bfa:	ce 0f       	add	r28, r30
 bfc:	d1 1d       	adc	r29, r1
 bfe:	0f b6       	in	r0, 0x3f	; 63
 c00:	f8 94       	cli
 c02:	de bf       	out	0x3e, r29	; 62
 c04:	0f be       	out	0x3f, r0	; 63
 c06:	cd bf       	out	0x3d, r28	; 61
 c08:	ed 01       	movw	r28, r26
 c0a:	08 95       	ret

00000c0c <_exit>:
 c0c:	f8 94       	cli

00000c0e <__stop_program>:
 c0e:	ff cf       	rjmp	.-2      	; 0xc0e <__stop_program>
