
bin/Debug/Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00001b30  00001bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00001b08  00001b08  00001b9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000036d  008001d8  008001d8  00001c9c  2**0
                  ALLOC
  4 .stab         00001e24  00000000  00000000  00001c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000146b  00000000  00000000  00003ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  00004f2b  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f50  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00004f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00005584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00005b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00005b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__vector_18>
      4c:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e3       	ldi	r30, 0x30	; 48
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 3d       	cpi	r26, 0xD8	; 216
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a8 ed       	ldi	r26, 0xD8	; 216
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 34       	cpi	r26, 0x45	; 69
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 29 02 	call	0x452	; 0x452 <main>
      9e:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
void config_write_defaults();
void config_read();

/*********** Public definitions ***********/
void config_init()
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62

  // wait for the eeprom to not be busy
  while (!eeprom_isbusy())
      ae:	00 00       	nop
      b0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <eeprom_isbusy>
      b4:	89 2b       	or	r24, r25
      b6:	e1 f3       	breq	.-8      	; 0xb0 <config_init+0xa>
    ;

  /* init config w/ eeprom read */
  eeprom_readbuf(0x0040, (unsigned char*)&config, sizeof(config));
      b8:	42 e1       	ldi	r20, 0x12	; 18
      ba:	63 e7       	ldi	r22, 0x73	; 115
      bc:	72 e0       	ldi	r23, 0x02	; 2
      be:	80 e4       	ldi	r24, 0x40	; 64
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 97 01 	call	0x32e	; 0x32e <eeprom_readbuf>
  /* while the data is not valid */
  while (!config_is_data_valid())
      c6:	04 c0       	rjmp	.+8      	; 0xd0 <config_init+0x2a>
  {
    config_write_defaults();
      c8:	0e 94 b9 00 	call	0x172	; 0x172 <config_write_defaults>
    config_read();
      cc:	0e 94 ce 00 	call	0x19c	; 0x19c <config_read>
    ;

  /* init config w/ eeprom read */
  eeprom_readbuf(0x0040, (unsigned char*)&config, sizeof(config));
  /* while the data is not valid */
  while (!config_is_data_valid())
      d0:	0e 94 9d 00 	call	0x13a	; 0x13a <config_is_data_valid>
      d4:	89 2b       	or	r24, r25
      d6:	c1 f3       	breq	.-16     	; 0xc8 <config_init+0x22>
  {
    config_write_defaults();
    config_read();
  }
  config_modified = 0;
      d8:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
}
      dc:	00 00       	nop
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <config_update>:
void config_update()
{
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
  /* if eeprom is busy or !modified just return */
  if (eeprom_isbusy() || !config_modified)
      ec:	0e 94 e7 01 	call	0x3ce	; 0x3ce <eeprom_isbusy>
      f0:	89 2b       	or	r24, r25
      f2:	a1 f4       	brne	.+40     	; 0x11c <config_update+0x38>
      f4:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
      f8:	88 23       	and	r24, r24
      fa:	81 f0       	breq	.+32     	; 0x11c <config_update+0x38>
    return;
  /* update the checksum */
  update_checksum((unsigned char*)&config, sizeof(config));
      fc:	62 e1       	ldi	r22, 0x12	; 18
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	83 e7       	ldi	r24, 0x73	; 115
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	0e 94 93 02 	call	0x526	; 0x526 <update_checksum>
  /* write config to eeprom */
  eeprom_writebuf(0x0040, (unsigned char*)&config, sizeof(config));
     108:	42 e1       	ldi	r20, 0x12	; 18
     10a:	63 e7       	ldi	r22, 0x73	; 115
     10c:	72 e0       	ldi	r23, 0x02	; 2
     10e:	80 e4       	ldi	r24, 0x40	; 64
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 42 01 	call	0x284	; 0x284 <eeprom_writebuf>
  /* clear the modified flag */
  config_modified = 0;
     116:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
     11a:	01 c0       	rjmp	.+2      	; 0x11e <config_update+0x3a>
}
void config_update()
{
  /* if eeprom is busy or !modified just return */
  if (eeprom_isbusy() || !config_modified)
    return;
     11c:	00 00       	nop
  update_checksum((unsigned char*)&config, sizeof(config));
  /* write config to eeprom */
  eeprom_writebuf(0x0040, (unsigned char*)&config, sizeof(config));
  /* clear the modified flag */
  config_modified = 0;
}
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <config_set_modified>:
void config_set_modified()
{
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
  config_modified = 1;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
}
     132:	00 00       	nop
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <config_is_data_valid>:

/*********** Private definitions ***********/
int config_is_data_valid()
{
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(config.token,"ASU") && is_checksum_valid((unsigned char*)&config,sizeof(config));
     142:	6d e5       	ldi	r22, 0x5D	; 93
     144:	71 e0       	ldi	r23, 0x01	; 1
     146:	83 e7       	ldi	r24, 0x73	; 115
     148:	92 e0       	ldi	r25, 0x02	; 2
     14a:	0e 94 26 03 	call	0x64c	; 0x64c <cmp_str>
     14e:	89 2b       	or	r24, r25
     150:	59 f0       	breq	.+22     	; 0x168 <config_is_data_valid+0x2e>
     152:	62 e1       	ldi	r22, 0x12	; 18
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	83 e7       	ldi	r24, 0x73	; 115
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	0e 94 de 02 	call	0x5bc	; 0x5bc <is_checksum_valid>
     15e:	89 2b       	or	r24, r25
     160:	19 f0       	breq	.+6      	; 0x168 <config_is_data_valid+0x2e>
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <config_is_data_valid+0x32>
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
}
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <config_write_defaults>:
void config_write_defaults()
{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
  /* upate_checksum() for defaults*/
  update_checksum((unsigned char*)&config_defaults, sizeof(config_defaults));
     17a:	62 e1       	ldi	r22, 0x12	; 18
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0e 94 93 02 	call	0x526	; 0x526 <update_checksum>
  /* write defaults to eeprom */
  eeprom_writebuf(0x0040, (unsigned char*)&config_defaults, sizeof(config_defaults));
     186:	42 e1       	ldi	r20, 0x12	; 18
     188:	60 e0       	ldi	r22, 0x00	; 0
     18a:	71 e0       	ldi	r23, 0x01	; 1
     18c:	80 e4       	ldi	r24, 0x40	; 64
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 42 01 	call	0x284	; 0x284 <eeprom_writebuf>
}
     194:	00 00       	nop
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <config_read>:
void config_read()
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
  eeprom_readbuf(0x0040, (unsigned char*)&config, sizeof(config));
     1a4:	42 e1       	ldi	r20, 0x12	; 18
     1a6:	63 e7       	ldi	r22, 0x73	; 115
     1a8:	72 e0       	ldi	r23, 0x02	; 2
     1aa:	80 e4       	ldi	r24, 0x40	; 64
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 97 01 	call	0x32e	; 0x32e <eeprom_readbuf>
     1b2:	00 00       	nop
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <eeprom_unlock>:
 * Returns ...
 * Changes ...
 */
void eeprom_unlock() {
  /* Write logical one to EEMPE */
  EECR |= (1 << EEMPE);
     1ba:	fa 9a       	sbi	0x1f, 2	; 31
  /* Start eeprom write by setting EEPE */
  EECR |= (1 << EEPE);
     1bc:	f9 9a       	sbi	0x1f, 1	; 31
}
     1be:	08 95       	ret

000001c0 <__vector_22>:

/* Enabled when writebuf() places new data in the write buffer, this ISR sends
 * one byte at a time to the EEPROM. When the last byte is sent, it disables
 * futher EERPOM interrupts */
/* should this bee vector 22 or 23?? Documents say 23 for EE ready */
void __vector_22() {
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	2f 93       	push	r18
     1cc:	3f 93       	push	r19
     1ce:	4f 93       	push	r20
     1d0:	5f 93       	push	r21
     1d2:	6f 93       	push	r22
     1d4:	7f 93       	push	r23
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
     1da:	af 93       	push	r26
     1dc:	bf 93       	push	r27
     1de:	ef 93       	push	r30
     1e0:	ff 93       	push	r31
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62


  /* if you haven't written all characters in then keep writing */
  /* should we check to see if it is ready to write? */
  if (bufidx < writesize) {
     1ea:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <bufidx>
     1ee:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <writesize>
     1f2:	98 17       	cp	r25, r24
     1f4:	78 f5       	brcc	.+94     	; 0x254 <__vector_22+0x94>
      /* set high byte */
    EEARH = (writeaddr >> 8) & 0xFF;
     1f6:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <writeaddr>
     1fa:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <writeaddr+0x1>
     1fe:	29 2f       	mov	r18, r25
     200:	33 27       	eor	r19, r19
     202:	82 e4       	ldi	r24, 0x42	; 66
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18
    /* set low byte */
    EEARL = writeaddr & 0xFF;
     20a:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <writeaddr>
     20e:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <writeaddr+0x1>
     212:	81 e4       	ldi	r24, 0x41	; 65
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
    // EEARL = writeaddr;

    EEDR = writebuf[bufidx];
     21a:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <bufidx>
     21e:	28 2f       	mov	r18, r24
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	80 e4       	ldi	r24, 0x40	; 64
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	27 57       	subi	r18, 0x77	; 119
     228:	3d 4f       	sbci	r19, 0xFD	; 253
     22a:	f9 01       	movw	r30, r18
     22c:	20 81       	ld	r18, Z
     22e:	fc 01       	movw	r30, r24
     230:	20 83       	st	Z, r18
    eeprom_unlock();
     232:	0e 94 dd 00 	call	0x1ba	; 0x1ba <eeprom_unlock>
    // Debug print
    // printf("%d: %X %X EEDR: %c\n\r", bufidx, EEARL, EEARH, EEDR);
    bufidx++;
     236:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <bufidx>
     23a:	8f 5f       	subi	r24, 0xFF	; 255
     23c:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <bufidx>
    writeaddr++;
     240:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <writeaddr>
     244:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <writeaddr+0x1>
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <writeaddr+0x1>
     24e:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <writeaddr>
    /* disable interrupts */
    disable_interrupt();
    /* make ready to write another */
    write_busy = 0;
  }
}
     252:	04 c0       	rjmp	.+8      	; 0x25c <__vector_22+0x9c>
    bufidx++;
    writeaddr++;
  } else {

    /* disable interrupts */
    disable_interrupt();
     254:	0e 94 07 02 	call	0x40e	; 0x40e <disable_interrupt>
    /* make ready to write another */
    write_busy = 0;
     258:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <write_busy>
  }
}
     25c:	00 00       	nop
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	ff 91       	pop	r31
     264:	ef 91       	pop	r30
     266:	bf 91       	pop	r27
     268:	af 91       	pop	r26
     26a:	9f 91       	pop	r25
     26c:	8f 91       	pop	r24
     26e:	7f 91       	pop	r23
     270:	6f 91       	pop	r22
     272:	5f 91       	pop	r21
     274:	4f 91       	pop	r20
     276:	3f 91       	pop	r19
     278:	2f 91       	pop	r18
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <eeprom_writebuf>:
/* this function places the data (specified buf and size) into the write buffer
 * for later writing to the EEPROM. The addr parameter specifies the location to
 * write the data to. */
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf,
                     unsigned char size) {
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	00 d0       	rcall	.+0      	; 0x28a <eeprom_writebuf+0x6>
     28a:	00 d0       	rcall	.+0      	; 0x28c <eeprom_writebuf+0x8>
     28c:	00 d0       	rcall	.+0      	; 0x28e <eeprom_writebuf+0xa>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	9b 83       	std	Y+3, r25	; 0x03
     294:	8a 83       	std	Y+2, r24	; 0x02
     296:	7d 83       	std	Y+5, r23	; 0x05
     298:	6c 83       	std	Y+4, r22	; 0x04
     29a:	4e 83       	std	Y+6, r20	; 0x06
  // check that write_busy is 0
  if (write_busy > 0) {
     29c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <write_busy>
     2a0:	88 23       	and	r24, r24
     2a2:	b9 f5       	brne	.+110    	; 0x312 <eeprom_writebuf+0x8e>
    return;
  }
  if (size > 64) {
     2a4:	8e 81       	ldd	r24, Y+6	; 0x06
     2a6:	81 34       	cpi	r24, 0x41	; 65
     2a8:	b0 f5       	brcc	.+108    	; 0x316 <eeprom_writebuf+0x92>
    return;
  }
  if ((addr + size) > 0x3FF) {
     2aa:	8e 81       	ldd	r24, Y+6	; 0x06
     2ac:	28 2f       	mov	r18, r24
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	8a 81       	ldd	r24, Y+2	; 0x02
     2b2:	9b 81       	ldd	r25, Y+3	; 0x03
     2b4:	82 0f       	add	r24, r18
     2b6:	93 1f       	adc	r25, r19
     2b8:	81 15       	cp	r24, r1
     2ba:	94 40       	sbci	r25, 0x04	; 4
     2bc:	70 f5       	brcc	.+92     	; 0x31a <eeprom_writebuf+0x96>
    return;
  }
  /* the EEPROM is now writing */
  write_busy = 1;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <write_busy>
  /* change the write address */
  writeaddr = addr;
     2c4:	8a 81       	ldd	r24, Y+2	; 0x02
     2c6:	9b 81       	ldd	r25, Y+3	; 0x03
     2c8:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <writeaddr+0x1>
     2cc:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <writeaddr>
  /* start reading from the beginning of the buffer */
  bufidx = 0;
     2d0:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <bufidx>

  /* copy buf to writebuf and configure writesize */
  for (unsigned char i = 0; i < size; i++) {
     2d4:	19 82       	std	Y+1, r1	; 0x01
     2d6:	13 c0       	rjmp	.+38     	; 0x2fe <eeprom_writebuf+0x7a>
    writebuf[i] = buf[i];
     2d8:	89 81       	ldd	r24, Y+1	; 0x01
     2da:	88 2f       	mov	r24, r24
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	2c 81       	ldd	r18, Y+4	; 0x04
     2e0:	3d 81       	ldd	r19, Y+5	; 0x05
     2e2:	28 0f       	add	r18, r24
     2e4:	39 1f       	adc	r19, r25
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	88 2f       	mov	r24, r24
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	f9 01       	movw	r30, r18
     2ee:	20 81       	ld	r18, Z
     2f0:	87 57       	subi	r24, 0x77	; 119
     2f2:	9d 4f       	sbci	r25, 0xFD	; 253
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 83       	st	Z, r18
  writeaddr = addr;
  /* start reading from the beginning of the buffer */
  bufidx = 0;

  /* copy buf to writebuf and configure writesize */
  for (unsigned char i = 0; i < size; i++) {
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	89 83       	std	Y+1, r24	; 0x01
     2fe:	99 81       	ldd	r25, Y+1	; 0x01
     300:	8e 81       	ldd	r24, Y+6	; 0x06
     302:	98 17       	cp	r25, r24
     304:	48 f3       	brcs	.-46     	; 0x2d8 <eeprom_writebuf+0x54>
    writebuf[i] = buf[i];
  }

  writesize = size;
     306:	8e 81       	ldd	r24, Y+6	; 0x06
     308:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <writesize>

  /* enable the EEPROM ready interrupts */
  enable_interrupt();
     30c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <enable_interrupt>
     310:	05 c0       	rjmp	.+10     	; 0x31c <eeprom_writebuf+0x98>
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf,
                     unsigned char size) {
  // check that write_busy is 0
  if (write_busy > 0) {
    return;
     312:	00 00       	nop
     314:	03 c0       	rjmp	.+6      	; 0x31c <eeprom_writebuf+0x98>
  }
  if (size > 64) {
    return;
     316:	00 00       	nop
     318:	01 c0       	rjmp	.+2      	; 0x31c <eeprom_writebuf+0x98>
  }
  if ((addr + size) > 0x3FF) {
    return;
     31a:	00 00       	nop

  writesize = size;

  /* enable the EEPROM ready interrupts */
  enable_interrupt();
}
     31c:	26 96       	adiw	r28, 0x06	; 6
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <eeprom_readbuf>:

/* this function reads a specified amount of data(size) from the EEPROM starting
 * at a specified address(addr) and places it in the specified buffer(buf) */
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	00 d0       	rcall	.+0      	; 0x334 <eeprom_readbuf+0x6>
     334:	00 d0       	rcall	.+0      	; 0x336 <eeprom_readbuf+0x8>
     336:	00 d0       	rcall	.+0      	; 0x338 <eeprom_readbuf+0xa>
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	9b 83       	std	Y+3, r25	; 0x03
     33e:	8a 83       	std	Y+2, r24	; 0x02
     340:	7d 83       	std	Y+5, r23	; 0x05
     342:	6c 83       	std	Y+4, r22	; 0x04
     344:	4e 83       	std	Y+6, r20	; 0x06

  if (size > 64) {
     346:	8e 81       	ldd	r24, Y+6	; 0x06
     348:	81 34       	cpi	r24, 0x41	; 65
     34a:	b8 f5       	brcc	.+110    	; 0x3ba <eeprom_readbuf+0x8c>
    /* write error. buffer is too big */
    return;
  }
  while (eeprom_isbusy());
     34c:	00 00       	nop
     34e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <eeprom_isbusy>
     352:	89 2b       	or	r24, r25
     354:	e1 f7       	brne	.-8      	; 0x34e <eeprom_readbuf+0x20>

  for (unsigned char i = 0; i < size; i++) {
     356:	19 82       	std	Y+1, r1	; 0x01
     358:	2b c0       	rjmp	.+86     	; 0x3b0 <eeprom_readbuf+0x82>


      /* set high byte */
    EEARH = (addr >> 8) & 0xFF;
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	9b 81       	ldd	r25, Y+3	; 0x03
     35e:	29 2f       	mov	r18, r25
     360:	33 27       	eor	r19, r19
     362:	82 e4       	ldi	r24, 0x42	; 66
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
    /* set low byte */
    EEARL = addr & 0xFF;
     36a:	81 e4       	ldi	r24, 0x41	; 65
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	2a 81       	ldd	r18, Y+2	; 0x02
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18

    // EEARL = addr;

    /* set mode to read */
    EECR |= (1 << EERE);
     374:	8f e3       	ldi	r24, 0x3F	; 63
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	20 81       	ld	r18, Z
     37c:	8f e3       	ldi	r24, 0x3F	; 63
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	21 60       	ori	r18, 0x01	; 1
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18


    /* write from register to buffer */
    buf[i] = EEDR;
     386:	20 e4       	ldi	r18, 0x40	; 64
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	88 2f       	mov	r24, r24
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	4c 81       	ldd	r20, Y+4	; 0x04
     392:	5d 81       	ldd	r21, Y+5	; 0x05
     394:	84 0f       	add	r24, r20
     396:	95 1f       	adc	r25, r21
     398:	f9 01       	movw	r30, r18
     39a:	20 81       	ld	r18, Z
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
    addr++;
     3a0:	8a 81       	ldd	r24, Y+2	; 0x02
     3a2:	9b 81       	ldd	r25, Y+3	; 0x03
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	9b 83       	std	Y+3, r25	; 0x03
     3a8:	8a 83       	std	Y+2, r24	; 0x02
    /* write error. buffer is too big */
    return;
  }
  while (eeprom_isbusy());

  for (unsigned char i = 0; i < size; i++) {
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	8f 5f       	subi	r24, 0xFF	; 255
     3ae:	89 83       	std	Y+1, r24	; 0x01
     3b0:	99 81       	ldd	r25, Y+1	; 0x01
     3b2:	8e 81       	ldd	r24, Y+6	; 0x06
     3b4:	98 17       	cp	r25, r24
     3b6:	88 f2       	brcs	.-94     	; 0x35a <eeprom_readbuf+0x2c>
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <eeprom_readbuf+0x8e>
 * at a specified address(addr) and places it in the specified buffer(buf) */
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {

  if (size > 64) {
    /* write error. buffer is too big */
    return;
     3ba:	00 00       	nop

    /* write from register to buffer */
    buf[i] = EEDR;
    addr++;
  }
}
     3bc:	26 96       	adiw	r28, 0x06	; 6
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <eeprom_isbusy>:

/* this functiosn returns 0 if write_busy is 0, otherwise, returns 1 */
int eeprom_isbusy() {
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62


  return  write_busy == 1;
     3d6:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <write_busy>
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	91 30       	cpi	r25, 0x01	; 1
     3de:	09 f0       	breq	.+2      	; 0x3e2 <eeprom_isbusy+0x14>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	88 2f       	mov	r24, r24
     3e4:	90 e0       	ldi	r25, 0x00	; 0
}
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <enable_interrupt>:

void enable_interrupt() { 
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
  EECR |= (1 << EERIE); 
     3f4:	8f e3       	ldi	r24, 0x3F	; 63
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 81       	ld	r18, Z
     3fc:	8f e3       	ldi	r24, 0x3F	; 63
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	28 60       	ori	r18, 0x08	; 8
     402:	fc 01       	movw	r30, r24
     404:	20 83       	st	Z, r18

}
     406:	00 00       	nop
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <disable_interrupt>:

void disable_interrupt() { EECR &= ~(1 << EERIE); }
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	8f e3       	ldi	r24, 0x3F	; 63
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	fc 01       	movw	r30, r24
     41c:	20 81       	ld	r18, Z
     41e:	8f e3       	ldi	r24, 0x3F	; 63
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	27 7f       	andi	r18, 0xF7	; 247
     424:	fc 01       	movw	r30, r24
     426:	20 83       	st	Z, r18
     428:	00 00       	nop
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <enable_global_interrupts>:

#define SREG (*(volatile unsigned char *)0x5F)
#define I_BIT 7

void enable_global_interrupts()
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
  SREG |= (1 << I_BIT); // Set the I bit to enable interrupts
     438:	8f e5       	ldi	r24, 0x5F	; 95
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	fc 01       	movw	r30, r24
     43e:	20 81       	ld	r18, Z
     440:	8f e5       	ldi	r24, 0x5F	; 95
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	20 68       	ori	r18, 0x80	; 128
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
}
     44a:	00 00       	nop
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <main>:

int main()
{
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	00 d0       	rcall	.+0      	; 0x458 <main+0x6>
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
  enable_global_interrupts();
     45c:	0e 94 18 02 	call	0x430	; 0x430 <enable_global_interrupts>
  // variable to track if the eeprom has been dumped
  int dumped = 0;
     460:	1a 82       	std	Y+2, r1	; 0x02
     462:	19 82       	std	Y+1, r1	; 0x01
  // init uart
  uart_init();
     464:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <uart_init>
  // init config
  config_init();
     468:	0e 94 53 00 	call	0xa6	; 0xa6 <config_init>
  // init led
  led_init();
     46c:	0e 94 30 04 	call	0x860	; 0x860 <led_init>
  // init log
  log_init();
     470:	0e 94 62 04 	call	0x8c4	; 0x8c4 <log_init>
  // init rtc
  rtc_init();
     474:	0e 94 28 06 	call	0xc50	; 0xc50 <rtc_init>
  // init vpd
  vpd_init();
     478:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <vpd_init>

  // led blink pattern "--- -.-"
  led_set_blink("--- -.-");
     47c:	81 e6       	ldi	r24, 0x61	; 97
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 c4 03 	call	0x788	; 0x788 <led_set_blink>
  // set RTC date/time to "01/01/2019 00:00:00"
  rtc_set_by_datestr("01/01/2019 00:00:00");
     484:	89 e6       	ldi	r24, 0x69	; 105
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 57 06 	call	0xcae	; 0xcae <rtc_set_by_datestr>

  // write the mandatory SER line and name to uart \n
  uart_writestr("SER 486 Project 2 – DaVonte Carter vault\n\r");
     48c:	8d e7       	ldi	r24, 0x7D	; 125
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_writestr>
  // read/Write the model to uart \n
  uart_writestr(vpd.model);
     494:	8e e8       	ldi	r24, 0x8E	; 142
     496:	94 e0       	ldi	r25, 0x04	; 4
     498:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_writestr>
  uart_writestr("\n\r");
     49c:	8a ea       	ldi	r24, 0xAA	; 170
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_writestr>
  // read/Write the manufactuer to uart \n
  uart_writestr(vpd.manufacturer);
     4a4:	8a e9       	ldi	r24, 0x9A	; 154
     4a6:	94 e0       	ldi	r25, 0x04	; 4
     4a8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_writestr>
  uart_writestr("\n\r");
     4ac:	8a ea       	ldi	r24, 0xAA	; 170
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_writestr>
  // read/write the token to uart \n
  uart_writestr(vpd.token);
     4b4:	8a e8       	ldi	r24, 0x8A	; 138
     4b6:	94 e0       	ldi	r25, 0x04	; 4
     4b8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_writestr>
  uart_writestr("\n\r");
     4bc:	8a ea       	ldi	r24, 0xAA	; 170
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_writestr>

  // set the config_use_static_ip to 1
  config.use_static_ip = 1;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <config+0xc>
  // set the config modified state
  config_set_modified();
     4ca:	0e 94 92 00 	call	0x124	; 0x124 <config_set_modified>
  // clear the event log
  log_clear();
     4ce:	0e 94 ae 05 	call	0xb5c	; 0xb5c <log_clear>

  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc
  log_add_record(0xaa);
     4d2:	8a ea       	ldi	r24, 0xAA	; 170
     4d4:	0e 94 5d 05 	call	0xaba	; 0xaba <log_add_record>
  log_add_record(0xbb);
     4d8:	8b eb       	ldi	r24, 0xBB	; 187
     4da:	0e 94 5d 05 	call	0xaba	; 0xaba <log_add_record>
  log_add_record(0xcc);
     4de:	8c ec       	ldi	r24, 0xCC	; 204
     4e0:	0e 94 5d 05 	call	0xaba	; 0xaba <log_add_record>

  while (1)
  {
    // update the blink fsm every
    led_update();
     4e4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <led_update>

    // if (log has changed && eeprom is not busy)
    // update the log in EEPROM
    if (!eeprom_isbusy())
     4e8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <eeprom_isbusy>
     4ec:	89 2b       	or	r24, r25
     4ee:	11 f4       	brne	.+4      	; 0x4f4 <main+0xa2>
    {
      log_update();
     4f0:	0e 94 27 05 	call	0xa4e	; 0xa4e <log_update>
    }

    // if (config has changed && eeprom is not busy)
    // update config in EEPROM
    if (!eeprom_isbusy())
     4f4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <eeprom_isbusy>
     4f8:	89 2b       	or	r24, r25
     4fa:	11 f4       	brne	.+4      	; 0x500 <main+0xae>
    {
      config_update();
     4fc:	0e 94 72 00 	call	0xe4	; 0xe4 <config_update>
    }
    /* dump memory once and only once*/
    if ((!eeprom_isbusy()) && (!dumped))
     500:	0e 94 e7 01 	call	0x3ce	; 0x3ce <eeprom_isbusy>
     504:	89 2b       	or	r24, r25
     506:	71 f7       	brne	.-36     	; 0x4e4 <main+0x92>
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	89 2b       	or	r24, r25
     50e:	51 f7       	brne	.-44     	; 0x4e4 <main+0x92>
    {
      dump_eeprom(0, 0x100);
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	71 e0       	ldi	r23, 0x01	; 1
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 9d 0a 	call	0x153a	; 0x153a <dump_eeprom>
      dumped = 1;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	9a 83       	std	Y+2, r25	; 0x02
     522:	89 83       	std	Y+1, r24	; 0x01
  log_add_record(0xcc);

  while (1)
  {
    // update the blink fsm every
    led_update();
     524:	df cf       	rjmp	.-66     	; 0x4e4 <main+0x92>

00000526 <update_checksum>:
#include "util.h"

void update_checksum(unsigned char* data, unsigned int size) {
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	28 97       	sbiw	r28, 0x08	; 8
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	9e 83       	std	Y+6, r25	; 0x06
     53c:	8d 83       	std	Y+5, r24	; 0x05
     53e:	78 87       	std	Y+8, r23	; 0x08
     540:	6f 83       	std	Y+7, r22	; 0x07
    if (size == 0) return; // Handle empty data structure
     542:	8f 81       	ldd	r24, Y+7	; 0x07
     544:	98 85       	ldd	r25, Y+8	; 0x08
     546:	89 2b       	or	r24, r25
     548:	79 f1       	breq	.+94     	; 0x5a8 <update_checksum+0x82>

    unsigned int sum = 0;
     54a:	1a 82       	std	Y+2, r1	; 0x02
     54c:	19 82       	std	Y+1, r1	; 0x01

    // Calculate the sum of all bytes except the last one
    for (unsigned int i = 0; i < size - 1; i++) {
     54e:	1c 82       	std	Y+4, r1	; 0x04
     550:	1b 82       	std	Y+3, r1	; 0x03
     552:	15 c0       	rjmp	.+42     	; 0x57e <update_checksum+0x58>
        sum += (unsigned char)data[i];
     554:	2d 81       	ldd	r18, Y+5	; 0x05
     556:	3e 81       	ldd	r19, Y+6	; 0x06
     558:	8b 81       	ldd	r24, Y+3	; 0x03
     55a:	9c 81       	ldd	r25, Y+4	; 0x04
     55c:	82 0f       	add	r24, r18
     55e:	93 1f       	adc	r25, r19
     560:	fc 01       	movw	r30, r24
     562:	80 81       	ld	r24, Z
     564:	88 2f       	mov	r24, r24
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	29 81       	ldd	r18, Y+1	; 0x01
     56a:	3a 81       	ldd	r19, Y+2	; 0x02
     56c:	82 0f       	add	r24, r18
     56e:	93 1f       	adc	r25, r19
     570:	9a 83       	std	Y+2, r25	; 0x02
     572:	89 83       	std	Y+1, r24	; 0x01
    if (size == 0) return; // Handle empty data structure

    unsigned int sum = 0;

    // Calculate the sum of all bytes except the last one
    for (unsigned int i = 0; i < size - 1; i++) {
     574:	8b 81       	ldd	r24, Y+3	; 0x03
     576:	9c 81       	ldd	r25, Y+4	; 0x04
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	9c 83       	std	Y+4, r25	; 0x04
     57c:	8b 83       	std	Y+3, r24	; 0x03
     57e:	8f 81       	ldd	r24, Y+7	; 0x07
     580:	98 85       	ldd	r25, Y+8	; 0x08
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	2b 81       	ldd	r18, Y+3	; 0x03
     586:	3c 81       	ldd	r19, Y+4	; 0x04
     588:	28 17       	cp	r18, r24
     58a:	39 07       	cpc	r19, r25
     58c:	18 f3       	brcs	.-58     	; 0x554 <update_checksum+0x2e>
        sum += (unsigned char)data[i];
    }

    // Calculate the checksum value for the last byte
    data[size - 1] = (char)(-sum & 0xFF); // Ensure it wraps within one byte
     58e:	49 81       	ldd	r20, Y+1	; 0x01
     590:	8f 81       	ldd	r24, Y+7	; 0x07
     592:	98 85       	ldd	r25, Y+8	; 0x08
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	2d 81       	ldd	r18, Y+5	; 0x05
     598:	3e 81       	ldd	r19, Y+6	; 0x06
     59a:	82 0f       	add	r24, r18
     59c:	93 1f       	adc	r25, r19
     59e:	24 2f       	mov	r18, r20
     5a0:	21 95       	neg	r18
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <update_checksum+0x84>
#include "util.h"

void update_checksum(unsigned char* data, unsigned int size) {
    if (size == 0) return; // Handle empty data structure
     5a8:	00 00       	nop
        sum += (unsigned char)data[i];
    }

    // Calculate the checksum value for the last byte
    data[size - 1] = (char)(-sum & 0xFF); // Ensure it wraps within one byte
}
     5aa:	28 96       	adiw	r28, 0x08	; 8
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <is_checksum_valid>:


int is_checksum_valid(unsigned char* data, unsigned int size) {
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	28 97       	sbiw	r28, 0x08	; 8
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	9e 83       	std	Y+6, r25	; 0x06
     5d2:	8d 83       	std	Y+5, r24	; 0x05
     5d4:	78 87       	std	Y+8, r23	; 0x08
     5d6:	6f 83       	std	Y+7, r22	; 0x07
    if (size == 0) return 0; // Invalid for empty data structure
     5d8:	8f 81       	ldd	r24, Y+7	; 0x07
     5da:	98 85       	ldd	r25, Y+8	; 0x08
     5dc:	89 2b       	or	r24, r25
     5de:	19 f4       	brne	.+6      	; 0x5e6 <is_checksum_valid+0x2a>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	2a c0       	rjmp	.+84     	; 0x63a <is_checksum_valid+0x7e>

    unsigned int sum = 0;
     5e6:	1a 82       	std	Y+2, r1	; 0x02
     5e8:	19 82       	std	Y+1, r1	; 0x01

    // Calculate the sum of all bytes
    for (unsigned int i = 0; i < size; i++) {
     5ea:	1c 82       	std	Y+4, r1	; 0x04
     5ec:	1b 82       	std	Y+3, r1	; 0x03
     5ee:	15 c0       	rjmp	.+42     	; 0x61a <is_checksum_valid+0x5e>
        sum += (unsigned char)data[i];
     5f0:	2d 81       	ldd	r18, Y+5	; 0x05
     5f2:	3e 81       	ldd	r19, Y+6	; 0x06
     5f4:	8b 81       	ldd	r24, Y+3	; 0x03
     5f6:	9c 81       	ldd	r25, Y+4	; 0x04
     5f8:	82 0f       	add	r24, r18
     5fa:	93 1f       	adc	r25, r19
     5fc:	fc 01       	movw	r30, r24
     5fe:	80 81       	ld	r24, Z
     600:	88 2f       	mov	r24, r24
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	29 81       	ldd	r18, Y+1	; 0x01
     606:	3a 81       	ldd	r19, Y+2	; 0x02
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	9a 83       	std	Y+2, r25	; 0x02
     60e:	89 83       	std	Y+1, r24	; 0x01
    if (size == 0) return 0; // Invalid for empty data structure

    unsigned int sum = 0;

    // Calculate the sum of all bytes
    for (unsigned int i = 0; i < size; i++) {
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	9c 83       	std	Y+4, r25	; 0x04
     618:	8b 83       	std	Y+3, r24	; 0x03
     61a:	2b 81       	ldd	r18, Y+3	; 0x03
     61c:	3c 81       	ldd	r19, Y+4	; 0x04
     61e:	8f 81       	ldd	r24, Y+7	; 0x07
     620:	98 85       	ldd	r25, Y+8	; 0x08
     622:	28 17       	cp	r18, r24
     624:	39 07       	cpc	r19, r25
     626:	20 f3       	brcs	.-56     	; 0x5f0 <is_checksum_valid+0x34>
        sum += (unsigned char)data[i];
    }

    // Return 1 if the sum is zero, otherwise 0
    return (sum & 0xFF) == 0;
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	9a 81       	ldd	r25, Y+2	; 0x02
     62c:	99 27       	eor	r25, r25
     62e:	21 e0       	ldi	r18, 0x01	; 1
     630:	89 2b       	or	r24, r25
     632:	09 f0       	breq	.+2      	; 0x636 <is_checksum_valid+0x7a>
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	82 2f       	mov	r24, r18
     638:	90 e0       	ldi	r25, 0x00	; 0
}
     63a:	28 96       	adiw	r28, 0x08	; 8
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <cmp_str>:
int cmp_str(const char *str1, const char *str2)
{
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	00 d0       	rcall	.+0      	; 0x652 <cmp_str+0x6>
     652:	00 d0       	rcall	.+0      	; 0x654 <cmp_str+0x8>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	9a 83       	std	Y+2, r25	; 0x02
     65a:	89 83       	std	Y+1, r24	; 0x01
     65c:	7c 83       	std	Y+4, r23	; 0x04
     65e:	6b 83       	std	Y+3, r22	; 0x03
  while (*str1 && *str2)
     660:	17 c0       	rjmp	.+46     	; 0x690 <cmp_str+0x44>
  {
    if (*str1 != *str2)
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	fc 01       	movw	r30, r24
     668:	20 81       	ld	r18, Z
     66a:	8b 81       	ldd	r24, Y+3	; 0x03
     66c:	9c 81       	ldd	r25, Y+4	; 0x04
     66e:	fc 01       	movw	r30, r24
     670:	80 81       	ld	r24, Z
     672:	28 17       	cp	r18, r24
     674:	19 f0       	breq	.+6      	; 0x67c <cmp_str+0x30>
    {
      return 0;
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	27 c0       	rjmp	.+78     	; 0x6ca <cmp_str+0x7e>
    }
    str1++;
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	9a 81       	ldd	r25, Y+2	; 0x02
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	9a 83       	std	Y+2, r25	; 0x02
     684:	89 83       	std	Y+1, r24	; 0x01
    str2++;
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	9c 83       	std	Y+4, r25	; 0x04
     68e:	8b 83       	std	Y+3, r24	; 0x03
    // Return 1 if the sum is zero, otherwise 0
    return (sum & 0xFF) == 0;
}
int cmp_str(const char *str1, const char *str2)
{
  while (*str1 && *str2)
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	88 23       	and	r24, r24
     69a:	31 f0       	breq	.+12     	; 0x6a8 <cmp_str+0x5c>
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	fc 01       	movw	r30, r24
     6a2:	80 81       	ld	r24, Z
     6a4:	88 23       	and	r24, r24
     6a6:	e9 f6       	brne	.-70     	; 0x662 <cmp_str+0x16>
      return 0;
    }
    str1++;
    str2++;
  }
  return *str1 == '\0' && *str2 == '\0';
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	fc 01       	movw	r30, r24
     6ae:	80 81       	ld	r24, Z
     6b0:	88 23       	and	r24, r24
     6b2:	49 f4       	brne	.+18     	; 0x6c6 <cmp_str+0x7a>
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	9c 81       	ldd	r25, Y+4	; 0x04
     6b8:	fc 01       	movw	r30, r24
     6ba:	80 81       	ld	r24, Z
     6bc:	88 23       	and	r24, r24
     6be:	19 f4       	brne	.+6      	; 0x6c6 <cmp_str+0x7a>
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <cmp_str+0x7e>
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <vpd_init>:
/* read manufacturer data from eeprom */
void read_vpd();

/********** public definitions **********/
void vpd_init()
{
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
  // wait for the eeprom to free up
  while (eeprom_isbusy())
     6e0:	00 00       	nop
     6e2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <eeprom_isbusy>
     6e6:	89 2b       	or	r24, r25
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <vpd_init+0xa>
    ;

  /* read all data from the EEPROM at address 0x000 */
  read_vpd();
     6ea:	0e 94 b5 03 	call	0x76a	; 0x76a <read_vpd>

  /* if the data was invalid then write defaults and try to reinitialize */
  while (!vpd_is_data_valid())
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <vpd_init+0x20>
  {
    // initialize data from defaults
    vpd_write_defaults();
     6f0:	0e 94 84 03 	call	0x708	; 0x708 <vpd_write_defaults>
    // read defaults
    read_vpd();
     6f4:	0e 94 b5 03 	call	0x76a	; 0x76a <read_vpd>

  /* read all data from the EEPROM at address 0x000 */
  read_vpd();

  /* if the data was invalid then write defaults and try to reinitialize */
  while (!vpd_is_data_valid())
     6f8:	0e 94 99 03 	call	0x732	; 0x732 <vpd_is_data_valid>
     6fc:	89 2b       	or	r24, r25
     6fe:	c1 f3       	breq	.-16     	; 0x6f0 <vpd_init+0x18>
    // initialize data from defaults
    vpd_write_defaults();
    // read defaults
    read_vpd();
  }
}
     700:	00 00       	nop
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <vpd_write_defaults>:

void vpd_write_defaults()
{
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
  /* update checksum for defaults */
  update_checksum((unsigned char *)&defaults, sizeof(defaults));
     710:	67 e3       	ldi	r22, 0x37	; 55
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	82 e1       	ldi	r24, 0x12	; 18
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	0e 94 93 02 	call	0x526	; 0x526 <update_checksum>
  /* write the defaults */
  eeprom_writebuf(0x0000, (unsigned char *)&defaults, sizeof(defaults));
     71c:	47 e3       	ldi	r20, 0x37	; 55
     71e:	62 e1       	ldi	r22, 0x12	; 18
     720:	71 e0       	ldi	r23, 0x01	; 1
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 42 01 	call	0x284	; 0x284 <eeprom_writebuf>
}
     72a:	00 00       	nop
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <vpd_is_data_valid>:

int vpd_is_data_valid()
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(vpd.token, "SER") && is_checksum_valid((unsigned char *)&vpd, sizeof(vpd));
     73a:	6d ea       	ldi	r22, 0xAD	; 173
     73c:	71 e0       	ldi	r23, 0x01	; 1
     73e:	8a e8       	ldi	r24, 0x8A	; 138
     740:	94 e0       	ldi	r25, 0x04	; 4
     742:	0e 94 26 03 	call	0x64c	; 0x64c <cmp_str>
     746:	89 2b       	or	r24, r25
     748:	59 f0       	breq	.+22     	; 0x760 <vpd_is_data_valid+0x2e>
     74a:	67 e3       	ldi	r22, 0x37	; 55
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	8a e8       	ldi	r24, 0x8A	; 138
     750:	94 e0       	ldi	r25, 0x04	; 4
     752:	0e 94 de 02 	call	0x5bc	; 0x5bc <is_checksum_valid>
     756:	89 2b       	or	r24, r25
     758:	19 f0       	breq	.+6      	; 0x760 <vpd_is_data_valid+0x2e>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	02 c0       	rjmp	.+4      	; 0x764 <vpd_is_data_valid+0x32>
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
}
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <read_vpd>:

/********** private definitions **********/

void read_vpd()
{
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
  eeprom_readbuf(0x0000, (unsigned char *)&vpd, sizeof(vpd));
     772:	47 e3       	ldi	r20, 0x37	; 55
     774:	6a e8       	ldi	r22, 0x8A	; 138
     776:	74 e0       	ldi	r23, 0x04	; 4
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 97 01 	call	0x32e	; 0x32e <eeprom_readbuf>
     780:	00 00       	nop
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <led_set_blink>:
     788:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <blink_msg+0x1>
     78c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <blink_msg>
     790:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <blink_pos+0x1>
     794:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <blink_pos>
     798:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <blink_state>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <delay_set>
     7a8:	0c 94 35 04 	jmp	0x86a	; 0x86a <led_off>

000007ac <led_update>:
     7ac:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <blink_msg>
     7b0:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <blink_msg+0x1>
     7b4:	89 2b       	or	r24, r25
     7b6:	09 f4       	brne	.+2      	; 0x7ba <led_update+0xe>
     7b8:	52 c0       	rjmp	.+164    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 ba 0b 	call	0x1774	; 0x1774 <delay_isdone>
     7c2:	89 2b       	or	r24, r25
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <led_update+0x1c>
     7c6:	4b c0       	rjmp	.+150    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     7c8:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <blink_state>
     7cc:	81 11       	cpse	r24, r1
     7ce:	34 c0       	rjmp	.+104    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7d0:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <blink_pos>
     7d4:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <blink_pos+0x1>
     7d8:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <blink_msg>
     7dc:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <blink_msg+0x1>
     7e0:	e2 0f       	add	r30, r18
     7e2:	f3 1f       	adc	r31, r19
     7e4:	80 81       	ld	r24, Z
     7e6:	80 32       	cpi	r24, 0x20	; 32
     7e8:	e9 f0       	breq	.+58     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     7ea:	3c f4       	brge	.+14     	; 0x7fa <led_update+0x4e>
     7ec:	81 11       	cpse	r24, r1
     7ee:	1d c0       	rjmp	.+58     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     7f0:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <blink_pos+0x1>
     7f4:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <blink_pos>
     7f8:	08 95       	ret
     7fa:	8d 32       	cpi	r24, 0x2D	; 45
     7fc:	39 f0       	breq	.+14     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7fe:	8e 32       	cpi	r24, 0x2E	; 46
     800:	a1 f4       	brne	.+40     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     802:	0e 94 33 04 	call	0x866	; 0x866 <led_on>
     806:	6a ef       	ldi	r22, 0xFA	; 250
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	04 c0       	rjmp	.+8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     80c:	0e 94 33 04 	call	0x866	; 0x866 <led_on>
     810:	6e ee       	ldi	r22, 0xEE	; 238
     812:	72 e0       	ldi	r23, 0x02	; 2
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <delay_set>
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <blink_state>
     822:	08 95       	ret
     824:	68 ee       	ldi	r22, 0xE8	; 232
     826:	73 e0       	ldi	r23, 0x03	; 3
     828:	0b c0       	rjmp	.+22     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     82a:	2f 5f       	subi	r18, 0xFF	; 255
     82c:	3f 4f       	sbci	r19, 0xFF	; 255
     82e:	30 93 dd 01 	sts	0x01DD, r19	; 0x8001dd <blink_pos+0x1>
     832:	20 93 dc 01 	sts	0x01DC, r18	; 0x8001dc <blink_pos>
     836:	08 95       	ret
     838:	0e 94 35 04 	call	0x86a	; 0x86a <led_off>
     83c:	64 e6       	ldi	r22, 0x64	; 100
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <delay_set>
     848:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <blink_state>
     84c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <blink_pos>
     850:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <blink_pos+0x1>
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <blink_pos+0x1>
     85a:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <blink_pos>
     85e:	08 95       	ret

00000860 <led_init>:
     860:	21 9a       	sbi	0x04, 1	; 4
     862:	29 98       	cbi	0x05, 1	; 5
     864:	08 95       	ret

00000866 <led_on>:
     866:	29 9a       	sbi	0x05, 1	; 5
     868:	08 95       	ret

0000086a <led_off>:
     86a:	29 98       	cbi	0x05, 1	; 5
     86c:	08 95       	ret

0000086e <led_is_on>:
     86e:	85 b1       	in	r24, 0x05	; 5
     870:	86 95       	lsr	r24
     872:	81 70       	andi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	08 95       	ret

00000878 <log_is_data_valid>:
     878:	80 31       	cpi	r24, 0x10	; 16
     87a:	91 05       	cpc	r25, r1
     87c:	04 f5       	brge	.+64     	; 0x8be <log_is_data_valid+0x46>
     87e:	27 e0       	ldi	r18, 0x07	; 7
     880:	28 9f       	mul	r18, r24
     882:	a0 01       	movw	r20, r0
     884:	29 9f       	mul	r18, r25
     886:	50 0d       	add	r21, r0
     888:	11 24       	eor	r1, r1
     88a:	fa 01       	movw	r30, r20
     88c:	ef 51       	subi	r30, 0x1F	; 31
     88e:	fe 4f       	sbci	r31, 0xFE	; 254
     890:	80 81       	ld	r24, Z
     892:	81 32       	cpi	r24, 0x21	; 33
     894:	a0 f4       	brcc	.+40     	; 0x8be <log_is_data_valid+0x46>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	fa 01       	movw	r30, r20
     89e:	e8 0f       	add	r30, r24
     8a0:	f9 1f       	adc	r31, r25
     8a2:	ef 51       	subi	r30, 0x1F	; 31
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	30 81       	ld	r19, Z
     8a8:	23 0f       	add	r18, r19
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	87 30       	cpi	r24, 0x07	; 7
     8ae:	91 05       	cpc	r25, r1
     8b0:	a9 f7       	brne	.-22     	; 0x89c <log_is_data_valid+0x24>
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	22 23       	and	r18, r18
     8b8:	21 f0       	breq	.+8      	; 0x8c2 <log_is_data_valid+0x4a>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	08 95       	ret
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	08 95       	ret

000008c4 <log_init>:
     8c4:	6f 92       	push	r6
     8c6:	7f 92       	push	r7
     8c8:	8f 92       	push	r8
     8ca:	9f 92       	push	r9
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	cf 92       	push	r12
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <eeprom_isbusy>
     8e4:	89 2b       	or	r24, r25
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <log_init+0x1c>
     8e8:	01 e5       	ldi	r16, 0x51	; 81
     8ea:	12 e0       	ldi	r17, 0x02	; 2
     8ec:	c0 e8       	ldi	r28, 0x80	; 128
     8ee:	d0 e0       	ldi	r29, 0x00	; 0
     8f0:	be 01       	movw	r22, r28
     8f2:	6f 59       	subi	r22, 0x9F	; 159
     8f4:	7e 4f       	sbci	r23, 0xFE	; 254
     8f6:	47 e0       	ldi	r20, 0x07	; 7
     8f8:	ce 01       	movw	r24, r28
     8fa:	0e 94 97 01 	call	0x32e	; 0x32e <eeprom_readbuf>
     8fe:	f8 01       	movw	r30, r16
     900:	11 92       	st	Z+, r1
     902:	8f 01       	movw	r16, r30
     904:	27 96       	adiw	r28, 0x07	; 7
     906:	c0 3f       	cpi	r28, 0xF0	; 240
     908:	d1 05       	cpc	r29, r1
     90a:	91 f7       	brne	.-28     	; 0x8f0 <log_init+0x2c>
     90c:	41 ee       	ldi	r20, 0xE1	; 225
     90e:	e4 2e       	mov	r14, r20
     910:	41 e0       	ldi	r20, 0x01	; 1
     912:	f4 2e       	mov	r15, r20
     914:	87 01       	movw	r16, r14
     916:	c0 e0       	ldi	r28, 0x00	; 0
     918:	d0 e0       	ldi	r29, 0x00	; 0
     91a:	d1 2c       	mov	r13, r1
     91c:	b1 2c       	mov	r11, r1
     91e:	77 24       	eor	r7, r7
     920:	7a 94       	dec	r7
     922:	ce 01       	movw	r24, r28
     924:	0e 94 3c 04 	call	0x878	; 0x878 <log_is_data_valid>
     928:	89 2b       	or	r24, r25
     92a:	41 f0       	breq	.+16     	; 0x93c <__stack+0x3d>
     92c:	f8 01       	movw	r30, r16
     92e:	80 81       	ld	r24, Z
     930:	87 15       	cp	r24, r7
     932:	20 f4       	brcc	.+8      	; 0x93c <__stack+0x3d>
     934:	bc 2e       	mov	r11, r28
     936:	78 2e       	mov	r7, r24
     938:	dd 24       	eor	r13, r13
     93a:	d3 94       	inc	r13
     93c:	21 96       	adiw	r28, 0x01	; 1
     93e:	09 5f       	subi	r16, 0xF9	; 249
     940:	1f 4f       	sbci	r17, 0xFF	; 255
     942:	c0 31       	cpi	r28, 0x10	; 16
     944:	d1 05       	cpc	r29, r1
     946:	69 f7       	brne	.-38     	; 0x922 <__stack+0x23>
     948:	dd 20       	and	r13, r13
     94a:	09 f4       	brne	.+2      	; 0x94e <__stack+0x4f>
     94c:	6a c0       	rjmp	.+212    	; 0xa22 <__stack+0x123>
     94e:	b0 92 e0 01 	sts	0x01E0, r11	; 0x8001e0 <last_written>
     952:	70 92 df 01 	sts	0x01DF, r7	; 0x8001df <last_transaction_written>
     956:	cb 2d       	mov	r28, r11
     958:	d0 e0       	ldi	r29, 0x00	; 0
     95a:	8e 01       	movw	r16, r28
     95c:	0f 5f       	subi	r16, 0xFF	; 255
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	87 2c       	mov	r8, r7
     962:	2f e0       	ldi	r18, 0x0F	; 15
     964:	a2 2e       	mov	r10, r18
     966:	37 e0       	ldi	r19, 0x07	; 7
     968:	93 2e       	mov	r9, r19
     96a:	68 01       	movw	r12, r16
     96c:	ff e0       	ldi	r31, 0x0F	; 15
     96e:	cf 22       	and	r12, r31
     970:	dd 24       	eor	r13, r13
     972:	c6 01       	movw	r24, r12
     974:	0e 94 3c 04 	call	0x878	; 0x878 <log_is_data_valid>
     978:	89 2b       	or	r24, r25
     97a:	61 f4       	brne	.+24     	; 0x994 <__stack+0x95>
     97c:	b0 92 de 01 	sts	0x01DE, r11	; 0x8001de <tail>
     980:	8e 01       	movw	r16, r28
     982:	01 50       	subi	r16, 0x01	; 1
     984:	11 09       	sbc	r17, r1
     986:	60 97       	sbiw	r28, 0x10	; 16
     988:	80 e1       	ldi	r24, 0x10	; 16
     98a:	a8 2e       	mov	r10, r24
     98c:	b1 2c       	mov	r11, r1
     98e:	97 e0       	ldi	r25, 0x07	; 7
     990:	69 2e       	mov	r6, r25
     992:	3a c0       	rjmp	.+116    	; 0xa08 <__stack+0x109>
     994:	9c 9c       	mul	r9, r12
     996:	f0 01       	movw	r30, r0
     998:	9d 9c       	mul	r9, r13
     99a:	f0 0d       	add	r31, r0
     99c:	11 24       	eor	r1, r1
     99e:	ef 51       	subi	r30, 0x1F	; 31
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	40 81       	ld	r20, Z
     9a4:	24 2f       	mov	r18, r20
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	88 2d       	mov	r24, r8
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	8f 71       	andi	r24, 0x1F	; 31
     9b0:	99 27       	eor	r25, r25
     9b2:	28 17       	cp	r18, r24
     9b4:	39 07       	cpc	r19, r25
     9b6:	11 f7       	brne	.-60     	; 0x97c <__stack+0x7d>
     9b8:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <last_written>
     9bc:	40 93 df 01 	sts	0x01DF, r20	; 0x8001df <last_transaction_written>
     9c0:	aa 94       	dec	r10
     9c2:	0f 5f       	subi	r16, 0xFF	; 255
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
     9c6:	aa 20       	and	r10, r10
     9c8:	c9 f2       	breq	.-78     	; 0x97c <__stack+0x7d>
     9ca:	84 2e       	mov	r8, r20
     9cc:	ce cf       	rjmp	.-100    	; 0x96a <__stack+0x6b>
     9ce:	f7 01       	movw	r30, r14
     9d0:	20 81       	ld	r18, Z
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	87 2d       	mov	r24, r7
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	4f 96       	adiw	r24, 0x1f	; 31
     9da:	8f 71       	andi	r24, 0x1F	; 31
     9dc:	99 27       	eor	r25, r25
     9de:	28 17       	cp	r18, r24
     9e0:	39 07       	cpc	r19, r25
     9e2:	31 f5       	brne	.+76     	; 0xa30 <__stack+0x131>
     9e4:	c0 92 de 01 	sts	0x01DE, r12	; 0x8001de <tail>
     9e8:	68 9c       	mul	r6, r8
     9ea:	f0 01       	movw	r30, r0
     9ec:	69 9c       	mul	r6, r9
     9ee:	f0 0d       	add	r31, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	ef 51       	subi	r30, 0x1F	; 31
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	70 80       	ld	r7, Z
     9f8:	01 50       	subi	r16, 0x01	; 1
     9fa:	11 09       	sbc	r17, r1
     9fc:	f7 e0       	ldi	r31, 0x07	; 7
     9fe:	ef 0e       	add	r14, r31
     a00:	f1 1c       	adc	r15, r1
     a02:	0c 17       	cp	r16, r28
     a04:	1d 07       	cpc	r17, r29
     a06:	a1 f0       	breq	.+40     	; 0xa30 <__stack+0x131>
     a08:	c8 01       	movw	r24, r16
     a0a:	b5 01       	movw	r22, r10
     a0c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divmodhi4>
     a10:	6c 01       	movw	r12, r24
     a12:	4c 01       	movw	r8, r24
     a14:	99 24       	eor	r9, r9
     a16:	c4 01       	movw	r24, r8
     a18:	0e 94 3c 04 	call	0x878	; 0x878 <log_is_data_valid>
     a1c:	89 2b       	or	r24, r25
     a1e:	b9 f6       	brne	.-82     	; 0x9ce <__stack+0xcf>
     a20:	07 c0       	rjmp	.+14     	; 0xa30 <__stack+0x131>
     a22:	8f e0       	ldi	r24, 0x0F	; 15
     a24:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <last_written>
     a28:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <last_transaction_written>
     a2c:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <tail>
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	9f 90       	pop	r9
     a46:	8f 90       	pop	r8
     a48:	7f 90       	pop	r7
     a4a:	6f 90       	pop	r6
     a4c:	08 95       	ret

00000a4e <log_update>:
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	0e 94 e7 01 	call	0x3ce	; 0x3ce <eeprom_isbusy>
     a5c:	89 2b       	or	r24, r25
     a5e:	39 f5       	brne	.+78     	; 0xaae <log_update+0x60>
     a60:	e1 e5       	ldi	r30, 0x51	; 81
     a62:	f2 e0       	ldi	r31, 0x02	; 2
     a64:	c0 e0       	ldi	r28, 0x00	; 0
     a66:	d0 e0       	ldi	r29, 0x00	; 0
     a68:	81 91       	ld	r24, Z+
     a6a:	88 23       	and	r24, r24
     a6c:	e1 f0       	breq	.+56     	; 0xaa6 <log_update+0x58>
     a6e:	17 e0       	ldi	r17, 0x07	; 7
     a70:	1c 9f       	mul	r17, r28
     a72:	c0 01       	movw	r24, r0
     a74:	1d 9f       	mul	r17, r29
     a76:	90 0d       	add	r25, r0
     a78:	11 24       	eor	r1, r1
     a7a:	9c 01       	movw	r18, r24
     a7c:	2f 51       	subi	r18, 0x1F	; 31
     a7e:	3e 4f       	sbci	r19, 0xFE	; 254
     a80:	79 01       	movw	r14, r18
     a82:	67 e0       	ldi	r22, 0x07	; 7
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	c9 01       	movw	r24, r18
     a88:	0e 94 93 02 	call	0x526	; 0x526 <update_checksum>
     a8c:	c1 9f       	mul	r28, r17
     a8e:	c0 01       	movw	r24, r0
     a90:	11 24       	eor	r1, r1
     a92:	47 e0       	ldi	r20, 0x07	; 7
     a94:	b7 01       	movw	r22, r14
     a96:	80 58       	subi	r24, 0x80	; 128
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	0e 94 42 01 	call	0x284	; 0x284 <eeprom_writebuf>
     a9e:	cf 5a       	subi	r28, 0xAF	; 175
     aa0:	dd 4f       	sbci	r29, 0xFD	; 253
     aa2:	18 82       	st	Y, r1
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <log_update+0x60>
     aa6:	21 96       	adiw	r28, 0x01	; 1
     aa8:	c0 31       	cpi	r28, 0x10	; 16
     aaa:	d1 05       	cpc	r29, r1
     aac:	e9 f6       	brne	.-70     	; 0xa68 <log_update+0x1a>
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	08 95       	ret

00000aba <log_add_record>:
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	e8 2e       	mov	r14, r24
     ac8:	c0 91 e0 01 	lds	r28, 0x01E0	; 0x8001e0 <last_written>
     acc:	d0 e0       	ldi	r29, 0x00	; 0
     ace:	21 96       	adiw	r28, 0x01	; 1
     ad0:	cf 70       	andi	r28, 0x0F	; 15
     ad2:	dd 27       	eor	r29, r29
     ad4:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <tail>
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 3c 04 	call	0x878	; 0x878 <log_is_data_valid>
     ade:	f8 2e       	mov	r15, r24
     ae0:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <last_transaction_written>
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	81 32       	cpi	r24, 0x21	; 33
     ae8:	18 f4       	brcc	.+6      	; 0xaf0 <log_add_record+0x36>
     aea:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <last_transaction_written>
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <log_add_record+0x3a>
     af0:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <last_transaction_written>
     af4:	87 e0       	ldi	r24, 0x07	; 7
     af6:	8c 9f       	mul	r24, r28
     af8:	80 01       	movw	r16, r0
     afa:	8d 9f       	mul	r24, r29
     afc:	10 0d       	add	r17, r0
     afe:	11 24       	eor	r1, r1
     b00:	0f 51       	subi	r16, 0x1F	; 31
     b02:	1e 4f       	sbci	r17, 0xFE	; 254
     b04:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <last_transaction_written>
     b08:	f8 01       	movw	r30, r16
     b0a:	80 83       	st	Z, r24
     b0c:	0e 94 2a 06 	call	0xc54	; 0xc54 <rtc_get_date>
     b10:	f8 01       	movw	r30, r16
     b12:	61 83       	std	Z+1, r22	; 0x01
     b14:	72 83       	std	Z+2, r23	; 0x02
     b16:	83 83       	std	Z+3, r24	; 0x03
     b18:	94 83       	std	Z+4, r25	; 0x04
     b1a:	e5 82       	std	Z+5, r14	; 0x05
     b1c:	c0 93 e0 01 	sts	0x01E0, r28	; 0x8001e0 <last_written>
     b20:	67 e0       	ldi	r22, 0x07	; 7
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	c8 01       	movw	r24, r16
     b26:	0e 94 93 02 	call	0x526	; 0x526 <update_checksum>
     b2a:	cf 5a       	subi	r28, 0xAF	; 175
     b2c:	dd 4f       	sbci	r29, 0xFD	; 253
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	88 83       	st	Y, r24
     b32:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <last_written>
     b36:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <tail>
     b3a:	89 13       	cpse	r24, r25
     b3c:	08 c0       	rjmp	.+16     	; 0xb4e <log_add_record+0x94>
     b3e:	ff 20       	and	r15, r15
     b40:	31 f0       	breq	.+12     	; 0xb4e <log_add_record+0x94>
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	8f 70       	andi	r24, 0x0F	; 15
     b48:	99 27       	eor	r25, r25
     b4a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <tail>
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	08 95       	ret

00000b5c <log_clear>:
     b5c:	e1 ee       	ldi	r30, 0xE1	; 225
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	a1 e5       	ldi	r26, 0x51	; 81
     b62:	b2 e0       	ldi	r27, 0x02	; 2
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	4f ef       	ldi	r20, 0xFF	; 255
     b68:	5f ef       	ldi	r21, 0xFF	; 255
     b6a:	ba 01       	movw	r22, r20
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	80 83       	st	Z, r24
     b70:	85 83       	std	Z+5, r24	; 0x05
     b72:	41 83       	std	Z+1, r20	; 0x01
     b74:	52 83       	std	Z+2, r21	; 0x02
     b76:	63 83       	std	Z+3, r22	; 0x03
     b78:	74 83       	std	Z+4, r23	; 0x04
     b7a:	9d 93       	st	X+, r25
     b7c:	37 96       	adiw	r30, 0x07	; 7
     b7e:	22 e0       	ldi	r18, 0x02	; 2
     b80:	e1 35       	cpi	r30, 0x51	; 81
     b82:	f2 07       	cpc	r31, r18
     b84:	a1 f7       	brne	.-24     	; 0xb6e <log_clear+0x12>
     b86:	8f e0       	ldi	r24, 0x0F	; 15
     b88:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <last_written>
     b8c:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <tail>
     b90:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <last_transaction_written>
     b94:	08 95       	ret

00000b96 <log_get_num_entries>:
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	00 91 de 01 	lds	r16, 0x01DE	; 0x8001de <tail>
     ba2:	c0 2f       	mov	r28, r16
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	d0 e0       	ldi	r29, 0x00	; 0
     ba8:	ce 01       	movw	r24, r28
     baa:	0e 94 3c 04 	call	0x878	; 0x878 <log_is_data_valid>
     bae:	89 2b       	or	r24, r25
     bb0:	29 f0       	breq	.+10     	; 0xbbc <log_get_num_entries+0x26>
     bb2:	21 96       	adiw	r28, 0x01	; 1
     bb4:	cf 70       	andi	r28, 0x0F	; 15
     bb6:	1f 5f       	subi	r17, 0xFF	; 255
     bb8:	0c 13       	cpse	r16, r28
     bba:	f5 cf       	rjmp	.-22     	; 0xba6 <log_get_num_entries+0x10>
     bbc:	81 2f       	mov	r24, r17
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	08 95       	ret

00000bc8 <log_get_record>:
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	6b 01       	movw	r12, r22
     bde:	7c 01       	movw	r14, r24
     be0:	8a 01       	movw	r16, r20
     be2:	59 01       	movw	r10, r18
     be4:	0e 94 cb 05 	call	0xb96	; 0xb96 <log_get_num_entries>
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	c8 16       	cp	r12, r24
     bf0:	d9 06       	cpc	r13, r25
     bf2:	ea 06       	cpc	r14, r26
     bf4:	fb 06       	cpc	r15, r27
     bf6:	f8 f4       	brcc	.+62     	; 0xc36 <log_get_record+0x6e>
     bf8:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <tail>
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	c8 0e       	add	r12, r24
     c00:	d9 1e       	adc	r13, r25
     c02:	8f e0       	ldi	r24, 0x0F	; 15
     c04:	c8 22       	and	r12, r24
     c06:	dd 24       	eor	r13, r13
     c08:	87 e0       	ldi	r24, 0x07	; 7
     c0a:	8c 9d       	mul	r24, r12
     c0c:	f0 01       	movw	r30, r0
     c0e:	8d 9d       	mul	r24, r13
     c10:	f0 0d       	add	r31, r0
     c12:	11 24       	eor	r1, r1
     c14:	ef 51       	subi	r30, 0x1F	; 31
     c16:	fe 4f       	sbci	r31, 0xFE	; 254
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	92 81       	ldd	r25, Z+2	; 0x02
     c1c:	a3 81       	ldd	r26, Z+3	; 0x03
     c1e:	b4 81       	ldd	r27, Z+4	; 0x04
     c20:	e8 01       	movw	r28, r16
     c22:	88 83       	st	Y, r24
     c24:	99 83       	std	Y+1, r25	; 0x01
     c26:	aa 83       	std	Y+2, r26	; 0x02
     c28:	bb 83       	std	Y+3, r27	; 0x03
     c2a:	85 81       	ldd	r24, Z+5	; 0x05
     c2c:	f5 01       	movw	r30, r10
     c2e:	80 83       	st	Z, r24
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <log_get_record+0x72>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	bf 90       	pop	r11
     c4c:	af 90       	pop	r10
     c4e:	08 95       	ret

00000c50 <rtc_init>:
     c50:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <timer1_init>

00000c54 <rtc_get_date>:
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	0e 94 bb 09 	call	0x1376	; 0x1376 <timer1_get>
     c5c:	00 91 c1 04 	lds	r16, 0x04C1	; 0x8004c1 <rtc_base>
     c60:	10 91 c2 04 	lds	r17, 0x04C2	; 0x8004c2 <rtc_base+0x1>
     c64:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <rtc_base+0x2>
     c68:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <rtc_base+0x3>
     c6c:	60 0f       	add	r22, r16
     c6e:	71 1f       	adc	r23, r17
     c70:	82 1f       	adc	r24, r18
     c72:	93 1f       	adc	r25, r19
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	08 95       	ret

00000c7a <is_leapyear>:
     c7a:	9c 01       	movw	r18, r24
     c7c:	60 e9       	ldi	r22, 0x90	; 144
     c7e:	71 e0       	ldi	r23, 0x01	; 1
     c80:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__udivmodhi4>
     c84:	89 2b       	or	r24, r25
     c86:	79 f0       	breq	.+30     	; 0xca6 <is_leapyear+0x2c>
     c88:	c9 01       	movw	r24, r18
     c8a:	83 70       	andi	r24, 0x03	; 3
     c8c:	99 27       	eor	r25, r25
     c8e:	89 2b       	or	r24, r25
     c90:	61 f4       	brne	.+24     	; 0xcaa <is_leapyear+0x30>
     c92:	c9 01       	movw	r24, r18
     c94:	64 e6       	ldi	r22, 0x64	; 100
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__udivmodhi4>
     c9c:	9c 01       	movw	r18, r24
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	23 2b       	or	r18, r19
     ca2:	21 f4       	brne	.+8      	; 0xcac <is_leapyear+0x32>
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <is_leapyear+0x30>
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	08 95       	ret
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	08 95       	ret

00000cae <rtc_set_by_datestr>:
     cae:	2f 92       	push	r2
     cb0:	3f 92       	push	r3
     cb2:	4f 92       	push	r4
     cb4:	5f 92       	push	r5
     cb6:	6f 92       	push	r6
     cb8:	7f 92       	push	r7
     cba:	8f 92       	push	r8
     cbc:	9f 92       	push	r9
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	67 97       	sbiw	r28, 0x17	; 23
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	2c e0       	ldi	r18, 0x0C	; 12
     ce4:	e1 eb       	ldi	r30, 0xB1	; 177
     ce6:	f1 e0       	ldi	r31, 0x01	; 1
     ce8:	ae 01       	movw	r20, r28
     cea:	4f 5f       	subi	r20, 0xFF	; 255
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	1a 01       	movw	r2, r20
     cf0:	da 01       	movw	r26, r20
     cf2:	01 90       	ld	r0, Z+
     cf4:	0d 92       	st	X+, r0
     cf6:	2a 95       	dec	r18
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <rtc_set_by_datestr+0x44>
     cfa:	dc 01       	movw	r26, r24
     cfc:	2c 91       	ld	r18, X
     cfe:	22 0f       	add	r18, r18
     d00:	20 56       	subi	r18, 0x60	; 96
     d02:	32 2f       	mov	r19, r18
     d04:	33 0f       	add	r19, r19
     d06:	33 0f       	add	r19, r19
     d08:	23 0f       	add	r18, r19
     d0a:	11 96       	adiw	r26, 0x01	; 1
     d0c:	3c 91       	ld	r19, X
     d0e:	11 97       	sbiw	r26, 0x01	; 1
     d10:	31 53       	subi	r19, 0x31	; 49
     d12:	23 0f       	add	r18, r19
     d14:	2d 87       	std	Y+13, r18	; 0x0d
     d16:	13 96       	adiw	r26, 0x03	; 3
     d18:	2c 91       	ld	r18, X
     d1a:	13 97       	sbiw	r26, 0x03	; 3
     d1c:	02 2e       	mov	r0, r18
     d1e:	00 0c       	add	r0, r0
     d20:	33 0b       	sbc	r19, r19
     d22:	20 53       	subi	r18, 0x30	; 48
     d24:	31 09       	sbc	r19, r1
     d26:	6a e0       	ldi	r22, 0x0A	; 10
     d28:	62 9f       	mul	r22, r18
     d2a:	a0 01       	movw	r20, r0
     d2c:	63 9f       	mul	r22, r19
     d2e:	50 0d       	add	r21, r0
     d30:	11 24       	eor	r1, r1
     d32:	14 96       	adiw	r26, 0x04	; 4
     d34:	cc 90       	ld	r12, X
     d36:	0c 2c       	mov	r0, r12
     d38:	00 0c       	add	r0, r0
     d3a:	dd 08       	sbc	r13, r13
     d3c:	b0 e3       	ldi	r27, 0x30	; 48
     d3e:	cb 1a       	sub	r12, r27
     d40:	d1 08       	sbc	r13, r1
     d42:	c4 0e       	add	r12, r20
     d44:	d5 1e       	adc	r13, r21
     d46:	86 01       	movw	r16, r12
     d48:	01 50       	subi	r16, 0x01	; 1
     d4a:	11 09       	sbc	r17, r1
     d4c:	fc 01       	movw	r30, r24
     d4e:	26 81       	ldd	r18, Z+6	; 0x06
     d50:	02 2e       	mov	r0, r18
     d52:	00 0c       	add	r0, r0
     d54:	33 0b       	sbc	r19, r19
     d56:	20 53       	subi	r18, 0x30	; 48
     d58:	31 09       	sbc	r19, r1
     d5a:	e8 ee       	ldi	r30, 0xE8	; 232
     d5c:	f3 e0       	ldi	r31, 0x03	; 3
     d5e:	2e 9f       	mul	r18, r30
     d60:	a0 01       	movw	r20, r0
     d62:	2f 9f       	mul	r18, r31
     d64:	50 0d       	add	r21, r0
     d66:	3e 9f       	mul	r19, r30
     d68:	50 0d       	add	r21, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	dc 01       	movw	r26, r24
     d6e:	17 96       	adiw	r26, 0x07	; 7
     d70:	2c 91       	ld	r18, X
     d72:	17 97       	sbiw	r26, 0x07	; 7
     d74:	02 2e       	mov	r0, r18
     d76:	00 0c       	add	r0, r0
     d78:	33 0b       	sbc	r19, r19
     d7a:	20 53       	subi	r18, 0x30	; 48
     d7c:	31 09       	sbc	r19, r1
     d7e:	74 e6       	ldi	r23, 0x64	; 100
     d80:	72 9f       	mul	r23, r18
     d82:	70 01       	movw	r14, r0
     d84:	73 9f       	mul	r23, r19
     d86:	f0 0c       	add	r15, r0
     d88:	11 24       	eor	r1, r1
     d8a:	e4 0e       	add	r14, r20
     d8c:	f5 1e       	adc	r15, r21
     d8e:	18 96       	adiw	r26, 0x08	; 8
     d90:	4c 91       	ld	r20, X
     d92:	18 97       	sbiw	r26, 0x08	; 8
     d94:	04 2e       	mov	r0, r20
     d96:	00 0c       	add	r0, r0
     d98:	55 0b       	sbc	r21, r21
     d9a:	40 53       	subi	r20, 0x30	; 48
     d9c:	51 09       	sbc	r21, r1
     d9e:	64 9f       	mul	r22, r20
     da0:	90 01       	movw	r18, r0
     da2:	65 9f       	mul	r22, r21
     da4:	30 0d       	add	r19, r0
     da6:	11 24       	eor	r1, r1
     da8:	e2 0e       	add	r14, r18
     daa:	f3 1e       	adc	r15, r19
     dac:	19 96       	adiw	r26, 0x09	; 9
     dae:	2c 91       	ld	r18, X
     db0:	19 97       	sbiw	r26, 0x09	; 9
     db2:	f7 01       	movw	r30, r14
     db4:	e2 0f       	add	r30, r18
     db6:	f1 1d       	adc	r31, r1
     db8:	27 fd       	sbrc	r18, 7
     dba:	fa 95       	dec	r31
     dbc:	af 01       	movw	r20, r30
     dbe:	58 50       	subi	r21, 0x08	; 8
     dc0:	7a 01       	movw	r14, r20
     dc2:	1b 96       	adiw	r26, 0x0b	; 11
     dc4:	2c 91       	ld	r18, X
     dc6:	1b 97       	sbiw	r26, 0x0b	; 11
     dc8:	22 0f       	add	r18, r18
     dca:	20 56       	subi	r18, 0x60	; 96
     dcc:	32 2f       	mov	r19, r18
     dce:	33 0f       	add	r19, r19
     dd0:	33 0f       	add	r19, r19
     dd2:	23 0f       	add	r18, r19
     dd4:	1c 96       	adiw	r26, 0x0c	; 12
     dd6:	3c 91       	ld	r19, X
     dd8:	1c 97       	sbiw	r26, 0x0c	; 12
     dda:	30 53       	subi	r19, 0x30	; 48
     ddc:	23 0f       	add	r18, r19
     dde:	29 8b       	std	Y+17, r18	; 0x11
     de0:	1e 96       	adiw	r26, 0x0e	; 14
     de2:	2c 91       	ld	r18, X
     de4:	1e 97       	sbiw	r26, 0x0e	; 14
     de6:	22 0f       	add	r18, r18
     de8:	20 56       	subi	r18, 0x60	; 96
     dea:	32 2f       	mov	r19, r18
     dec:	33 0f       	add	r19, r19
     dee:	33 0f       	add	r19, r19
     df0:	23 0f       	add	r18, r19
     df2:	1f 96       	adiw	r26, 0x0f	; 15
     df4:	3c 91       	ld	r19, X
     df6:	1f 97       	sbiw	r26, 0x0f	; 15
     df8:	30 53       	subi	r19, 0x30	; 48
     dfa:	23 0f       	add	r18, r19
     dfc:	2a 8b       	std	Y+18, r18	; 0x12
     dfe:	51 96       	adiw	r26, 0x11	; 17
     e00:	2c 91       	ld	r18, X
     e02:	51 97       	sbiw	r26, 0x11	; 17
     e04:	22 0f       	add	r18, r18
     e06:	20 56       	subi	r18, 0x60	; 96
     e08:	32 2f       	mov	r19, r18
     e0a:	33 0f       	add	r19, r19
     e0c:	33 0f       	add	r19, r19
     e0e:	23 0f       	add	r18, r19
     e10:	52 96       	adiw	r26, 0x12	; 18
     e12:	8c 91       	ld	r24, X
     e14:	80 53       	subi	r24, 0x30	; 48
     e16:	28 0f       	add	r18, r24
     e18:	2b 8b       	std	Y+19, r18	; 0x13
     e1a:	ca 01       	movw	r24, r20
     e1c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <is_leapyear>
     e20:	88 23       	and	r24, r24
     e22:	21 f0       	breq	.+8      	; 0xe2c <rtc_set_by_datestr+0x17e>
     e24:	5d 85       	ldd	r21, Y+13	; 0x0d
     e26:	52 30       	cpi	r21, 0x02	; 2
     e28:	08 f0       	brcs	.+2      	; 0xe2c <rtc_set_by_datestr+0x17e>
     e2a:	86 01       	movw	r16, r12
     e2c:	c7 01       	movw	r24, r14
     e2e:	60 e9       	ldi	r22, 0x90	; 144
     e30:	71 e0       	ldi	r23, 0x01	; 1
     e32:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__udivmodhi4>
     e36:	fc 01       	movw	r30, r24
     e38:	db 01       	movw	r26, r22
     e3a:	20 e8       	ldi	r18, 0x80	; 128
     e3c:	39 e5       	ldi	r19, 0x59	; 89
     e3e:	40 e6       	ldi	r20, 0x60	; 96
     e40:	50 ef       	ldi	r21, 0xF0	; 240
     e42:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__muluhisi3>
     e46:	2b 01       	movw	r4, r22
     e48:	3c 01       	movw	r6, r24
     e4a:	cf 01       	movw	r24, r30
     e4c:	64 e6       	ldi	r22, 0x64	; 100
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__udivmodhi4>
     e54:	fc 01       	movw	r30, r24
     e56:	db 01       	movw	r26, r22
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	32 ec       	ldi	r19, 0xC2	; 194
     e5c:	47 e1       	ldi	r20, 0x17	; 23
     e5e:	5c eb       	ldi	r21, 0xBC	; 188
     e60:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__muluhisi3>
     e64:	4b 01       	movw	r8, r22
     e66:	5c 01       	movw	r10, r24
     e68:	df 01       	movw	r26, r30
     e6a:	b6 95       	lsr	r27
     e6c:	a7 95       	ror	r26
     e6e:	b6 95       	lsr	r27
     e70:	a7 95       	ror	r26
     e72:	20 e8       	ldi	r18, 0x80	; 128
     e74:	3f e1       	ldi	r19, 0x1F	; 31
     e76:	46 e8       	ldi	r20, 0x86	; 134
     e78:	57 e0       	ldi	r21, 0x07	; 7
     e7a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__muluhisi3>
     e7e:	6b 01       	movw	r12, r22
     e80:	7c 01       	movw	r14, r24
     e82:	df 01       	movw	r26, r30
     e84:	a3 70       	andi	r26, 0x03	; 3
     e86:	bb 27       	eor	r27, r27
     e88:	20 e8       	ldi	r18, 0x80	; 128
     e8a:	33 e3       	ldi	r19, 0x33	; 51
     e8c:	41 ee       	ldi	r20, 0xE1	; 225
     e8e:	51 e0       	ldi	r21, 0x01	; 1
     e90:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__muluhisi3>
     e94:	6c 8b       	std	Y+20, r22	; 0x14
     e96:	7d 8b       	std	Y+21, r23	; 0x15
     e98:	8e 8b       	std	Y+22, r24	; 0x16
     e9a:	9f 8b       	std	Y+23, r25	; 0x17
     e9c:	f1 01       	movw	r30, r2
     e9e:	8e 2f       	mov	r24, r30
     ea0:	82 19       	sub	r24, r2
     ea2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ea4:	89 17       	cp	r24, r25
     ea6:	20 f4       	brcc	.+8      	; 0xeb0 <rtc_set_by_datestr+0x202>
     ea8:	81 91       	ld	r24, Z+
     eaa:	08 0f       	add	r16, r24
     eac:	11 1d       	adc	r17, r1
     eae:	f7 cf       	rjmp	.-18     	; 0xe9e <rtc_set_by_datestr+0x1f0>
     eb0:	a9 89       	ldd	r26, Y+17	; 0x11
     eb2:	2a 2f       	mov	r18, r26
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	a0 e1       	ldi	r26, 0x10	; 16
     eb8:	be e0       	ldi	r27, 0x0E	; 14
     eba:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__umulhisi3>
     ebe:	6d 87       	std	Y+13, r22	; 0x0d
     ec0:	7e 87       	std	Y+14, r23	; 0x0e
     ec2:	8f 87       	std	Y+15, r24	; 0x0f
     ec4:	98 8b       	std	Y+16, r25	; 0x10
     ec6:	ba 89       	ldd	r27, Y+18	; 0x12
     ec8:	2b 2f       	mov	r18, r27
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	ac e3       	ldi	r26, 0x3C	; 60
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__umulhisi3>
     ed4:	2d 85       	ldd	r18, Y+13	; 0x0d
     ed6:	3e 85       	ldd	r19, Y+14	; 0x0e
     ed8:	4f 85       	ldd	r20, Y+15	; 0x0f
     eda:	58 89       	ldd	r21, Y+16	; 0x10
     edc:	26 0f       	add	r18, r22
     ede:	37 1f       	adc	r19, r23
     ee0:	48 1f       	adc	r20, r24
     ee2:	59 1f       	adc	r21, r25
     ee4:	da 01       	movw	r26, r20
     ee6:	c9 01       	movw	r24, r18
     ee8:	3b 89       	ldd	r19, Y+19	; 0x13
     eea:	83 0f       	add	r24, r19
     eec:	91 1d       	adc	r25, r1
     eee:	a1 1d       	adc	r26, r1
     ef0:	b1 1d       	adc	r27, r1
     ef2:	48 0e       	add	r4, r24
     ef4:	59 1e       	adc	r5, r25
     ef6:	6a 1e       	adc	r6, r26
     ef8:	7b 1e       	adc	r7, r27
     efa:	84 0c       	add	r8, r4
     efc:	95 1c       	adc	r9, r5
     efe:	a6 1c       	adc	r10, r6
     f00:	b7 1c       	adc	r11, r7
     f02:	c8 0c       	add	r12, r8
     f04:	d9 1c       	adc	r13, r9
     f06:	ea 1c       	adc	r14, r10
     f08:	fb 1c       	adc	r15, r11
     f0a:	8c 89       	ldd	r24, Y+20	; 0x14
     f0c:	9d 89       	ldd	r25, Y+21	; 0x15
     f0e:	ae 89       	ldd	r26, Y+22	; 0x16
     f10:	bf 89       	ldd	r27, Y+23	; 0x17
     f12:	c8 0e       	add	r12, r24
     f14:	d9 1e       	adc	r13, r25
     f16:	ea 1e       	adc	r14, r26
     f18:	fb 1e       	adc	r15, r27
     f1a:	d8 01       	movw	r26, r16
     f1c:	20 e8       	ldi	r18, 0x80	; 128
     f1e:	31 e5       	ldi	r19, 0x51	; 81
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__muluhisi3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	8c 0d       	add	r24, r12
     f2e:	9d 1d       	adc	r25, r13
     f30:	ae 1d       	adc	r26, r14
     f32:	bf 1d       	adc	r27, r15
     f34:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <rtc_base>
     f38:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <rtc_base+0x1>
     f3c:	a0 93 c3 04 	sts	0x04C3, r26	; 0x8004c3 <rtc_base+0x2>
     f40:	b0 93 c4 04 	sts	0x04C4, r27	; 0x8004c4 <rtc_base+0x3>
     f44:	67 96       	adiw	r28, 0x17	; 23
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	cf 90       	pop	r12
     f60:	bf 90       	pop	r11
     f62:	af 90       	pop	r10
     f64:	9f 90       	pop	r9
     f66:	8f 90       	pop	r8
     f68:	7f 90       	pop	r7
     f6a:	6f 90       	pop	r6
     f6c:	5f 90       	pop	r5
     f6e:	4f 90       	pop	r4
     f70:	3f 90       	pop	r3
     f72:	2f 90       	pop	r2
     f74:	0c 94 c7 09 	jmp	0x138e	; 0x138e <timer1_clear>

00000f78 <get_month>:
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	68 97       	sbiw	r28, 0x18	; 24
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	7b 01       	movw	r14, r22
     f96:	2c e0       	ldi	r18, 0x0C	; 12
     f98:	e1 eb       	ldi	r30, 0xB1	; 177
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	de 01       	movw	r26, r28
     f9e:	1d 96       	adiw	r26, 0x0d	; 13
     fa0:	01 90       	ld	r0, Z+
     fa2:	0d 92       	st	X+, r0
     fa4:	2a 95       	dec	r18
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <get_month+0x28>
     fa8:	8e 01       	movw	r16, r28
     faa:	0f 5f       	subi	r16, 0xFF	; 255
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	2c e0       	ldi	r18, 0x0C	; 12
     fb0:	f8 01       	movw	r30, r16
     fb2:	11 92       	st	Z+, r1
     fb4:	2a 95       	dec	r18
     fb6:	e9 f7       	brne	.-6      	; 0xfb2 <get_month+0x3a>
     fb8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <is_leapyear>
     fbc:	8a 83       	std	Y+2, r24	; 0x02
     fbe:	de 01       	movw	r26, r28
     fc0:	1d 96       	adiw	r26, 0x0d	; 13
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	f7 01       	movw	r30, r14
     fc6:	40 81       	ld	r20, Z
     fc8:	51 81       	ldd	r21, Z+1	; 0x01
     fca:	9d 91       	ld	r25, X+
     fcc:	f8 01       	movw	r30, r16
     fce:	21 91       	ld	r18, Z+
     fd0:	8f 01       	movw	r16, r30
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	29 0f       	add	r18, r25
     fd6:	31 1d       	adc	r19, r1
     fd8:	42 17       	cp	r20, r18
     fda:	53 07       	cpc	r21, r19
     fdc:	40 f0       	brcs	.+16     	; 0xfee <get_month+0x76>
     fde:	42 1b       	sub	r20, r18
     fe0:	53 0b       	sbc	r21, r19
     fe2:	f7 01       	movw	r30, r14
     fe4:	51 83       	std	Z+1, r21	; 0x01
     fe6:	40 83       	st	Z, r20
     fe8:	8f 5f       	subi	r24, 0xFF	; 255
     fea:	8c 30       	cpi	r24, 0x0C	; 12
     fec:	59 f7       	brne	.-42     	; 0xfc4 <get_month+0x4c>
     fee:	68 96       	adiw	r28, 0x18	; 24
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	08 95       	ret

00001008 <rtc_num2datestr>:
    1008:	4f 92       	push	r4
    100a:	5f 92       	push	r5
    100c:	6f 92       	push	r6
    100e:	7f 92       	push	r7
    1010:	8f 92       	push	r8
    1012:	9f 92       	push	r9
    1014:	af 92       	push	r10
    1016:	bf 92       	push	r11
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	00 d0       	rcall	.+0      	; 0x1026 <rtc_num2datestr+0x1e>
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	2b 01       	movw	r4, r22
    102c:	3c 01       	movw	r6, r24
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	20 e8       	ldi	r18, 0x80	; 128
    1038:	42 16       	cp	r4, r18
    103a:	29 e5       	ldi	r18, 0x59	; 89
    103c:	52 06       	cpc	r5, r18
    103e:	20 e6       	ldi	r18, 0x60	; 96
    1040:	62 06       	cpc	r6, r18
    1042:	20 ef       	ldi	r18, 0xF0	; 240
    1044:	72 06       	cpc	r7, r18
    1046:	18 f4       	brcc	.+6      	; 0x104e <rtc_num2datestr+0x46>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	dc 01       	movw	r26, r24
    104e:	20 e9       	ldi	r18, 0x90	; 144
    1050:	31 e0       	ldi	r19, 0x01	; 1
    1052:	82 9f       	mul	r24, r18
    1054:	50 01       	movw	r10, r0
    1056:	83 9f       	mul	r24, r19
    1058:	b0 0c       	add	r11, r0
    105a:	92 9f       	mul	r25, r18
    105c:	b0 0c       	add	r11, r0
    105e:	11 24       	eor	r1, r1
    1060:	80 e3       	ldi	r24, 0x30	; 48
    1062:	a8 1a       	sub	r10, r24
    1064:	88 ef       	ldi	r24, 0xF8	; 248
    1066:	b8 0a       	sbc	r11, r24
    1068:	c1 2c       	mov	r12, r1
    106a:	d1 2c       	mov	r13, r1
    106c:	76 01       	movw	r14, r12
    106e:	c3 94       	inc	r12
    1070:	20 e8       	ldi	r18, 0x80	; 128
    1072:	42 16       	cp	r4, r18
    1074:	29 e5       	ldi	r18, 0x59	; 89
    1076:	52 06       	cpc	r5, r18
    1078:	20 e6       	ldi	r18, 0x60	; 96
    107a:	62 06       	cpc	r6, r18
    107c:	20 ef       	ldi	r18, 0xF0	; 240
    107e:	72 06       	cpc	r7, r18
    1080:	18 f4       	brcc	.+6      	; 0x1088 <rtc_num2datestr+0x80>
    1082:	c1 2c       	mov	r12, r1
    1084:	d1 2c       	mov	r13, r1
    1086:	76 01       	movw	r14, r12
    1088:	a7 01       	movw	r20, r14
    108a:	96 01       	movw	r18, r12
    108c:	60 e8       	ldi	r22, 0x80	; 128
    108e:	79 e5       	ldi	r23, 0x59	; 89
    1090:	80 e6       	ldi	r24, 0x60	; 96
    1092:	90 ef       	ldi	r25, 0xF0	; 240
    1094:	0e 94 ef 0c 	call	0x19de	; 0x19de <__mulsi3>
    1098:	73 01       	movw	r14, r6
    109a:	62 01       	movw	r12, r4
    109c:	c6 1a       	sub	r12, r22
    109e:	d7 0a       	sbc	r13, r23
    10a0:	e8 0a       	sbc	r14, r24
    10a2:	f9 0a       	sbc	r15, r25
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	c1 14       	cp	r12, r1
    10ae:	22 ec       	ldi	r18, 0xC2	; 194
    10b0:	d2 06       	cpc	r13, r18
    10b2:	27 e1       	ldi	r18, 0x17	; 23
    10b4:	e2 06       	cpc	r14, r18
    10b6:	2c eb       	ldi	r18, 0xBC	; 188
    10b8:	f2 06       	cpc	r15, r18
    10ba:	18 f4       	brcc	.+6      	; 0x10c2 <rtc_num2datestr+0xba>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	dc 01       	movw	r26, r24
    10c2:	44 e6       	ldi	r20, 0x64	; 100
    10c4:	48 9f       	mul	r20, r24
    10c6:	90 01       	movw	r18, r0
    10c8:	49 9f       	mul	r20, r25
    10ca:	30 0d       	add	r19, r0
    10cc:	11 24       	eor	r1, r1
    10ce:	a2 0e       	add	r10, r18
    10d0:	b3 1e       	adc	r11, r19
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	c1 14       	cp	r12, r1
    10dc:	82 ec       	ldi	r24, 0xC2	; 194
    10de:	d8 06       	cpc	r13, r24
    10e0:	87 e1       	ldi	r24, 0x17	; 23
    10e2:	e8 06       	cpc	r14, r24
    10e4:	8c eb       	ldi	r24, 0xBC	; 188
    10e6:	f8 06       	cpc	r15, r24
    10e8:	18 f4       	brcc	.+6      	; 0x10f0 <rtc_num2datestr+0xe8>
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	72 ec       	ldi	r23, 0xC2	; 194
    10f4:	87 e1       	ldi	r24, 0x17	; 23
    10f6:	9c eb       	ldi	r25, 0xBC	; 188
    10f8:	0e 94 ef 0c 	call	0x19de	; 0x19de <__mulsi3>
    10fc:	a7 01       	movw	r20, r14
    10fe:	96 01       	movw	r18, r12
    1100:	26 1b       	sub	r18, r22
    1102:	37 0b       	sbc	r19, r23
    1104:	48 0b       	sbc	r20, r24
    1106:	59 0b       	sbc	r21, r25
    1108:	ca 01       	movw	r24, r20
    110a:	b9 01       	movw	r22, r18
    110c:	20 e8       	ldi	r18, 0x80	; 128
    110e:	3f e1       	ldi	r19, 0x1F	; 31
    1110:	46 e8       	ldi	r20, 0x86	; 134
    1112:	57 e0       	ldi	r21, 0x07	; 7
    1114:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__udivmodsi4>
    1118:	22 0f       	add	r18, r18
    111a:	33 1f       	adc	r19, r19
    111c:	22 0f       	add	r18, r18
    111e:	33 1f       	adc	r19, r19
    1120:	a2 0e       	add	r10, r18
    1122:	b3 1e       	adc	r11, r19
    1124:	20 e8       	ldi	r18, 0x80	; 128
    1126:	33 e3       	ldi	r19, 0x33	; 51
    1128:	41 ee       	ldi	r20, 0xE1	; 225
    112a:	51 e0       	ldi	r21, 0x01	; 1
    112c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__udivmodsi4>
    1130:	75 01       	movw	r14, r10
    1132:	e2 0e       	add	r14, r18
    1134:	f3 1e       	adc	r15, r19
    1136:	20 e8       	ldi	r18, 0x80	; 128
    1138:	31 e5       	ldi	r19, 0x51	; 81
    113a:	41 e0       	ldi	r20, 0x01	; 1
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__udivmodsi4>
    1142:	4b 01       	movw	r8, r22
    1144:	5c 01       	movw	r10, r24
    1146:	3a 83       	std	Y+2, r19	; 0x02
    1148:	29 83       	std	Y+1, r18	; 0x01
    114a:	be 01       	movw	r22, r28
    114c:	6f 5f       	subi	r22, 0xFF	; 255
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	c7 01       	movw	r24, r14
    1152:	0e 94 bc 07 	call	0xf78	; 0xf78 <get_month>
    1156:	d8 2e       	mov	r13, r24
    1158:	c5 01       	movw	r24, r10
    115a:	b4 01       	movw	r22, r8
    115c:	20 e1       	ldi	r18, 0x10	; 16
    115e:	3e e0       	ldi	r19, 0x0E	; 14
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__udivmodsi4>
    1168:	29 01       	movw	r4, r18
    116a:	3a 01       	movw	r6, r20
    116c:	4b 01       	movw	r8, r22
    116e:	5c 01       	movw	r10, r24
    1170:	6d eb       	ldi	r22, 0xBD	; 189
    1172:	71 e0       	ldi	r23, 0x01	; 1
    1174:	89 e4       	ldi	r24, 0x49	; 73
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 1b 09 	call	0x1236	; 0x1236 <str_cpy>
    117c:	6d 2d       	mov	r22, r13
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	6f 5f       	subi	r22, 0xFF	; 255
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	42 e0       	ldi	r20, 0x02	; 2
    1186:	89 e4       	ldi	r24, 0x49	; 73
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	0e 94 25 09 	call	0x124a	; 0x124a <str_writeudec16>
    118e:	69 81       	ldd	r22, Y+1	; 0x01
    1190:	7a 81       	ldd	r23, Y+2	; 0x02
    1192:	6f 5f       	subi	r22, 0xFF	; 255
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	42 e0       	ldi	r20, 0x02	; 2
    1198:	8c e4       	ldi	r24, 0x4C	; 76
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 25 09 	call	0x124a	; 0x124a <str_writeudec16>
    11a0:	44 e0       	ldi	r20, 0x04	; 4
    11a2:	b7 01       	movw	r22, r14
    11a4:	8f e4       	ldi	r24, 0x4F	; 79
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 25 09 	call	0x124a	; 0x124a <str_writeudec16>
    11ac:	42 e0       	ldi	r20, 0x02	; 2
    11ae:	b2 01       	movw	r22, r4
    11b0:	84 e5       	ldi	r24, 0x54	; 84
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	0e 94 25 09 	call	0x124a	; 0x124a <str_writeudec16>
    11b8:	c5 01       	movw	r24, r10
    11ba:	b4 01       	movw	r22, r8
    11bc:	2c e3       	ldi	r18, 0x3C	; 60
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__udivmodsi4>
    11c8:	49 01       	movw	r8, r18
    11ca:	5a 01       	movw	r10, r20
    11cc:	6b 01       	movw	r12, r22
    11ce:	7c 01       	movw	r14, r24
    11d0:	42 e0       	ldi	r20, 0x02	; 2
    11d2:	b4 01       	movw	r22, r8
    11d4:	87 e5       	ldi	r24, 0x57	; 87
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 25 09 	call	0x124a	; 0x124a <str_writeudec16>
    11dc:	42 e0       	ldi	r20, 0x02	; 2
    11de:	b6 01       	movw	r22, r12
    11e0:	8a e5       	ldi	r24, 0x5A	; 90
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	0e 94 25 09 	call	0x124a	; 0x124a <str_writeudec16>
    11e8:	89 e4       	ldi	r24, 0x49	; 73
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	af 90       	pop	r10
    1200:	9f 90       	pop	r9
    1202:	8f 90       	pop	r8
    1204:	7f 90       	pop	r7
    1206:	6f 90       	pop	r6
    1208:	5f 90       	pop	r5
    120a:	4f 90       	pop	r4
    120c:	08 95       	ret

0000120e <rtc_get_date_string>:
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	0e 94 bb 09 	call	0x1376	; 0x1376 <timer1_get>
    1216:	00 91 c1 04 	lds	r16, 0x04C1	; 0x8004c1 <rtc_base>
    121a:	10 91 c2 04 	lds	r17, 0x04C2	; 0x8004c2 <rtc_base+0x1>
    121e:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <rtc_base+0x2>
    1222:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <rtc_base+0x3>
    1226:	60 0f       	add	r22, r16
    1228:	71 1f       	adc	r23, r17
    122a:	82 1f       	adc	r24, r18
    122c:	93 1f       	adc	r25, r19
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	0c 94 04 08 	jmp	0x1008	; 0x1008 <rtc_num2datestr>

00001236 <str_cpy>:
    1236:	fc 01       	movw	r30, r24
    1238:	db 01       	movw	r26, r22
    123a:	8d 91       	ld	r24, X+
    123c:	bd 01       	movw	r22, r26
    123e:	88 23       	and	r24, r24
    1240:	11 f0       	breq	.+4      	; 0x1246 <str_cpy+0x10>
    1242:	81 93       	st	Z+, r24
    1244:	f9 cf       	rjmp	.-14     	; 0x1238 <str_cpy+0x2>
    1246:	10 82       	st	Z, r1
    1248:	08 95       	ret

0000124a <str_writeudec16>:
    124a:	9f 92       	push	r9
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	00 d0       	rcall	.+0      	; 0x1262 <str_writeudec16+0x18>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <str_writeudec16+0x1a>
    1264:	1f 92       	push	r1
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	fc 01       	movw	r30, r24
    126c:	6b 01       	movw	r12, r22
    126e:	9e 01       	movw	r18, r28
    1270:	2f 5f       	subi	r18, 0xFF	; 255
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	8e 01       	movw	r16, r28
    1276:	0a 5f       	subi	r16, 0xFA	; 250
    1278:	1f 4f       	sbci	r17, 0xFF	; 255
    127a:	ee 24       	eor	r14, r14
    127c:	e3 94       	inc	r14
    127e:	f1 2c       	mov	r15, r1
    1280:	9a e0       	ldi	r25, 0x0A	; 10
    1282:	99 2e       	mov	r9, r25
    1284:	9e 9c       	mul	r9, r14
    1286:	50 01       	movw	r10, r0
    1288:	9f 9c       	mul	r9, r15
    128a:	b0 0c       	add	r11, r0
    128c:	11 24       	eor	r1, r1
    128e:	c6 01       	movw	r24, r12
    1290:	b5 01       	movw	r22, r10
    1292:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__udivmodhi4>
    1296:	b7 01       	movw	r22, r14
    1298:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__udivmodhi4>
    129c:	d9 01       	movw	r26, r18
    129e:	6d 93       	st	X+, r22
    12a0:	9d 01       	movw	r18, r26
    12a2:	c6 1a       	sub	r12, r22
    12a4:	d1 08       	sbc	r13, r1
    12a6:	67 fd       	sbrc	r22, 7
    12a8:	d3 94       	inc	r13
    12aa:	75 01       	movw	r14, r10
    12ac:	a0 17       	cp	r26, r16
    12ae:	b1 07       	cpc	r27, r17
    12b0:	49 f7       	brne	.-46     	; 0x1284 <str_writeudec16+0x3a>
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	84 e0       	ldi	r24, 0x04	; 4
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	d8 01       	movw	r26, r16
    12be:	2e 91       	ld	r18, -X
    12c0:	8d 01       	movw	r16, r26
    12c2:	21 11       	cpse	r18, r1
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <str_writeudec16+0x86>
    12c6:	61 15       	cp	r22, r1
    12c8:	71 05       	cpc	r23, r1
    12ca:	11 f4       	brne	.+4      	; 0x12d0 <str_writeudec16+0x86>
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	41 f4       	brne	.+16     	; 0x12e0 <str_writeudec16+0x96>
    12d0:	84 17       	cp	r24, r20
    12d2:	95 07       	cpc	r25, r21
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <str_writeudec16+0x96>
    12d6:	20 5d       	subi	r18, 0xD0	; 208
    12d8:	21 93       	st	Z+, r18
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <str_writeudec16+0x9e>
    12e0:	84 17       	cp	r24, r20
    12e2:	95 07       	cpc	r25, r21
    12e4:	0c f4       	brge	.+2      	; 0x12e8 <str_writeudec16+0x9e>
    12e6:	31 96       	adiw	r30, 0x01	; 1
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	40 f7       	brcc	.-48     	; 0x12bc <str_writeudec16+0x72>
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	bf 90       	pop	r11
    1308:	af 90       	pop	r10
    130a:	9f 90       	pop	r9
    130c:	08 95       	ret

0000130e <__vector_11>:
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	8f 93       	push	r24
    131a:	9f 93       	push	r25
    131c:	af 93       	push	r26
    131e:	bf 93       	push	r27
    1320:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer1_count>
    1324:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer1_count+0x1>
    1328:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer1_count+0x2>
    132c:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer1_count+0x3>
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	a1 1d       	adc	r26, r1
    1334:	b1 1d       	adc	r27, r1
    1336:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <timer1_count>
    133a:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <timer1_count+0x1>
    133e:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <timer1_count+0x2>
    1342:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <timer1_count+0x3>
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	0f 90       	pop	r0
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	0f 90       	pop	r0
    1354:	1f 90       	pop	r1
    1356:	18 95       	reti

00001358 <timer1_init>:
    1358:	83 e2       	ldi	r24, 0x23	; 35
    135a:	94 ef       	ldi	r25, 0xF4	; 244
    135c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1360:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1364:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1368:	8c e0       	ldi	r24, 0x0C	; 12
    136a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1374:	08 95       	ret

00001376 <timer1_get>:
    1376:	2f b7       	in	r18, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	60 91 61 02 	lds	r22, 0x0261	; 0x800261 <timer1_count>
    137e:	70 91 62 02 	lds	r23, 0x0262	; 0x800262 <timer1_count+0x1>
    1382:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <timer1_count+0x2>
    1386:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <timer1_count+0x3>
    138a:	2f bf       	out	0x3f, r18	; 63
    138c:	08 95       	ret

0000138e <timer1_clear>:
    138e:	8f b7       	in	r24, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <timer1_count>
    1396:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <timer1_count+0x1>
    139a:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <timer1_count+0x2>
    139e:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <timer1_count+0x3>
    13a2:	8f bf       	out	0x3f, r24	; 63
    13a4:	08 95       	ret

000013a6 <uart_init>:
    13a6:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <serial_init>
    13aa:	78 94       	sei
    13ac:	08 95       	ret

000013ae <uart_writechar>:
    13ae:	0c 94 95 0c 	jmp	0x192a	; 0x192a <serial_writechar>

000013b2 <uart_writestr>:
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	ec 01       	movw	r28, r24
    13b8:	89 91       	ld	r24, Y+
    13ba:	88 23       	and	r24, r24
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <uart_writestr+0x12>
    13be:	0e 94 95 0c 	call	0x192a	; 0x192a <serial_writechar>
    13c2:	fa cf       	rjmp	.-12     	; 0x13b8 <uart_writestr+0x6>
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	08 95       	ret

000013ca <uart_writehex8>:
    13ca:	cf 93       	push	r28
    13cc:	c8 2f       	mov	r28, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	24 e0       	ldi	r18, 0x04	; 4
    13d2:	95 95       	asr	r25
    13d4:	87 95       	ror	r24
    13d6:	2a 95       	dec	r18
    13d8:	e1 f7       	brne	.-8      	; 0x13d2 <uart_writehex8+0x8>
    13da:	8a 30       	cpi	r24, 0x0A	; 10
    13dc:	10 f4       	brcc	.+4      	; 0x13e2 <uart_writehex8+0x18>
    13de:	80 5d       	subi	r24, 0xD0	; 208
    13e0:	01 c0       	rjmp	.+2      	; 0x13e4 <uart_writehex8+0x1a>
    13e2:	89 5c       	subi	r24, 0xC9	; 201
    13e4:	0e 94 95 0c 	call	0x192a	; 0x192a <serial_writechar>
    13e8:	8c 2f       	mov	r24, r28
    13ea:	8f 70       	andi	r24, 0x0F	; 15
    13ec:	8a 30       	cpi	r24, 0x0A	; 10
    13ee:	10 f0       	brcs	.+4      	; 0x13f4 <uart_writehex8+0x2a>
    13f0:	89 5c       	subi	r24, 0xC9	; 201
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <uart_writehex8+0x2c>
    13f4:	80 5d       	subi	r24, 0xD0	; 208
    13f6:	cf 91       	pop	r28
    13f8:	0c 94 95 0c 	jmp	0x192a	; 0x192a <serial_writechar>

000013fc <uart_writehex16>:
    13fc:	cf 93       	push	r28
    13fe:	c8 2f       	mov	r28, r24
    1400:	89 2f       	mov	r24, r25
    1402:	0e 94 e5 09 	call	0x13ca	; 0x13ca <uart_writehex8>
    1406:	8c 2f       	mov	r24, r28
    1408:	cf 91       	pop	r28
    140a:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <uart_writehex8>

0000140e <uart_writedec32>:
    140e:	2f 92       	push	r2
    1410:	3f 92       	push	r3
    1412:	4f 92       	push	r4
    1414:	5f 92       	push	r5
    1416:	6f 92       	push	r6
    1418:	7f 92       	push	r7
    141a:	8f 92       	push	r8
    141c:	9f 92       	push	r9
    141e:	af 92       	push	r10
    1420:	bf 92       	push	r11
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	63 97       	sbiw	r28, 0x13	; 19
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	6b 01       	movw	r12, r22
    1444:	7c 01       	movw	r14, r24
    1446:	97 ff       	sbrs	r25, 7
    1448:	0d c0       	rjmp	.+26     	; 0x1464 <uart_writedec32+0x56>
    144a:	f0 94       	com	r15
    144c:	e0 94       	com	r14
    144e:	d0 94       	com	r13
    1450:	c0 94       	com	r12
    1452:	c1 1c       	adc	r12, r1
    1454:	d1 1c       	adc	r13, r1
    1456:	e1 1c       	adc	r14, r1
    1458:	f1 1c       	adc	r15, r1
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9b 8b       	std	Y+19, r25	; 0x13
    1460:	8a 8b       	std	Y+18, r24	; 0x12
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <uart_writedec32+0x5a>
    1464:	1b 8a       	std	Y+19, r1	; 0x13
    1466:	1a 8a       	std	Y+18, r1	; 0x12
    1468:	fe 01       	movw	r30, r28
    146a:	31 96       	adiw	r30, 0x01	; 1
    146c:	5f 01       	movw	r10, r30
    146e:	8e 01       	movw	r16, r28
    1470:	05 5f       	subi	r16, 0xF5	; 245
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	f9 8b       	std	Y+17, r31	; 0x11
    1476:	e8 8b       	std	Y+16, r30	; 0x10
    1478:	66 24       	eor	r6, r6
    147a:	63 94       	inc	r6
    147c:	71 2c       	mov	r7, r1
    147e:	81 2c       	mov	r8, r1
    1480:	91 2c       	mov	r9, r1
    1482:	aa e0       	ldi	r26, 0x0A	; 10
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	93 01       	movw	r18, r6
    1488:	a4 01       	movw	r20, r8
    148a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__muluhisi3>
    148e:	1b 01       	movw	r2, r22
    1490:	2c 01       	movw	r4, r24
    1492:	c7 01       	movw	r24, r14
    1494:	b6 01       	movw	r22, r12
    1496:	91 01       	movw	r18, r2
    1498:	a2 01       	movw	r20, r4
    149a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__divmodsi4>
    149e:	93 01       	movw	r18, r6
    14a0:	a4 01       	movw	r20, r8
    14a2:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__divmodsi4>
    14a6:	e8 89       	ldd	r30, Y+16	; 0x10
    14a8:	f9 89       	ldd	r31, Y+17	; 0x11
    14aa:	21 93       	st	Z+, r18
    14ac:	f9 8b       	std	Y+17, r31	; 0x11
    14ae:	e8 8b       	std	Y+16, r30	; 0x10
    14b0:	82 2f       	mov	r24, r18
    14b2:	22 0f       	add	r18, r18
    14b4:	99 0b       	sbc	r25, r25
    14b6:	aa 0b       	sbc	r26, r26
    14b8:	bb 0b       	sbc	r27, r27
    14ba:	c8 1a       	sub	r12, r24
    14bc:	d9 0a       	sbc	r13, r25
    14be:	ea 0a       	sbc	r14, r26
    14c0:	fb 0a       	sbc	r15, r27
    14c2:	31 01       	movw	r6, r2
    14c4:	42 01       	movw	r8, r4
    14c6:	0e 17       	cp	r16, r30
    14c8:	1f 07       	cpc	r17, r31
    14ca:	d9 f6       	brne	.-74     	; 0x1482 <uart_writedec32+0x74>
    14cc:	8a 89       	ldd	r24, Y+18	; 0x12
    14ce:	9b 89       	ldd	r25, Y+19	; 0x13
    14d0:	89 2b       	or	r24, r25
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <uart_writedec32+0xca>
    14d4:	8d e2       	ldi	r24, 0x2D	; 45
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <uart_writedec32+0xcc>
    14d8:	80 e2       	ldi	r24, 0x20	; 32
    14da:	0e 94 95 0c 	call	0x192a	; 0x192a <serial_writechar>
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	f8 01       	movw	r30, r16
    14e4:	82 91       	ld	r24, -Z
    14e6:	8f 01       	movw	r16, r30
    14e8:	81 11       	cpse	r24, r1
    14ea:	06 c0       	rjmp	.+12     	; 0x14f8 <uart_writedec32+0xea>
    14ec:	21 15       	cp	r18, r1
    14ee:	31 05       	cpc	r19, r1
    14f0:	19 f4       	brne	.+6      	; 0x14f8 <uart_writedec32+0xea>
    14f2:	ea 15       	cp	r30, r10
    14f4:	fb 05       	cpc	r31, r11
    14f6:	29 f4       	brne	.+10     	; 0x1502 <uart_writedec32+0xf4>
    14f8:	80 5d       	subi	r24, 0xD0	; 208
    14fa:	0e 94 95 0c 	call	0x192a	; 0x192a <serial_writechar>
    14fe:	21 e0       	ldi	r18, 0x01	; 1
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	0a 15       	cp	r16, r10
    1504:	1b 05       	cpc	r17, r11
    1506:	69 f7       	brne	.-38     	; 0x14e2 <uart_writedec32+0xd4>
    1508:	63 96       	adiw	r28, 0x13	; 19
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	cf 90       	pop	r12
    1524:	bf 90       	pop	r11
    1526:	af 90       	pop	r10
    1528:	9f 90       	pop	r9
    152a:	8f 90       	pop	r8
    152c:	7f 90       	pop	r7
    152e:	6f 90       	pop	r6
    1530:	5f 90       	pop	r5
    1532:	4f 90       	pop	r4
    1534:	3f 90       	pop	r3
    1536:	2f 90       	pop	r2
    1538:	08 95       	ret

0000153a <dump_eeprom>:
    153a:	2f 92       	push	r2
    153c:	3f 92       	push	r3
    153e:	4f 92       	push	r4
    1540:	5f 92       	push	r5
    1542:	6f 92       	push	r6
    1544:	7f 92       	push	r7
    1546:	8f 92       	push	r8
    1548:	9f 92       	push	r9
    154a:	af 92       	push	r10
    154c:	bf 92       	push	r11
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	64 97       	sbiw	r28, 0x14	; 20
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	8c 01       	movw	r16, r24
    1570:	61 15       	cp	r22, r1
    1572:	71 05       	cpc	r23, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <dump_eeprom+0x3e>
    1576:	92 c0       	rjmp	.+292    	; 0x169c <dump_eeprom+0x162>
    1578:	81 2c       	mov	r8, r1
    157a:	91 2c       	mov	r9, r1
    157c:	54 01       	movw	r10, r8
    157e:	cb 01       	movw	r24, r22
    1580:	a0 e0       	ldi	r26, 0x00	; 0
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	89 8b       	std	Y+17, r24	; 0x11
    1586:	9a 8b       	std	Y+18, r25	; 0x12
    1588:	ab 8b       	std	Y+19, r26	; 0x13
    158a:	bc 8b       	std	Y+20, r27	; 0x14
    158c:	de 01       	movw	r26, r28
    158e:	11 96       	adiw	r26, 0x01	; 1
    1590:	1d 01       	movw	r2, r26
    1592:	89 89       	ldd	r24, Y+17	; 0x11
    1594:	9a 89       	ldd	r25, Y+18	; 0x12
    1596:	ab 89       	ldd	r26, Y+19	; 0x13
    1598:	bc 89       	ldd	r27, Y+20	; 0x14
    159a:	88 16       	cp	r8, r24
    159c:	99 06       	cpc	r9, r25
    159e:	aa 06       	cpc	r10, r26
    15a0:	bb 06       	cpc	r11, r27
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <dump_eeprom+0x6c>
    15a4:	7b c0       	rjmp	.+246    	; 0x169c <dump_eeprom+0x162>
    15a6:	81 2f       	mov	r24, r17
    15a8:	0e 94 e5 09 	call	0x13ca	; 0x13ca <uart_writehex8>
    15ac:	80 2f       	mov	r24, r16
    15ae:	80 7f       	andi	r24, 0xF0	; 240
    15b0:	0e 94 e5 09 	call	0x13ca	; 0x13ca <uart_writehex8>
    15b4:	80 e2       	ldi	r24, 0x20	; 32
    15b6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <uart_writechar>
    15ba:	61 01       	movw	r12, r2
    15bc:	78 01       	movw	r14, r16
    15be:	41 2c       	mov	r4, r1
    15c0:	51 2c       	mov	r5, r1
    15c2:	32 01       	movw	r6, r4
    15c4:	41 e0       	ldi	r20, 0x01	; 1
    15c6:	b6 01       	movw	r22, r12
    15c8:	c7 01       	movw	r24, r14
    15ca:	0e 94 97 01 	call	0x32e	; 0x32e <eeprom_readbuf>
    15ce:	bf ef       	ldi	r27, 0xFF	; 255
    15d0:	eb 1a       	sub	r14, r27
    15d2:	fb 0a       	sbc	r15, r27
    15d4:	ef ef       	ldi	r30, 0xFF	; 255
    15d6:	4e 1a       	sub	r4, r30
    15d8:	5e 0a       	sbc	r5, r30
    15da:	6e 0a       	sbc	r6, r30
    15dc:	7e 0a       	sbc	r7, r30
    15de:	ff ef       	ldi	r31, 0xFF	; 255
    15e0:	8f 1a       	sub	r8, r31
    15e2:	9f 0a       	sbc	r9, r31
    15e4:	af 0a       	sbc	r10, r31
    15e6:	bf 0a       	sbc	r11, r31
    15e8:	89 89       	ldd	r24, Y+17	; 0x11
    15ea:	9a 89       	ldd	r25, Y+18	; 0x12
    15ec:	ab 89       	ldd	r26, Y+19	; 0x13
    15ee:	bc 89       	ldd	r27, Y+20	; 0x14
    15f0:	88 16       	cp	r8, r24
    15f2:	99 06       	cpc	r9, r25
    15f4:	aa 06       	cpc	r10, r26
    15f6:	bb 06       	cpc	r11, r27
    15f8:	50 f0       	brcs	.+20     	; 0x160e <dump_eeprom+0xd4>
    15fa:	68 01       	movw	r12, r16
    15fc:	9f e0       	ldi	r25, 0x0F	; 15
    15fe:	c9 22       	and	r12, r25
    1600:	dd 24       	eor	r13, r13
    1602:	00 e0       	ldi	r16, 0x00	; 0
    1604:	10 e0       	ldi	r17, 0x00	; 0
    1606:	32 01       	movw	r6, r4
    1608:	6c 0c       	add	r6, r12
    160a:	7d 1c       	adc	r7, r13
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <dump_eeprom+0xe6>
    160e:	af ef       	ldi	r26, 0xFF	; 255
    1610:	ca 1a       	sub	r12, r26
    1612:	da 0a       	sbc	r13, r26
    1614:	c7 01       	movw	r24, r14
    1616:	8f 70       	andi	r24, 0x0F	; 15
    1618:	99 27       	eor	r25, r25
    161a:	89 2b       	or	r24, r25
    161c:	99 f6       	brne	.-90     	; 0x15c4 <dump_eeprom+0x8a>
    161e:	ed cf       	rjmp	.-38     	; 0x15fa <dump_eeprom+0xc0>
    1620:	0c 15       	cp	r16, r12
    1622:	1d 05       	cpc	r17, r13
    1624:	18 f0       	brcs	.+6      	; 0x162c <dump_eeprom+0xf2>
    1626:	06 15       	cp	r16, r6
    1628:	17 05       	cpc	r17, r7
    162a:	28 f0       	brcs	.+10     	; 0x1636 <dump_eeprom+0xfc>
    162c:	81 ed       	ldi	r24, 0xD1	; 209
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_writestr>
    1634:	0b c0       	rjmp	.+22     	; 0x164c <dump_eeprom+0x112>
    1636:	f8 01       	movw	r30, r16
    1638:	ec 19       	sub	r30, r12
    163a:	fd 09       	sbc	r31, r13
    163c:	e2 0d       	add	r30, r2
    163e:	f3 1d       	adc	r31, r3
    1640:	80 81       	ld	r24, Z
    1642:	0e 94 e5 09 	call	0x13ca	; 0x13ca <uart_writehex8>
    1646:	80 e2       	ldi	r24, 0x20	; 32
    1648:	0e 94 d7 09 	call	0x13ae	; 0x13ae <uart_writechar>
    164c:	0f 5f       	subi	r16, 0xFF	; 255
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	00 31       	cpi	r16, 0x10	; 16
    1652:	11 05       	cpc	r17, r1
    1654:	29 f7       	brne	.-54     	; 0x1620 <dump_eeprom+0xe6>
    1656:	00 e0       	ldi	r16, 0x00	; 0
    1658:	10 e0       	ldi	r17, 0x00	; 0
    165a:	c0 16       	cp	r12, r16
    165c:	d1 06       	cpc	r13, r17
    165e:	31 f0       	breq	.+12     	; 0x166c <dump_eeprom+0x132>
    1660:	80 e2       	ldi	r24, 0x20	; 32
    1662:	0e 94 d7 09 	call	0x13ae	; 0x13ae <uart_writechar>
    1666:	0f 5f       	subi	r16, 0xFF	; 255
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	f7 cf       	rjmp	.-18     	; 0x165a <dump_eeprom+0x120>
    166c:	81 01       	movw	r16, r2
    166e:	c8 01       	movw	r24, r16
    1670:	82 19       	sub	r24, r2
    1672:	93 09       	sbc	r25, r3
    1674:	84 15       	cp	r24, r4
    1676:	95 05       	cpc	r25, r5
    1678:	58 f4       	brcc	.+22     	; 0x1690 <dump_eeprom+0x156>
    167a:	f8 01       	movw	r30, r16
    167c:	81 91       	ld	r24, Z+
    167e:	8f 01       	movw	r16, r30
    1680:	90 ee       	ldi	r25, 0xE0	; 224
    1682:	98 0f       	add	r25, r24
    1684:	90 36       	cpi	r25, 0x60	; 96
    1686:	08 f0       	brcs	.+2      	; 0x168a <dump_eeprom+0x150>
    1688:	8e e2       	ldi	r24, 0x2E	; 46
    168a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <uart_writechar>
    168e:	ef cf       	rjmp	.-34     	; 0x166e <dump_eeprom+0x134>
    1690:	85 ed       	ldi	r24, 0xD5	; 213
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_writestr>
    1698:	87 01       	movw	r16, r14
    169a:	7b cf       	rjmp	.-266    	; 0x1592 <dump_eeprom+0x58>
    169c:	64 96       	adiw	r28, 0x14	; 20
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ff 90       	pop	r15
    16b2:	ef 90       	pop	r14
    16b4:	df 90       	pop	r13
    16b6:	cf 90       	pop	r12
    16b8:	bf 90       	pop	r11
    16ba:	af 90       	pop	r10
    16bc:	9f 90       	pop	r9
    16be:	8f 90       	pop	r8
    16c0:	7f 90       	pop	r7
    16c2:	6f 90       	pop	r6
    16c4:	5f 90       	pop	r5
    16c6:	4f 90       	pop	r4
    16c8:	3f 90       	pop	r3
    16ca:	2f 90       	pop	r2
    16cc:	08 95       	ret

000016ce <__vector_14>:
    16ce:	1f 92       	push	r1
    16d0:	0f 92       	push	r0
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	2f 93       	push	r18
    16da:	3f 93       	push	r19
    16dc:	8f 93       	push	r24
    16de:	9f 93       	push	r25
    16e0:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <delay_count>
    16e4:	30 91 6c 02 	lds	r19, 0x026C	; 0x80026c <delay_count+0x1>
    16e8:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <delay_limit>
    16ec:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <delay_limit+0x1>
    16f0:	28 17       	cp	r18, r24
    16f2:	39 07       	cpc	r19, r25
    16f4:	49 f0       	breq	.+18     	; 0x1708 <__vector_14+0x3a>
    16f6:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <delay_count>
    16fa:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <delay_count+0x1>
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <delay_count+0x1>
    1704:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <delay_count>
    1708:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <delay_count+0x2>
    170c:	30 91 6e 02 	lds	r19, 0x026E	; 0x80026e <delay_count+0x3>
    1710:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <delay_limit+0x2>
    1714:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <delay_limit+0x3>
    1718:	28 17       	cp	r18, r24
    171a:	39 07       	cpc	r19, r25
    171c:	49 f0       	breq	.+18     	; 0x1730 <__vector_14+0x62>
    171e:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <delay_count+0x2>
    1722:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <delay_count+0x3>
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <delay_count+0x3>
    172c:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <delay_count+0x2>
    1730:	9f 91       	pop	r25
    1732:	8f 91       	pop	r24
    1734:	3f 91       	pop	r19
    1736:	2f 91       	pop	r18
    1738:	0f 90       	pop	r0
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	0f 90       	pop	r0
    173e:	1f 90       	pop	r1
    1740:	18 95       	reti

00001742 <delay_init>:
    1742:	89 ef       	ldi	r24, 0xF9	; 249
    1744:	87 bd       	out	0x27, r24	; 39
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	84 bd       	out	0x24, r24	; 36
    174a:	93 e0       	ldi	r25, 0x03	; 3
    174c:	95 bd       	out	0x25, r25	; 37
    174e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1752:	08 95       	ret

00001754 <delay_get>:
    1754:	82 30       	cpi	r24, 0x02	; 2
    1756:	91 05       	cpc	r25, r1
    1758:	50 f4       	brcc	.+20     	; 0x176e <delay_get+0x1a>
    175a:	f8 94       	cli
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	fc 01       	movw	r30, r24
    1762:	e5 59       	subi	r30, 0x95	; 149
    1764:	fd 4f       	sbci	r31, 0xFD	; 253
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	78 94       	sei
    176c:	08 95       	ret
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	08 95       	ret

00001774 <delay_isdone>:
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	91 05       	cpc	r25, r1
    1778:	98 f4       	brcc	.+38     	; 0x17a0 <delay_isdone+0x2c>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	fc 01       	movw	r30, r24
    1780:	e5 59       	subi	r30, 0x95	; 149
    1782:	fd 4f       	sbci	r31, 0xFD	; 253
    1784:	20 81       	ld	r18, Z
    1786:	31 81       	ldd	r19, Z+1	; 0x01
    1788:	fc 01       	movw	r30, r24
    178a:	e9 59       	subi	r30, 0x99	; 153
    178c:	fd 4f       	sbci	r31, 0xFD	; 253
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	40 81       	ld	r20, Z
    1794:	51 81       	ldd	r21, Z+1	; 0x01
    1796:	42 17       	cp	r20, r18
    1798:	53 07       	cpc	r21, r19
    179a:	21 f0       	breq	.+8      	; 0x17a4 <delay_isdone+0x30>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	08 95       	ret
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	08 95       	ret

000017a6 <delay_set>:
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	ec 01       	movw	r28, r24
    17b0:	8b 01       	movw	r16, r22
    17b2:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <initialized.1590>
    17b6:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <initialized.1590+0x1>
    17ba:	89 2b       	or	r24, r25
    17bc:	41 f4       	brne	.+16     	; 0x17ce <delay_set+0x28>
    17be:	0e 94 a1 0b 	call	0x1742	; 0x1742 <delay_init>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <initialized.1590+0x1>
    17ca:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <initialized.1590>
    17ce:	c2 30       	cpi	r28, 0x02	; 2
    17d0:	d1 05       	cpc	r29, r1
    17d2:	70 f4       	brcc	.+28     	; 0x17f0 <delay_set+0x4a>
    17d4:	8f b7       	in	r24, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	cc 0f       	add	r28, r28
    17da:	dd 1f       	adc	r29, r29
    17dc:	fe 01       	movw	r30, r28
    17de:	e9 59       	subi	r30, 0x99	; 153
    17e0:	fd 4f       	sbci	r31, 0xFD	; 253
    17e2:	11 83       	std	Z+1, r17	; 0x01
    17e4:	00 83       	st	Z, r16
    17e6:	c5 59       	subi	r28, 0x95	; 149
    17e8:	dd 4f       	sbci	r29, 0xFD	; 253
    17ea:	19 82       	std	Y+1, r1	; 0x01
    17ec:	18 82       	st	Y, r1
    17ee:	8f bf       	out	0x3f, r24	; 63
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <serial_init>:
    17fa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    17fe:	87 e6       	ldi	r24, 0x67	; 103
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1806:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    180a:	e1 ec       	ldi	r30, 0xC1	; 193
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	88 e1       	ldi	r24, 0x18	; 24
    1810:	80 83       	st	Z, r24
    1812:	86 e0       	ldi	r24, 0x06	; 6
    1814:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1818:	80 81       	ld	r24, Z
    181a:	80 6a       	ori	r24, 0xA0	; 160
    181c:	80 83       	st	Z, r24
    181e:	08 95       	ret

00001820 <__vector_18>:
    1820:	1f 92       	push	r1
    1822:	0f 92       	push	r0
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	0f 92       	push	r0
    1828:	11 24       	eor	r1, r1
    182a:	2f 93       	push	r18
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	ef 93       	push	r30
    1832:	ff 93       	push	r31
    1834:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <rxtail>
    1838:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <rxhead>
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	82 1b       	sub	r24, r18
    1840:	91 09       	sbc	r25, r1
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	8f 73       	andi	r24, 0x3F	; 63
    1846:	99 27       	eor	r25, r25
    1848:	89 2b       	or	r24, r25
    184a:	79 f0       	breq	.+30     	; 0x186a <__vector_18+0x4a>
    184c:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <rxhead>
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1856:	eb 53       	subi	r30, 0x3B	; 59
    1858:	fb 4f       	sbci	r31, 0xFB	; 251
    185a:	80 83       	st	Z, r24
    185c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <rxhead>
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	8f 73       	andi	r24, 0x3F	; 63
    1864:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <rxhead>
    1868:	02 c0       	rjmp	.+4      	; 0x186e <__vector_18+0x4e>
    186a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	9f 91       	pop	r25
    1874:	8f 91       	pop	r24
    1876:	2f 91       	pop	r18
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <__vector_19>:
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	2f 93       	push	r18
    188e:	8f 93       	push	r24
    1890:	9f 93       	push	r25
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    1896:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <txhead>
    189a:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <txtail>
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	82 1b       	sub	r24, r18
    18a2:	91 09       	sbc	r25, r1
    18a4:	8f 73       	andi	r24, 0x3F	; 63
    18a6:	99 27       	eor	r25, r25
    18a8:	89 2b       	or	r24, r25
    18aa:	79 f0       	breq	.+30     	; 0x18ca <__vector_19+0x48>
    18ac:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <txtail>
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	eb 5f       	subi	r30, 0xFB	; 251
    18b4:	fa 4f       	sbci	r31, 0xFA	; 250
    18b6:	80 81       	ld	r24, Z
    18b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    18bc:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <txtail>
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	8f 73       	andi	r24, 0x3F	; 63
    18c4:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <txtail>
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <__vector_19+0x52>
    18ca:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    18ce:	8f 7d       	andi	r24, 0xDF	; 223
    18d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    18d4:	ff 91       	pop	r31
    18d6:	ef 91       	pop	r30
    18d8:	9f 91       	pop	r25
    18da:	8f 91       	pop	r24
    18dc:	2f 91       	pop	r18
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <serial_rxchars>:
    18e8:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <rxhead>
    18ec:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <rxtail>
    18f0:	89 1b       	sub	r24, r25
    18f2:	8f 73       	andi	r24, 0x3F	; 63
    18f4:	08 95       	ret

000018f6 <serial_popchar>:
    18f6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <rxhead>
    18fa:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <rxtail>
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	82 1b       	sub	r24, r18
    1902:	91 09       	sbc	r25, r1
    1904:	8f 73       	andi	r24, 0x3F	; 63
    1906:	99 27       	eor	r25, r25
    1908:	89 2b       	or	r24, r25
    190a:	69 f0       	breq	.+26     	; 0x1926 <serial_popchar+0x30>
    190c:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <rxtail>
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	eb 53       	subi	r30, 0x3B	; 59
    1914:	fb 4f       	sbci	r31, 0xFB	; 251
    1916:	80 81       	ld	r24, Z
    1918:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <rxtail>
    191c:	9f 5f       	subi	r25, 0xFF	; 255
    191e:	9f 73       	andi	r25, 0x3F	; 63
    1920:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <rxtail>
    1924:	08 95       	ret
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	08 95       	ret

0000192a <serial_writechar>:
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	07 fe       	sbrs	r0, 7
    192e:	0e c0       	rjmp	.+28     	; 0x194c <serial_writechar+0x22>
    1930:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <txtail>
    1934:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <txhead>
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	29 1b       	sub	r18, r25
    193c:	31 09       	sbc	r19, r1
    193e:	21 50       	subi	r18, 0x01	; 1
    1940:	31 09       	sbc	r19, r1
    1942:	2f 73       	andi	r18, 0x3F	; 63
    1944:	33 27       	eor	r19, r19
    1946:	23 2b       	or	r18, r19
    1948:	99 f3       	breq	.-26     	; 0x1930 <serial_writechar+0x6>
    194a:	0d c0       	rjmp	.+26     	; 0x1966 <serial_writechar+0x3c>
    194c:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <txtail>
    1950:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <txhead>
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	29 1b       	sub	r18, r25
    1958:	31 09       	sbc	r19, r1
    195a:	21 50       	subi	r18, 0x01	; 1
    195c:	31 09       	sbc	r19, r1
    195e:	2f 73       	andi	r18, 0x3F	; 63
    1960:	33 27       	eor	r19, r19
    1962:	23 2b       	or	r18, r19
    1964:	61 f0       	breq	.+24     	; 0x197e <serial_writechar+0x54>
    1966:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <txhead>
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	eb 5f       	subi	r30, 0xFB	; 251
    196e:	fa 4f       	sbci	r31, 0xFA	; 250
    1970:	80 83       	st	Z, r24
    1972:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <txhead>
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	8f 73       	andi	r24, 0x3F	; 63
    197a:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <txhead>
    197e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1982:	80 62       	ori	r24, 0x20	; 32
    1984:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1988:	08 95       	ret

0000198a <serial_writestr>:
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	ec 01       	movw	r28, r24
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	11 e0       	ldi	r17, 0x01	; 1
    1996:	18 0f       	add	r17, r24
    1998:	fe 01       	movw	r30, r28
    199a:	e8 0f       	add	r30, r24
    199c:	f1 1d       	adc	r31, r1
    199e:	80 81       	ld	r24, Z
    19a0:	88 23       	and	r24, r24
    19a2:	21 f0       	breq	.+8      	; 0x19ac <serial_writestr+0x22>
    19a4:	0e 94 95 0c 	call	0x192a	; 0x192a <serial_writechar>
    19a8:	81 2f       	mov	r24, r17
    19aa:	f4 cf       	rjmp	.-24     	; 0x1994 <serial_writestr+0xa>
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	08 95       	ret

000019b4 <serial_writestr_P>:
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	ec 01       	movw	r28, r24
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	11 e0       	ldi	r17, 0x01	; 1
    19c0:	18 0f       	add	r17, r24
    19c2:	fe 01       	movw	r30, r28
    19c4:	e8 0f       	add	r30, r24
    19c6:	f1 1d       	adc	r31, r1
    19c8:	84 91       	lpm	r24, Z
    19ca:	88 23       	and	r24, r24
    19cc:	21 f0       	breq	.+8      	; 0x19d6 <serial_writestr_P+0x22>
    19ce:	0e 94 95 0c 	call	0x192a	; 0x192a <serial_writechar>
    19d2:	81 2f       	mov	r24, r17
    19d4:	f4 cf       	rjmp	.-24     	; 0x19be <serial_writestr_P+0xa>
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	08 95       	ret

000019de <__mulsi3>:
    19de:	db 01       	movw	r26, r22
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__muluhisi3>
    19e8:	bf 91       	pop	r27
    19ea:	af 91       	pop	r26
    19ec:	a2 9f       	mul	r26, r18
    19ee:	80 0d       	add	r24, r0
    19f0:	91 1d       	adc	r25, r1
    19f2:	a3 9f       	mul	r26, r19
    19f4:	90 0d       	add	r25, r0
    19f6:	b2 9f       	mul	r27, r18
    19f8:	90 0d       	add	r25, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	08 95       	ret

000019fe <__udivmodhi4>:
    19fe:	aa 1b       	sub	r26, r26
    1a00:	bb 1b       	sub	r27, r27
    1a02:	51 e1       	ldi	r21, 0x11	; 17
    1a04:	07 c0       	rjmp	.+14     	; 0x1a14 <__udivmodhi4_ep>

00001a06 <__udivmodhi4_loop>:
    1a06:	aa 1f       	adc	r26, r26
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	a6 17       	cp	r26, r22
    1a0c:	b7 07       	cpc	r27, r23
    1a0e:	10 f0       	brcs	.+4      	; 0x1a14 <__udivmodhi4_ep>
    1a10:	a6 1b       	sub	r26, r22
    1a12:	b7 0b       	sbc	r27, r23

00001a14 <__udivmodhi4_ep>:
    1a14:	88 1f       	adc	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	5a 95       	dec	r21
    1a1a:	a9 f7       	brne	.-22     	; 0x1a06 <__udivmodhi4_loop>
    1a1c:	80 95       	com	r24
    1a1e:	90 95       	com	r25
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	08 95       	ret

00001a26 <__divmodhi4>:
    1a26:	97 fb       	bst	r25, 7
    1a28:	07 2e       	mov	r0, r23
    1a2a:	16 f4       	brtc	.+4      	; 0x1a30 <__divmodhi4+0xa>
    1a2c:	00 94       	com	r0
    1a2e:	07 d0       	rcall	.+14     	; 0x1a3e <__divmodhi4_neg1>
    1a30:	77 fd       	sbrc	r23, 7
    1a32:	09 d0       	rcall	.+18     	; 0x1a46 <__divmodhi4_neg2>
    1a34:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__udivmodhi4>
    1a38:	07 fc       	sbrc	r0, 7
    1a3a:	05 d0       	rcall	.+10     	; 0x1a46 <__divmodhi4_neg2>
    1a3c:	3e f4       	brtc	.+14     	; 0x1a4c <__divmodhi4_exit>

00001a3e <__divmodhi4_neg1>:
    1a3e:	90 95       	com	r25
    1a40:	81 95       	neg	r24
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	08 95       	ret

00001a46 <__divmodhi4_neg2>:
    1a46:	70 95       	com	r23
    1a48:	61 95       	neg	r22
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255

00001a4c <__divmodhi4_exit>:
    1a4c:	08 95       	ret

00001a4e <__udivmodsi4>:
    1a4e:	a1 e2       	ldi	r26, 0x21	; 33
    1a50:	1a 2e       	mov	r1, r26
    1a52:	aa 1b       	sub	r26, r26
    1a54:	bb 1b       	sub	r27, r27
    1a56:	fd 01       	movw	r30, r26
    1a58:	0d c0       	rjmp	.+26     	; 0x1a74 <__udivmodsi4_ep>

00001a5a <__udivmodsi4_loop>:
    1a5a:	aa 1f       	adc	r26, r26
    1a5c:	bb 1f       	adc	r27, r27
    1a5e:	ee 1f       	adc	r30, r30
    1a60:	ff 1f       	adc	r31, r31
    1a62:	a2 17       	cp	r26, r18
    1a64:	b3 07       	cpc	r27, r19
    1a66:	e4 07       	cpc	r30, r20
    1a68:	f5 07       	cpc	r31, r21
    1a6a:	20 f0       	brcs	.+8      	; 0x1a74 <__udivmodsi4_ep>
    1a6c:	a2 1b       	sub	r26, r18
    1a6e:	b3 0b       	sbc	r27, r19
    1a70:	e4 0b       	sbc	r30, r20
    1a72:	f5 0b       	sbc	r31, r21

00001a74 <__udivmodsi4_ep>:
    1a74:	66 1f       	adc	r22, r22
    1a76:	77 1f       	adc	r23, r23
    1a78:	88 1f       	adc	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	1a 94       	dec	r1
    1a7e:	69 f7       	brne	.-38     	; 0x1a5a <__udivmodsi4_loop>
    1a80:	60 95       	com	r22
    1a82:	70 95       	com	r23
    1a84:	80 95       	com	r24
    1a86:	90 95       	com	r25
    1a88:	9b 01       	movw	r18, r22
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	bd 01       	movw	r22, r26
    1a8e:	cf 01       	movw	r24, r30
    1a90:	08 95       	ret

00001a92 <__divmodsi4>:
    1a92:	05 2e       	mov	r0, r21
    1a94:	97 fb       	bst	r25, 7
    1a96:	1e f4       	brtc	.+6      	; 0x1a9e <__divmodsi4+0xc>
    1a98:	00 94       	com	r0
    1a9a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__negsi2>
    1a9e:	57 fd       	sbrc	r21, 7
    1aa0:	07 d0       	rcall	.+14     	; 0x1ab0 <__divmodsi4_neg2>
    1aa2:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__udivmodsi4>
    1aa6:	07 fc       	sbrc	r0, 7
    1aa8:	03 d0       	rcall	.+6      	; 0x1ab0 <__divmodsi4_neg2>
    1aaa:	4e f4       	brtc	.+18     	; 0x1abe <__divmodsi4_exit>
    1aac:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__negsi2>

00001ab0 <__divmodsi4_neg2>:
    1ab0:	50 95       	com	r21
    1ab2:	40 95       	com	r20
    1ab4:	30 95       	com	r19
    1ab6:	21 95       	neg	r18
    1ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aba:	4f 4f       	sbci	r20, 0xFF	; 255
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255

00001abe <__divmodsi4_exit>:
    1abe:	08 95       	ret

00001ac0 <__negsi2>:
    1ac0:	90 95       	com	r25
    1ac2:	80 95       	com	r24
    1ac4:	70 95       	com	r23
    1ac6:	61 95       	neg	r22
    1ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aca:	8f 4f       	sbci	r24, 0xFF	; 255
    1acc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ace:	08 95       	ret

00001ad0 <__umulhisi3>:
    1ad0:	a2 9f       	mul	r26, r18
    1ad2:	b0 01       	movw	r22, r0
    1ad4:	b3 9f       	mul	r27, r19
    1ad6:	c0 01       	movw	r24, r0
    1ad8:	a3 9f       	mul	r26, r19
    1ada:	70 0d       	add	r23, r0
    1adc:	81 1d       	adc	r24, r1
    1ade:	11 24       	eor	r1, r1
    1ae0:	91 1d       	adc	r25, r1
    1ae2:	b2 9f       	mul	r27, r18
    1ae4:	70 0d       	add	r23, r0
    1ae6:	81 1d       	adc	r24, r1
    1ae8:	11 24       	eor	r1, r1
    1aea:	91 1d       	adc	r25, r1
    1aec:	08 95       	ret

00001aee <__muluhisi3>:
    1aee:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__umulhisi3>
    1af2:	a5 9f       	mul	r26, r21
    1af4:	90 0d       	add	r25, r0
    1af6:	b4 9f       	mul	r27, r20
    1af8:	90 0d       	add	r25, r0
    1afa:	a4 9f       	mul	r26, r20
    1afc:	80 0d       	add	r24, r0
    1afe:	91 1d       	adc	r25, r1
    1b00:	11 24       	eor	r1, r1
    1b02:	08 95       	ret

00001b04 <_exit>:
    1b04:	f8 94       	cli

00001b06 <__stop_program>:
    1b06:	ff cf       	rjmp	.-2      	; 0x1b06 <__stop_program>
