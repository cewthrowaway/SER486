
bin/Debug/Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00001b5e  00001bf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00001b36  00001b36  00001bca  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000036d  008001d8  008001d8  00001cca  2**0
                  ALLOC
  4 .stab         00001e3c  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001476  00000000  00000000  00003b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  00004f7e  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004fa0  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  000055d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00005b76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00005b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_18>
      4c:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e5       	ldi	r30, 0x5E	; 94
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 3d       	cpi	r26, 0xD8	; 216
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a8 ed       	ldi	r26, 0xD8	; 216
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 34       	cpi	r26, 0x45	; 69
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
      9e:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
void config_write_defaults();
void config_read();

/*********** Public definitions ***********/
void config_init()
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62

  // wait for the eeprom to not be busy
  while (eeprom_isbusy())
      ae:	00 00       	nop
      b0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_isbusy>
      b4:	89 2b       	or	r24, r25
      b6:	e1 f7       	brne	.-8      	; 0xb0 <config_init+0xa>
    ;

  /* init config w/ eeprom read */
  eeprom_readbuf(0x0040, (unsigned char *)&config, sizeof(config));
      b8:	42 e1       	ldi	r20, 0x12	; 18
      ba:	63 e7       	ldi	r22, 0x73	; 115
      bc:	72 e0       	ldi	r23, 0x02	; 2
      be:	80 e4       	ldi	r24, 0x40	; 64
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 ad 01 	call	0x35a	; 0x35a <eeprom_readbuf>
  /* while the data is not valid */
  while (!config_is_data_valid())
      c6:	04 c0       	rjmp	.+8      	; 0xd0 <config_init+0x2a>
  {
    config_write_defaults();
      c8:	0e 94 b9 00 	call	0x172	; 0x172 <config_write_defaults>
    config_read();
      cc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <config_read>
    ;

  /* init config w/ eeprom read */
  eeprom_readbuf(0x0040, (unsigned char *)&config, sizeof(config));
  /* while the data is not valid */
  while (!config_is_data_valid())
      d0:	0e 94 9d 00 	call	0x13a	; 0x13a <config_is_data_valid>
      d4:	89 2b       	or	r24, r25
      d6:	c1 f3       	breq	.-16     	; 0xc8 <config_init+0x22>
  {
    config_write_defaults();
    config_read();
  }
  config_modified = 0;
      d8:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
}
      dc:	00 00       	nop
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <config_update>:
void config_update()
{
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
  /* if eeprom is busy or !modified just return */
  if (eeprom_isbusy() || !config_modified)
      ec:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_isbusy>
      f0:	89 2b       	or	r24, r25
      f2:	a1 f4       	brne	.+40     	; 0x11c <config_update+0x38>
      f4:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
      f8:	88 23       	and	r24, r24
      fa:	81 f0       	breq	.+32     	; 0x11c <config_update+0x38>
    return;
  /* update the checksum */
  update_checksum((unsigned char *)&config, sizeof(config));
      fc:	62 e1       	ldi	r22, 0x12	; 18
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	83 e7       	ldi	r24, 0x73	; 115
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	0e 94 a9 02 	call	0x552	; 0x552 <update_checksum>
  /* write config to eeprom */
  eeprom_writebuf(0x0040, (unsigned char *)&config, sizeof(config));
     108:	42 e1       	ldi	r20, 0x12	; 18
     10a:	63 e7       	ldi	r22, 0x73	; 115
     10c:	72 e0       	ldi	r23, 0x02	; 2
     10e:	80 e4       	ldi	r24, 0x40	; 64
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 58 01 	call	0x2b0	; 0x2b0 <eeprom_writebuf>
  /* clear the modified flag */
  config_modified = 0;
     116:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
     11a:	01 c0       	rjmp	.+2      	; 0x11e <config_update+0x3a>
}
void config_update()
{
  /* if eeprom is busy or !modified just return */
  if (eeprom_isbusy() || !config_modified)
    return;
     11c:	00 00       	nop
  update_checksum((unsigned char *)&config, sizeof(config));
  /* write config to eeprom */
  eeprom_writebuf(0x0040, (unsigned char *)&config, sizeof(config));
  /* clear the modified flag */
  config_modified = 0;
}
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <config_set_modified>:
void config_set_modified()
{
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
  config_modified = 1;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
}
     132:	00 00       	nop
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <config_is_data_valid>:

/*********** Private definitions ***********/
int config_is_data_valid()
{
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(config.token, "ASU") && is_checksum_valid((unsigned char *)&config, sizeof(config));
     142:	6d e5       	ldi	r22, 0x5D	; 93
     144:	71 e0       	ldi	r23, 0x01	; 1
     146:	83 e7       	ldi	r24, 0x73	; 115
     148:	92 e0       	ldi	r25, 0x02	; 2
     14a:	0e 94 3d 03 	call	0x67a	; 0x67a <cmp_str>
     14e:	89 2b       	or	r24, r25
     150:	59 f0       	breq	.+22     	; 0x168 <config_is_data_valid+0x2e>
     152:	62 e1       	ldi	r22, 0x12	; 18
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	83 e7       	ldi	r24, 0x73	; 115
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <is_checksum_valid>
     15e:	89 2b       	or	r24, r25
     160:	19 f0       	breq	.+6      	; 0x168 <config_is_data_valid+0x2e>
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <config_is_data_valid+0x32>
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
}
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <config_write_defaults>:
void config_write_defaults()
{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	62 97       	sbiw	r28, 0x12	; 18
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
  /* upate_checksum() for defaults*/
  update_checksum((unsigned char *)&config_defaults, sizeof(config_defaults));
     186:	62 e1       	ldi	r22, 0x12	; 18
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	0e 94 a9 02 	call	0x552	; 0x552 <update_checksum>
  /* write defaults to eeprom */
  struct config_struct temp = config_defaults;
     192:	22 e1       	ldi	r18, 0x12	; 18
     194:	e0 e0       	ldi	r30, 0x00	; 0
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	ce 01       	movw	r24, r28
     19a:	01 96       	adiw	r24, 0x01	; 1
     19c:	dc 01       	movw	r26, r24
     19e:	01 90       	ld	r0, Z+
     1a0:	0d 92       	st	X+, r0
     1a2:	2a 95       	dec	r18
     1a4:	e1 f7       	brne	.-8      	; 0x19e <config_write_defaults+0x2c>
  eeprom_writebuf(0x0040, (unsigned char *)&config_defaults, sizeof(config_defaults));
     1a6:	42 e1       	ldi	r20, 0x12	; 18
     1a8:	60 e0       	ldi	r22, 0x00	; 0
     1aa:	71 e0       	ldi	r23, 0x01	; 1
     1ac:	80 e4       	ldi	r24, 0x40	; 64
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <eeprom_writebuf>
}
     1b4:	00 00       	nop
     1b6:	62 96       	adiw	r28, 0x12	; 18
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <config_read>:
void config_read()
{
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
  eeprom_readbuf(0x0040, (unsigned char *)&config, sizeof(config));
     1d0:	42 e1       	ldi	r20, 0x12	; 18
     1d2:	63 e7       	ldi	r22, 0x73	; 115
     1d4:	72 e0       	ldi	r23, 0x02	; 2
     1d6:	80 e4       	ldi	r24, 0x40	; 64
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 ad 01 	call	0x35a	; 0x35a <eeprom_readbuf>
     1de:	00 00       	nop
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <eeprom_unlock>:
 * Returns ...
 * Changes ...
 */
void eeprom_unlock() {
  /* Write logical one to EEMPE */
  EECR |= (1 << EEMPE);
     1e6:	fa 9a       	sbi	0x1f, 2	; 31
  /* Start eeprom write by setting EEPE */
  EECR |= (1 << EEPE);
     1e8:	f9 9a       	sbi	0x1f, 1	; 31
}
     1ea:	08 95       	ret

000001ec <__vector_22>:

/* Enabled when writebuf() places new data in the write buffer, this ISR sends
 * one byte at a time to the EEPROM. When the last byte is sent, it disables
 * futher EERPOM interrupts */
/* should this bee vector 22 or 23?? Documents say 23 for EE ready */
void __vector_22() {
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	0f 92       	push	r0
     1f4:	11 24       	eor	r1, r1
     1f6:	2f 93       	push	r18
     1f8:	3f 93       	push	r19
     1fa:	4f 93       	push	r20
     1fc:	5f 93       	push	r21
     1fe:	6f 93       	push	r22
     200:	7f 93       	push	r23
     202:	8f 93       	push	r24
     204:	9f 93       	push	r25
     206:	af 93       	push	r26
     208:	bf 93       	push	r27
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62


  /* if you haven't written all characters in then keep writing */
  /* should we check to see if it is ready to write? */
  if (bufidx < writesize) {
     216:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <bufidx>
     21a:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <writesize>
     21e:	98 17       	cp	r25, r24
     220:	78 f5       	brcc	.+94     	; 0x280 <__vector_22+0x94>
      /* set high byte */
    EEARH = (writeaddr >> 8) & 0xFF;
     222:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <writeaddr>
     226:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <writeaddr+0x1>
     22a:	29 2f       	mov	r18, r25
     22c:	33 27       	eor	r19, r19
     22e:	82 e4       	ldi	r24, 0x42	; 66
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	fc 01       	movw	r30, r24
     234:	20 83       	st	Z, r18
    /* set low byte */
    EEARL = writeaddr & 0xFF;
     236:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <writeaddr>
     23a:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <writeaddr+0x1>
     23e:	81 e4       	ldi	r24, 0x41	; 65
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	fc 01       	movw	r30, r24
     244:	20 83       	st	Z, r18
    // EEARL = writeaddr;

    EEDR = writebuf[bufidx];
     246:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <bufidx>
     24a:	28 2f       	mov	r18, r24
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	80 e4       	ldi	r24, 0x40	; 64
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	27 57       	subi	r18, 0x77	; 119
     254:	3d 4f       	sbci	r19, 0xFD	; 253
     256:	f9 01       	movw	r30, r18
     258:	20 81       	ld	r18, Z
     25a:	fc 01       	movw	r30, r24
     25c:	20 83       	st	Z, r18
    eeprom_unlock();
     25e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <eeprom_unlock>
    // Debug print
    // printf("%d: %X %X EEDR: %c\n\r", bufidx, EEARL, EEARH, EEDR);
    bufidx++;
     262:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <bufidx>
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <bufidx>
    writeaddr++;
     26c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <writeaddr>
     270:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <writeaddr+0x1>
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <writeaddr+0x1>
     27a:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <writeaddr>
    /* disable interrupts */
    disable_interrupt();
    /* make ready to write another */
    write_busy = 0;
  }
}
     27e:	04 c0       	rjmp	.+8      	; 0x288 <__vector_22+0x9c>
    bufidx++;
    writeaddr++;
  } else {

    /* disable interrupts */
    disable_interrupt();
     280:	0e 94 1d 02 	call	0x43a	; 0x43a <disable_interrupt>
    /* make ready to write another */
    write_busy = 0;
     284:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <write_busy>
  }
}
     288:	00 00       	nop
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	ff 91       	pop	r31
     290:	ef 91       	pop	r30
     292:	bf 91       	pop	r27
     294:	af 91       	pop	r26
     296:	9f 91       	pop	r25
     298:	8f 91       	pop	r24
     29a:	7f 91       	pop	r23
     29c:	6f 91       	pop	r22
     29e:	5f 91       	pop	r21
     2a0:	4f 91       	pop	r20
     2a2:	3f 91       	pop	r19
     2a4:	2f 91       	pop	r18
     2a6:	0f 90       	pop	r0
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	0f 90       	pop	r0
     2ac:	1f 90       	pop	r1
     2ae:	18 95       	reti

000002b0 <eeprom_writebuf>:
/* this function places the data (specified buf and size) into the write buffer
 * for later writing to the EEPROM. The addr parameter specifies the location to
 * write the data to. */
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf,
                     unsigned char size) {
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <eeprom_writebuf+0x6>
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <eeprom_writebuf+0x8>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <eeprom_writebuf+0xa>
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	9b 83       	std	Y+3, r25	; 0x03
     2c0:	8a 83       	std	Y+2, r24	; 0x02
     2c2:	7d 83       	std	Y+5, r23	; 0x05
     2c4:	6c 83       	std	Y+4, r22	; 0x04
     2c6:	4e 83       	std	Y+6, r20	; 0x06
  // check that write_busy is 0
  if (write_busy > 0) {
     2c8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <write_busy>
     2cc:	88 23       	and	r24, r24
     2ce:	b9 f5       	brne	.+110    	; 0x33e <eeprom_writebuf+0x8e>
    return;
  }
  if (size > 64) {
     2d0:	8e 81       	ldd	r24, Y+6	; 0x06
     2d2:	81 34       	cpi	r24, 0x41	; 65
     2d4:	b0 f5       	brcc	.+108    	; 0x342 <eeprom_writebuf+0x92>
    return;
  }
  if ((addr + size) > 0x3FF) {
     2d6:	8e 81       	ldd	r24, Y+6	; 0x06
     2d8:	28 2f       	mov	r18, r24
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	8a 81       	ldd	r24, Y+2	; 0x02
     2de:	9b 81       	ldd	r25, Y+3	; 0x03
     2e0:	82 0f       	add	r24, r18
     2e2:	93 1f       	adc	r25, r19
     2e4:	81 15       	cp	r24, r1
     2e6:	94 40       	sbci	r25, 0x04	; 4
     2e8:	70 f5       	brcc	.+92     	; 0x346 <eeprom_writebuf+0x96>
    return;
  }
  /* the EEPROM is now writing */
  write_busy = 1;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <write_busy>
  /* change the write address */
  writeaddr = addr;
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	9b 81       	ldd	r25, Y+3	; 0x03
     2f4:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <writeaddr+0x1>
     2f8:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <writeaddr>
  /* start reading from the beginning of the buffer */
  bufidx = 0;
     2fc:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <bufidx>

  /* copy buf to writebuf and configure writesize */
  for (unsigned char i = 0; i < size; i++) {
     300:	19 82       	std	Y+1, r1	; 0x01
     302:	13 c0       	rjmp	.+38     	; 0x32a <eeprom_writebuf+0x7a>
    writebuf[i] = buf[i];
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	88 2f       	mov	r24, r24
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	2c 81       	ldd	r18, Y+4	; 0x04
     30c:	3d 81       	ldd	r19, Y+5	; 0x05
     30e:	28 0f       	add	r18, r24
     310:	39 1f       	adc	r19, r25
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	88 2f       	mov	r24, r24
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	f9 01       	movw	r30, r18
     31a:	20 81       	ld	r18, Z
     31c:	87 57       	subi	r24, 0x77	; 119
     31e:	9d 4f       	sbci	r25, 0xFD	; 253
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
  writeaddr = addr;
  /* start reading from the beginning of the buffer */
  bufidx = 0;

  /* copy buf to writebuf and configure writesize */
  for (unsigned char i = 0; i < size; i++) {
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	8f 5f       	subi	r24, 0xFF	; 255
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	99 81       	ldd	r25, Y+1	; 0x01
     32c:	8e 81       	ldd	r24, Y+6	; 0x06
     32e:	98 17       	cp	r25, r24
     330:	48 f3       	brcs	.-46     	; 0x304 <eeprom_writebuf+0x54>
    writebuf[i] = buf[i];
  }

  writesize = size;
     332:	8e 81       	ldd	r24, Y+6	; 0x06
     334:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <writesize>

  /* enable the EEPROM ready interrupts */
  enable_interrupt();
     338:	0e 94 0c 02 	call	0x418	; 0x418 <enable_interrupt>
     33c:	05 c0       	rjmp	.+10     	; 0x348 <eeprom_writebuf+0x98>
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf,
                     unsigned char size) {
  // check that write_busy is 0
  if (write_busy > 0) {
    return;
     33e:	00 00       	nop
     340:	03 c0       	rjmp	.+6      	; 0x348 <eeprom_writebuf+0x98>
  }
  if (size > 64) {
    return;
     342:	00 00       	nop
     344:	01 c0       	rjmp	.+2      	; 0x348 <eeprom_writebuf+0x98>
  }
  if ((addr + size) > 0x3FF) {
    return;
     346:	00 00       	nop

  writesize = size;

  /* enable the EEPROM ready interrupts */
  enable_interrupt();
}
     348:	26 96       	adiw	r28, 0x06	; 6
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <eeprom_readbuf>:

/* this function reads a specified amount of data(size) from the EEPROM starting
 * at a specified address(addr) and places it in the specified buffer(buf) */
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	00 d0       	rcall	.+0      	; 0x360 <eeprom_readbuf+0x6>
     360:	00 d0       	rcall	.+0      	; 0x362 <eeprom_readbuf+0x8>
     362:	00 d0       	rcall	.+0      	; 0x364 <eeprom_readbuf+0xa>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	9b 83       	std	Y+3, r25	; 0x03
     36a:	8a 83       	std	Y+2, r24	; 0x02
     36c:	7d 83       	std	Y+5, r23	; 0x05
     36e:	6c 83       	std	Y+4, r22	; 0x04
     370:	4e 83       	std	Y+6, r20	; 0x06

  if (size > 64) {
     372:	8e 81       	ldd	r24, Y+6	; 0x06
     374:	81 34       	cpi	r24, 0x41	; 65
     376:	b8 f5       	brcc	.+110    	; 0x3e6 <eeprom_readbuf+0x8c>
    /* write error. buffer is too big */
    return;
  }
  while (eeprom_isbusy());
     378:	00 00       	nop
     37a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_isbusy>
     37e:	89 2b       	or	r24, r25
     380:	e1 f7       	brne	.-8      	; 0x37a <eeprom_readbuf+0x20>

  for (unsigned char i = 0; i < size; i++) {
     382:	19 82       	std	Y+1, r1	; 0x01
     384:	2b c0       	rjmp	.+86     	; 0x3dc <eeprom_readbuf+0x82>


      /* set high byte */
    EEARH = (addr >> 8) & 0xFF;
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	9b 81       	ldd	r25, Y+3	; 0x03
     38a:	29 2f       	mov	r18, r25
     38c:	33 27       	eor	r19, r19
     38e:	82 e4       	ldi	r24, 0x42	; 66
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
    /* set low byte */
    EEARL = addr & 0xFF;
     396:	81 e4       	ldi	r24, 0x41	; 65
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	2a 81       	ldd	r18, Y+2	; 0x02
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18

    // EEARL = addr;

    /* set mode to read */
    EECR |= (1 << EERE);
     3a0:	8f e3       	ldi	r24, 0x3F	; 63
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 81       	ld	r18, Z
     3a8:	8f e3       	ldi	r24, 0x3F	; 63
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	21 60       	ori	r18, 0x01	; 1
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18


    /* write from register to buffer */
    buf[i] = EEDR;
     3b2:	20 e4       	ldi	r18, 0x40	; 64
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	88 2f       	mov	r24, r24
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	4c 81       	ldd	r20, Y+4	; 0x04
     3be:	5d 81       	ldd	r21, Y+5	; 0x05
     3c0:	84 0f       	add	r24, r20
     3c2:	95 1f       	adc	r25, r21
     3c4:	f9 01       	movw	r30, r18
     3c6:	20 81       	ld	r18, Z
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
    addr++;
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	9b 81       	ldd	r25, Y+3	; 0x03
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	9b 83       	std	Y+3, r25	; 0x03
     3d4:	8a 83       	std	Y+2, r24	; 0x02
    /* write error. buffer is too big */
    return;
  }
  while (eeprom_isbusy());

  for (unsigned char i = 0; i < size; i++) {
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	8f 5f       	subi	r24, 0xFF	; 255
     3da:	89 83       	std	Y+1, r24	; 0x01
     3dc:	99 81       	ldd	r25, Y+1	; 0x01
     3de:	8e 81       	ldd	r24, Y+6	; 0x06
     3e0:	98 17       	cp	r25, r24
     3e2:	88 f2       	brcs	.-94     	; 0x386 <eeprom_readbuf+0x2c>
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <eeprom_readbuf+0x8e>
 * at a specified address(addr) and places it in the specified buffer(buf) */
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {

  if (size > 64) {
    /* write error. buffer is too big */
    return;
     3e6:	00 00       	nop

    /* write from register to buffer */
    buf[i] = EEDR;
    addr++;
  }
}
     3e8:	26 96       	adiw	r28, 0x06	; 6
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <eeprom_isbusy>:

/* this functiosn returns 0 if write_busy is 0, otherwise, returns 1 */
int eeprom_isbusy() {
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62


  return  write_busy == 1;
     402:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <write_busy>
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	91 30       	cpi	r25, 0x01	; 1
     40a:	09 f0       	breq	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	88 2f       	mov	r24, r24
     410:	90 e0       	ldi	r25, 0x00	; 0
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <enable_interrupt>:

void enable_interrupt() { 
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
  EECR |= (1 << EERIE); 
     420:	8f e3       	ldi	r24, 0x3F	; 63
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	fc 01       	movw	r30, r24
     426:	20 81       	ld	r18, Z
     428:	8f e3       	ldi	r24, 0x3F	; 63
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	28 60       	ori	r18, 0x08	; 8
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18

}
     432:	00 00       	nop
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <disable_interrupt>:

void disable_interrupt() { EECR &= ~(1 << EERIE); }
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	8f e3       	ldi	r24, 0x3F	; 63
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	fc 01       	movw	r30, r24
     448:	20 81       	ld	r18, Z
     44a:	8f e3       	ldi	r24, 0x3F	; 63
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	27 7f       	andi	r18, 0xF7	; 247
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18
     454:	00 00       	nop
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <enable_global_interrupts>:

#define SREG (*(volatile unsigned char *)0x5F)
#define I_BIT 7

void enable_global_interrupts()
{
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
  SREG |= (1 << I_BIT); // Set the I bit to enable interrupts
     464:	8f e5       	ldi	r24, 0x5F	; 95
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	fc 01       	movw	r30, r24
     46a:	20 81       	ld	r18, Z
     46c:	8f e5       	ldi	r24, 0x5F	; 95
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	20 68       	ori	r18, 0x80	; 128
     472:	fc 01       	movw	r30, r24
     474:	20 83       	st	Z, r18
}
     476:	00 00       	nop
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <main>:

int main()
{
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	00 d0       	rcall	.+0      	; 0x484 <main+0x6>
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
  enable_global_interrupts();
     488:	0e 94 2e 02 	call	0x45c	; 0x45c <enable_global_interrupts>
  // variable to track if the eeprom has been dumped
  int dumped = 0;
     48c:	1a 82       	std	Y+2, r1	; 0x02
     48e:	19 82       	std	Y+1, r1	; 0x01
  // init uart
  uart_init();
     490:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <uart_init>
  // init config
  config_init();
     494:	0e 94 53 00 	call	0xa6	; 0xa6 <config_init>
  // init led
  led_init();
     498:	0e 94 47 04 	call	0x88e	; 0x88e <led_init>
  // init log
  log_init();
     49c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <log_init>
  // init rtc
  rtc_init();
     4a0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <rtc_init>
  // init vpd
  vpd_init();
     4a4:	0e 94 83 03 	call	0x706	; 0x706 <vpd_init>

  // led blink pattern "--- -.-"
  led_set_blink("--- -.-");
     4a8:	81 e6       	ldi	r24, 0x61	; 97
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 db 03 	call	0x7b6	; 0x7b6 <led_set_blink>
  // set RTC date/time to "01/01/2019 00:00:00"
  rtc_set_by_datestr("01/01/2019 00:00:00");
     4b0:	89 e6       	ldi	r24, 0x69	; 105
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <rtc_set_by_datestr>

  // write the mandatory SER line and name to uart \n
  uart_writestr("SER 486 Project 2 – DaVonte Carter vault\n\r");
     4b8:	8d e7       	ldi	r24, 0x7D	; 125
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_writestr>
  // read/Write the model to uart \n
  uart_writestr(vpd.model);
     4c0:	8e e8       	ldi	r24, 0x8E	; 142
     4c2:	94 e0       	ldi	r25, 0x04	; 4
     4c4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_writestr>
  uart_writestr("\n\r");
     4c8:	8a ea       	ldi	r24, 0xAA	; 170
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_writestr>
  // read/Write the manufactuer to uart \n
  uart_writestr(vpd.manufacturer);
     4d0:	8a e9       	ldi	r24, 0x9A	; 154
     4d2:	94 e0       	ldi	r25, 0x04	; 4
     4d4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_writestr>
  uart_writestr("\n\r");
     4d8:	8a ea       	ldi	r24, 0xAA	; 170
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_writestr>
  // read/write the token to uart \n
  uart_writestr(vpd.token);
     4e0:	8a e8       	ldi	r24, 0x8A	; 138
     4e2:	94 e0       	ldi	r25, 0x04	; 4
     4e4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_writestr>
  uart_writestr("\n\r");
     4e8:	8a ea       	ldi	r24, 0xAA	; 170
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_writestr>

  // set the config_use_static_ip to 1
  config.use_static_ip = 1;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <config+0xc>
  // set the config modified state
  config_set_modified();
     4f6:	0e 94 92 00 	call	0x124	; 0x124 <config_set_modified>
  // clear the event log
  log_clear();
     4fa:	0e 94 c5 05 	call	0xb8a	; 0xb8a <log_clear>

  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc
  log_add_record(0xaa);
     4fe:	8a ea       	ldi	r24, 0xAA	; 170
     500:	0e 94 74 05 	call	0xae8	; 0xae8 <log_add_record>
  log_add_record(0xbb);
     504:	8b eb       	ldi	r24, 0xBB	; 187
     506:	0e 94 74 05 	call	0xae8	; 0xae8 <log_add_record>
  log_add_record(0xcc);
     50a:	8c ec       	ldi	r24, 0xCC	; 204
     50c:	0e 94 74 05 	call	0xae8	; 0xae8 <log_add_record>

  while (1)
  {
    // update the blink fsm every
    led_update();
     510:	0e 94 ed 03 	call	0x7da	; 0x7da <led_update>

    // if (log has changed && eeprom is not busy)
    // update the log in EEPROM
    if (!eeprom_isbusy())
     514:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_isbusy>
     518:	89 2b       	or	r24, r25
     51a:	11 f4       	brne	.+4      	; 0x520 <main+0xa2>
    {
      log_update();
     51c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <log_update>
    }

    // if (config has changed && eeprom is not busy)
    // update config in EEPROM
    if (!eeprom_isbusy())
     520:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_isbusy>
     524:	89 2b       	or	r24, r25
     526:	11 f4       	brne	.+4      	; 0x52c <main+0xae>
    {
      config_update();
     528:	0e 94 72 00 	call	0xe4	; 0xe4 <config_update>
    }
    /* dump memory once and only once*/
    if ((!eeprom_isbusy()) && (!dumped))
     52c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_isbusy>
     530:	89 2b       	or	r24, r25
     532:	71 f7       	brne	.-36     	; 0x510 <main+0x92>
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	89 2b       	or	r24, r25
     53a:	51 f7       	brne	.-44     	; 0x510 <main+0x92>
    {
      dump_eeprom(0, 0x100);
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	71 e0       	ldi	r23, 0x01	; 1
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 b4 0a 	call	0x1568	; 0x1568 <dump_eeprom>
      dumped = 1;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	89 83       	std	Y+1, r24	; 0x01
  log_add_record(0xcc);

  while (1)
  {
    // update the blink fsm every
    led_update();
     550:	df cf       	rjmp	.-66     	; 0x510 <main+0x92>

00000552 <update_checksum>:
#include "util.h"

void update_checksum(unsigned char *data, unsigned int size)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	28 97       	sbiw	r28, 0x08	; 8
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	9e 83       	std	Y+6, r25	; 0x06
     568:	8d 83       	std	Y+5, r24	; 0x05
     56a:	78 87       	std	Y+8, r23	; 0x08
     56c:	6f 83       	std	Y+7, r22	; 0x07
    unsigned int sum = 0;
     56e:	1a 82       	std	Y+2, r1	; 0x02
     570:	19 82       	std	Y+1, r1	; 0x01
    unsigned int i;

    /* Edge case: If size is zero or one, nothing to update */
    if (size <= 1)
     572:	8f 81       	ldd	r24, Y+7	; 0x07
     574:	98 85       	ldd	r25, Y+8	; 0x08
     576:	02 97       	sbiw	r24, 0x02	; 2
     578:	68 f1       	brcs	.+90     	; 0x5d4 <update_checksum+0x82>
    {
        return;
    }

    /* Sum all bytes except the last one (which is the checksum byte) */
    for (i = 0; i < size - 1; i++)
     57a:	1c 82       	std	Y+4, r1	; 0x04
     57c:	1b 82       	std	Y+3, r1	; 0x03
     57e:	15 c0       	rjmp	.+42     	; 0x5aa <update_checksum+0x58>
    {
        sum += (unsigned char)data[i];
     580:	2d 81       	ldd	r18, Y+5	; 0x05
     582:	3e 81       	ldd	r19, Y+6	; 0x06
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	9c 81       	ldd	r25, Y+4	; 0x04
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	fc 01       	movw	r30, r24
     58e:	80 81       	ld	r24, Z
     590:	88 2f       	mov	r24, r24
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	29 81       	ldd	r18, Y+1	; 0x01
     596:	3a 81       	ldd	r19, Y+2	; 0x02
     598:	82 0f       	add	r24, r18
     59a:	93 1f       	adc	r25, r19
     59c:	9a 83       	std	Y+2, r25	; 0x02
     59e:	89 83       	std	Y+1, r24	; 0x01
    {
        return;
    }

    /* Sum all bytes except the last one (which is the checksum byte) */
    for (i = 0; i < size - 1; i++)
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	9c 81       	ldd	r25, Y+4	; 0x04
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	9c 83       	std	Y+4, r25	; 0x04
     5a8:	8b 83       	std	Y+3, r24	; 0x03
     5aa:	8f 81       	ldd	r24, Y+7	; 0x07
     5ac:	98 85       	ldd	r25, Y+8	; 0x08
     5ae:	01 97       	sbiw	r24, 0x01	; 1
     5b0:	2b 81       	ldd	r18, Y+3	; 0x03
     5b2:	3c 81       	ldd	r19, Y+4	; 0x04
     5b4:	28 17       	cp	r18, r24
     5b6:	39 07       	cpc	r19, r25
     5b8:	18 f3       	brcs	.-58     	; 0x580 <update_checksum+0x2e>
    {
        sum += (unsigned char)data[i];
    }

    /* Calculate the checksum so that the total sum modulo 256 is zero */
    data[size - 1] = (unsigned char)(-(sum & 0xFF));
     5ba:	49 81       	ldd	r20, Y+1	; 0x01
     5bc:	8f 81       	ldd	r24, Y+7	; 0x07
     5be:	98 85       	ldd	r25, Y+8	; 0x08
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	2d 81       	ldd	r18, Y+5	; 0x05
     5c4:	3e 81       	ldd	r19, Y+6	; 0x06
     5c6:	82 0f       	add	r24, r18
     5c8:	93 1f       	adc	r25, r19
     5ca:	24 2f       	mov	r18, r20
     5cc:	21 95       	neg	r18
     5ce:	fc 01       	movw	r30, r24
     5d0:	20 83       	st	Z, r18
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <update_checksum+0x84>
    unsigned int i;

    /* Edge case: If size is zero or one, nothing to update */
    if (size <= 1)
    {
        return;
     5d4:	00 00       	nop
        sum += (unsigned char)data[i];
    }

    /* Calculate the checksum so that the total sum modulo 256 is zero */
    data[size - 1] = (unsigned char)(-(sum & 0xFF));
}
     5d6:	28 96       	adiw	r28, 0x08	; 8
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <is_checksum_valid>:

int is_checksum_valid(unsigned char *data, unsigned int size)
{
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	28 97       	sbiw	r28, 0x08	; 8
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	9e 83       	std	Y+6, r25	; 0x06
     5fe:	8d 83       	std	Y+5, r24	; 0x05
     600:	78 87       	std	Y+8, r23	; 0x08
     602:	6f 83       	std	Y+7, r22	; 0x07
    unsigned int sum = 0;
     604:	1a 82       	std	Y+2, r1	; 0x02
     606:	19 82       	std	Y+1, r1	; 0x01
    unsigned int i;

    /* Edge case: If size is zero or one, checksum cannot be valid */
    if (size <= 1)
     608:	8f 81       	ldd	r24, Y+7	; 0x07
     60a:	98 85       	ldd	r25, Y+8	; 0x08
     60c:	02 97       	sbiw	r24, 0x02	; 2
     60e:	18 f4       	brcc	.+6      	; 0x616 <is_checksum_valid+0x2e>
    {
        return 0;
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	29 c0       	rjmp	.+82     	; 0x668 <is_checksum_valid+0x80>
    }

    /* Sum all bytes including the checksum byte */
    for (i = 0; i < size; i++)
     616:	1c 82       	std	Y+4, r1	; 0x04
     618:	1b 82       	std	Y+3, r1	; 0x03
     61a:	15 c0       	rjmp	.+42     	; 0x646 <is_checksum_valid+0x5e>
    {
        sum += data[i];
     61c:	2d 81       	ldd	r18, Y+5	; 0x05
     61e:	3e 81       	ldd	r19, Y+6	; 0x06
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	9c 81       	ldd	r25, Y+4	; 0x04
     624:	82 0f       	add	r24, r18
     626:	93 1f       	adc	r25, r19
     628:	fc 01       	movw	r30, r24
     62a:	80 81       	ld	r24, Z
     62c:	88 2f       	mov	r24, r24
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	29 81       	ldd	r18, Y+1	; 0x01
     632:	3a 81       	ldd	r19, Y+2	; 0x02
     634:	82 0f       	add	r24, r18
     636:	93 1f       	adc	r25, r19
     638:	9a 83       	std	Y+2, r25	; 0x02
     63a:	89 83       	std	Y+1, r24	; 0x01
    {
        return 0;
    }

    /* Sum all bytes including the checksum byte */
    for (i = 0; i < size; i++)
     63c:	8b 81       	ldd	r24, Y+3	; 0x03
     63e:	9c 81       	ldd	r25, Y+4	; 0x04
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	9c 83       	std	Y+4, r25	; 0x04
     644:	8b 83       	std	Y+3, r24	; 0x03
     646:	2b 81       	ldd	r18, Y+3	; 0x03
     648:	3c 81       	ldd	r19, Y+4	; 0x04
     64a:	8f 81       	ldd	r24, Y+7	; 0x07
     64c:	98 85       	ldd	r25, Y+8	; 0x08
     64e:	28 17       	cp	r18, r24
     650:	39 07       	cpc	r19, r25
     652:	20 f3       	brcs	.-56     	; 0x61c <is_checksum_valid+0x34>
    {
        sum += data[i];
    }

    /* Check if the total sum modulo 256 is zero */
    if ((sum & 0xFF) == 0)
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	9a 81       	ldd	r25, Y+2	; 0x02
     658:	99 27       	eor	r25, r25
     65a:	89 2b       	or	r24, r25
     65c:	19 f4       	brne	.+6      	; 0x664 <is_checksum_valid+0x7c>
    {
        return 1; /* Checksum is valid */
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	02 c0       	rjmp	.+4      	; 0x668 <is_checksum_valid+0x80>
    }
    else
    {
        return 0; /* Checksum is invalid */
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
    }
}
     668:	28 96       	adiw	r28, 0x08	; 8
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <cmp_str>:

int cmp_str(const char *str1, const char *str2)
{
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	00 d0       	rcall	.+0      	; 0x680 <cmp_str+0x6>
     680:	00 d0       	rcall	.+0      	; 0x682 <cmp_str+0x8>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	9a 83       	std	Y+2, r25	; 0x02
     688:	89 83       	std	Y+1, r24	; 0x01
     68a:	7c 83       	std	Y+4, r23	; 0x04
     68c:	6b 83       	std	Y+3, r22	; 0x03
  while (*str1 && *str2)
     68e:	17 c0       	rjmp	.+46     	; 0x6be <cmp_str+0x44>
  {
    if (*str1 != *str2)
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	fc 01       	movw	r30, r24
     696:	20 81       	ld	r18, Z
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	9c 81       	ldd	r25, Y+4	; 0x04
     69c:	fc 01       	movw	r30, r24
     69e:	80 81       	ld	r24, Z
     6a0:	28 17       	cp	r18, r24
     6a2:	19 f0       	breq	.+6      	; 0x6aa <cmp_str+0x30>
    {
      return 0;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	27 c0       	rjmp	.+78     	; 0x6f8 <cmp_str+0x7e>
    }
    str1++;
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	89 83       	std	Y+1, r24	; 0x01
    str2++;
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	9c 81       	ldd	r25, Y+4	; 0x04
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	9c 83       	std	Y+4, r25	; 0x04
     6bc:	8b 83       	std	Y+3, r24	; 0x03
    }
}

int cmp_str(const char *str1, const char *str2)
{
  while (*str1 && *str2)
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	fc 01       	movw	r30, r24
     6c4:	80 81       	ld	r24, Z
     6c6:	88 23       	and	r24, r24
     6c8:	31 f0       	breq	.+12     	; 0x6d6 <cmp_str+0x5c>
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	9c 81       	ldd	r25, Y+4	; 0x04
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	88 23       	and	r24, r24
     6d4:	e9 f6       	brne	.-70     	; 0x690 <cmp_str+0x16>
      return 0;
    }
    str1++;
    str2++;
  }
  return *str1 == '\0' && *str2 == '\0';
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	fc 01       	movw	r30, r24
     6dc:	80 81       	ld	r24, Z
     6de:	88 23       	and	r24, r24
     6e0:	49 f4       	brne	.+18     	; 0x6f4 <cmp_str+0x7a>
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	88 23       	and	r24, r24
     6ec:	19 f4       	brne	.+6      	; 0x6f4 <cmp_str+0x7a>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <cmp_str+0x7e>
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <vpd_init>:
/* read manufacturer data from eeprom */
void read_vpd();

/********** public definitions **********/
void vpd_init()
{
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
  // wait for the eeprom to free up
  while (eeprom_isbusy())
     70e:	00 00       	nop
     710:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_isbusy>
     714:	89 2b       	or	r24, r25
     716:	e1 f7       	brne	.-8      	; 0x710 <vpd_init+0xa>
    ;

  /* read all data from the EEPROM at address 0x000 */
  read_vpd();
     718:	0e 94 cc 03 	call	0x798	; 0x798 <read_vpd>

  /* if the data was invalid then write defaults and try to reinitialize */
  while (!vpd_is_data_valid())
     71c:	04 c0       	rjmp	.+8      	; 0x726 <vpd_init+0x20>
  {
    // initialize data from defaults
    vpd_write_defaults();
     71e:	0e 94 9b 03 	call	0x736	; 0x736 <vpd_write_defaults>
    // read defaults
    read_vpd();
     722:	0e 94 cc 03 	call	0x798	; 0x798 <read_vpd>

  /* read all data from the EEPROM at address 0x000 */
  read_vpd();

  /* if the data was invalid then write defaults and try to reinitialize */
  while (!vpd_is_data_valid())
     726:	0e 94 b0 03 	call	0x760	; 0x760 <vpd_is_data_valid>
     72a:	89 2b       	or	r24, r25
     72c:	c1 f3       	breq	.-16     	; 0x71e <vpd_init+0x18>
    // initialize data from defaults
    vpd_write_defaults();
    // read defaults
    read_vpd();
  }
}
     72e:	00 00       	nop
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <vpd_write_defaults>:

void vpd_write_defaults()
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
  /* update checksum for defaults */
  update_checksum((unsigned char *)&defaults, sizeof(defaults));
     73e:	67 e3       	ldi	r22, 0x37	; 55
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	82 e1       	ldi	r24, 0x12	; 18
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 a9 02 	call	0x552	; 0x552 <update_checksum>
  /* write the defaults */
  eeprom_writebuf(0x0000, (unsigned char *)&defaults, sizeof(defaults));
     74a:	47 e3       	ldi	r20, 0x37	; 55
     74c:	62 e1       	ldi	r22, 0x12	; 18
     74e:	71 e0       	ldi	r23, 0x01	; 1
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 58 01 	call	0x2b0	; 0x2b0 <eeprom_writebuf>
}
     758:	00 00       	nop
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <vpd_is_data_valid>:

int vpd_is_data_valid()
{
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(vpd.token, "SER") && is_checksum_valid((unsigned char *)&vpd, sizeof(vpd));
     768:	6d ea       	ldi	r22, 0xAD	; 173
     76a:	71 e0       	ldi	r23, 0x01	; 1
     76c:	8a e8       	ldi	r24, 0x8A	; 138
     76e:	94 e0       	ldi	r25, 0x04	; 4
     770:	0e 94 3d 03 	call	0x67a	; 0x67a <cmp_str>
     774:	89 2b       	or	r24, r25
     776:	59 f0       	breq	.+22     	; 0x78e <vpd_is_data_valid+0x2e>
     778:	67 e3       	ldi	r22, 0x37	; 55
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	8a e8       	ldi	r24, 0x8A	; 138
     77e:	94 e0       	ldi	r25, 0x04	; 4
     780:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <is_checksum_valid>
     784:	89 2b       	or	r24, r25
     786:	19 f0       	breq	.+6      	; 0x78e <vpd_is_data_valid+0x2e>
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	02 c0       	rjmp	.+4      	; 0x792 <vpd_is_data_valid+0x32>
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <read_vpd>:

/********** private definitions **********/

void read_vpd()
{
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
  eeprom_readbuf(0x0000, (unsigned char *)&vpd, sizeof(vpd));
     7a0:	47 e3       	ldi	r20, 0x37	; 55
     7a2:	6a e8       	ldi	r22, 0x8A	; 138
     7a4:	74 e0       	ldi	r23, 0x04	; 4
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 ad 01 	call	0x35a	; 0x35a <eeprom_readbuf>
     7ae:	00 00       	nop
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <led_set_blink>:
     7b6:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <blink_msg+0x1>
     7ba:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <blink_msg>
     7be:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <blink_pos+0x1>
     7c2:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <blink_pos>
     7c6:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <blink_state>
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <delay_set>
     7d6:	0c 94 4c 04 	jmp	0x898	; 0x898 <led_off>

000007da <led_update>:
     7da:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <blink_msg>
     7de:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <blink_msg+0x1>
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <led_update+0xe>
     7e6:	52 c0       	rjmp	.+164    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <delay_isdone>
     7f0:	89 2b       	or	r24, r25
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <led_update+0x1c>
     7f4:	4b c0       	rjmp	.+150    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     7f6:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <blink_state>
     7fa:	81 11       	cpse	r24, r1
     7fc:	34 c0       	rjmp	.+104    	; 0x866 <__DATA_REGION_LENGTH__+0x66>
     7fe:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <blink_pos>
     802:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <blink_pos+0x1>
     806:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <blink_msg>
     80a:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <blink_msg+0x1>
     80e:	e2 0f       	add	r30, r18
     810:	f3 1f       	adc	r31, r19
     812:	80 81       	ld	r24, Z
     814:	80 32       	cpi	r24, 0x20	; 32
     816:	e9 f0       	breq	.+58     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     818:	3c f4       	brge	.+14     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     81a:	81 11       	cpse	r24, r1
     81c:	1d c0       	rjmp	.+58     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     81e:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <blink_pos+0x1>
     822:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <blink_pos>
     826:	08 95       	ret
     828:	8d 32       	cpi	r24, 0x2D	; 45
     82a:	39 f0       	breq	.+14     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     82c:	8e 32       	cpi	r24, 0x2E	; 46
     82e:	a1 f4       	brne	.+40     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     830:	0e 94 4a 04 	call	0x894	; 0x894 <led_on>
     834:	6a ef       	ldi	r22, 0xFA	; 250
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	04 c0       	rjmp	.+8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     83a:	0e 94 4a 04 	call	0x894	; 0x894 <led_on>
     83e:	6e ee       	ldi	r22, 0xEE	; 238
     840:	72 e0       	ldi	r23, 0x02	; 2
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <delay_set>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <blink_state>
     850:	08 95       	ret
     852:	68 ee       	ldi	r22, 0xE8	; 232
     854:	73 e0       	ldi	r23, 0x03	; 3
     856:	0b c0       	rjmp	.+22     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     858:	2f 5f       	subi	r18, 0xFF	; 255
     85a:	3f 4f       	sbci	r19, 0xFF	; 255
     85c:	30 93 dd 01 	sts	0x01DD, r19	; 0x8001dd <blink_pos+0x1>
     860:	20 93 dc 01 	sts	0x01DC, r18	; 0x8001dc <blink_pos>
     864:	08 95       	ret
     866:	0e 94 4c 04 	call	0x898	; 0x898 <led_off>
     86a:	64 e6       	ldi	r22, 0x64	; 100
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <delay_set>
     876:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <blink_state>
     87a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <blink_pos>
     87e:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <blink_pos+0x1>
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <blink_pos+0x1>
     888:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <blink_pos>
     88c:	08 95       	ret

0000088e <led_init>:
     88e:	21 9a       	sbi	0x04, 1	; 4
     890:	29 98       	cbi	0x05, 1	; 5
     892:	08 95       	ret

00000894 <led_on>:
     894:	29 9a       	sbi	0x05, 1	; 5
     896:	08 95       	ret

00000898 <led_off>:
     898:	29 98       	cbi	0x05, 1	; 5
     89a:	08 95       	ret

0000089c <led_is_on>:
     89c:	85 b1       	in	r24, 0x05	; 5
     89e:	86 95       	lsr	r24
     8a0:	81 70       	andi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	08 95       	ret

000008a6 <log_is_data_valid>:
     8a6:	80 31       	cpi	r24, 0x10	; 16
     8a8:	91 05       	cpc	r25, r1
     8aa:	04 f5       	brge	.+64     	; 0x8ec <log_is_data_valid+0x46>
     8ac:	27 e0       	ldi	r18, 0x07	; 7
     8ae:	28 9f       	mul	r18, r24
     8b0:	a0 01       	movw	r20, r0
     8b2:	29 9f       	mul	r18, r25
     8b4:	50 0d       	add	r21, r0
     8b6:	11 24       	eor	r1, r1
     8b8:	fa 01       	movw	r30, r20
     8ba:	ef 51       	subi	r30, 0x1F	; 31
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
     8be:	80 81       	ld	r24, Z
     8c0:	81 32       	cpi	r24, 0x21	; 33
     8c2:	a0 f4       	brcc	.+40     	; 0x8ec <log_is_data_valid+0x46>
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	fa 01       	movw	r30, r20
     8cc:	e8 0f       	add	r30, r24
     8ce:	f9 1f       	adc	r31, r25
     8d0:	ef 51       	subi	r30, 0x1F	; 31
     8d2:	fe 4f       	sbci	r31, 0xFE	; 254
     8d4:	30 81       	ld	r19, Z
     8d6:	23 0f       	add	r18, r19
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	87 30       	cpi	r24, 0x07	; 7
     8dc:	91 05       	cpc	r25, r1
     8de:	a9 f7       	brne	.-22     	; 0x8ca <log_is_data_valid+0x24>
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	22 23       	and	r18, r18
     8e6:	21 f0       	breq	.+8      	; 0x8f0 <log_is_data_valid+0x4a>
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	08 95       	ret
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	08 95       	ret

000008f2 <log_init>:
     8f2:	6f 92       	push	r6
     8f4:	7f 92       	push	r7
     8f6:	8f 92       	push	r8
     8f8:	9f 92       	push	r9
     8fa:	af 92       	push	r10
     8fc:	bf 92       	push	r11
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_isbusy>
     912:	89 2b       	or	r24, r25
     914:	e1 f7       	brne	.-8      	; 0x90e <__stack+0xf>
     916:	01 e5       	ldi	r16, 0x51	; 81
     918:	12 e0       	ldi	r17, 0x02	; 2
     91a:	c0 e8       	ldi	r28, 0x80	; 128
     91c:	d0 e0       	ldi	r29, 0x00	; 0
     91e:	be 01       	movw	r22, r28
     920:	6f 59       	subi	r22, 0x9F	; 159
     922:	7e 4f       	sbci	r23, 0xFE	; 254
     924:	47 e0       	ldi	r20, 0x07	; 7
     926:	ce 01       	movw	r24, r28
     928:	0e 94 ad 01 	call	0x35a	; 0x35a <eeprom_readbuf>
     92c:	f8 01       	movw	r30, r16
     92e:	11 92       	st	Z+, r1
     930:	8f 01       	movw	r16, r30
     932:	27 96       	adiw	r28, 0x07	; 7
     934:	c0 3f       	cpi	r28, 0xF0	; 240
     936:	d1 05       	cpc	r29, r1
     938:	91 f7       	brne	.-28     	; 0x91e <__stack+0x1f>
     93a:	41 ee       	ldi	r20, 0xE1	; 225
     93c:	e4 2e       	mov	r14, r20
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	f4 2e       	mov	r15, r20
     942:	87 01       	movw	r16, r14
     944:	c0 e0       	ldi	r28, 0x00	; 0
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	d1 2c       	mov	r13, r1
     94a:	b1 2c       	mov	r11, r1
     94c:	77 24       	eor	r7, r7
     94e:	7a 94       	dec	r7
     950:	ce 01       	movw	r24, r28
     952:	0e 94 53 04 	call	0x8a6	; 0x8a6 <log_is_data_valid>
     956:	89 2b       	or	r24, r25
     958:	41 f0       	breq	.+16     	; 0x96a <__stack+0x6b>
     95a:	f8 01       	movw	r30, r16
     95c:	80 81       	ld	r24, Z
     95e:	87 15       	cp	r24, r7
     960:	20 f4       	brcc	.+8      	; 0x96a <__stack+0x6b>
     962:	bc 2e       	mov	r11, r28
     964:	78 2e       	mov	r7, r24
     966:	dd 24       	eor	r13, r13
     968:	d3 94       	inc	r13
     96a:	21 96       	adiw	r28, 0x01	; 1
     96c:	09 5f       	subi	r16, 0xF9	; 249
     96e:	1f 4f       	sbci	r17, 0xFF	; 255
     970:	c0 31       	cpi	r28, 0x10	; 16
     972:	d1 05       	cpc	r29, r1
     974:	69 f7       	brne	.-38     	; 0x950 <__stack+0x51>
     976:	dd 20       	and	r13, r13
     978:	09 f4       	brne	.+2      	; 0x97c <__stack+0x7d>
     97a:	6a c0       	rjmp	.+212    	; 0xa50 <__stack+0x151>
     97c:	b0 92 e0 01 	sts	0x01E0, r11	; 0x8001e0 <last_written>
     980:	70 92 df 01 	sts	0x01DF, r7	; 0x8001df <last_transaction_written>
     984:	cb 2d       	mov	r28, r11
     986:	d0 e0       	ldi	r29, 0x00	; 0
     988:	8e 01       	movw	r16, r28
     98a:	0f 5f       	subi	r16, 0xFF	; 255
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	87 2c       	mov	r8, r7
     990:	2f e0       	ldi	r18, 0x0F	; 15
     992:	a2 2e       	mov	r10, r18
     994:	37 e0       	ldi	r19, 0x07	; 7
     996:	93 2e       	mov	r9, r19
     998:	68 01       	movw	r12, r16
     99a:	ff e0       	ldi	r31, 0x0F	; 15
     99c:	cf 22       	and	r12, r31
     99e:	dd 24       	eor	r13, r13
     9a0:	c6 01       	movw	r24, r12
     9a2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <log_is_data_valid>
     9a6:	89 2b       	or	r24, r25
     9a8:	61 f4       	brne	.+24     	; 0x9c2 <__stack+0xc3>
     9aa:	b0 92 de 01 	sts	0x01DE, r11	; 0x8001de <tail>
     9ae:	8e 01       	movw	r16, r28
     9b0:	01 50       	subi	r16, 0x01	; 1
     9b2:	11 09       	sbc	r17, r1
     9b4:	60 97       	sbiw	r28, 0x10	; 16
     9b6:	80 e1       	ldi	r24, 0x10	; 16
     9b8:	a8 2e       	mov	r10, r24
     9ba:	b1 2c       	mov	r11, r1
     9bc:	97 e0       	ldi	r25, 0x07	; 7
     9be:	69 2e       	mov	r6, r25
     9c0:	3a c0       	rjmp	.+116    	; 0xa36 <__stack+0x137>
     9c2:	9c 9c       	mul	r9, r12
     9c4:	f0 01       	movw	r30, r0
     9c6:	9d 9c       	mul	r9, r13
     9c8:	f0 0d       	add	r31, r0
     9ca:	11 24       	eor	r1, r1
     9cc:	ef 51       	subi	r30, 0x1F	; 31
     9ce:	fe 4f       	sbci	r31, 0xFE	; 254
     9d0:	40 81       	ld	r20, Z
     9d2:	24 2f       	mov	r18, r20
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	88 2d       	mov	r24, r8
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	8f 71       	andi	r24, 0x1F	; 31
     9de:	99 27       	eor	r25, r25
     9e0:	28 17       	cp	r18, r24
     9e2:	39 07       	cpc	r19, r25
     9e4:	11 f7       	brne	.-60     	; 0x9aa <__stack+0xab>
     9e6:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <last_written>
     9ea:	40 93 df 01 	sts	0x01DF, r20	; 0x8001df <last_transaction_written>
     9ee:	aa 94       	dec	r10
     9f0:	0f 5f       	subi	r16, 0xFF	; 255
     9f2:	1f 4f       	sbci	r17, 0xFF	; 255
     9f4:	aa 20       	and	r10, r10
     9f6:	c9 f2       	breq	.-78     	; 0x9aa <__stack+0xab>
     9f8:	84 2e       	mov	r8, r20
     9fa:	ce cf       	rjmp	.-100    	; 0x998 <__stack+0x99>
     9fc:	f7 01       	movw	r30, r14
     9fe:	20 81       	ld	r18, Z
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	87 2d       	mov	r24, r7
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	4f 96       	adiw	r24, 0x1f	; 31
     a08:	8f 71       	andi	r24, 0x1F	; 31
     a0a:	99 27       	eor	r25, r25
     a0c:	28 17       	cp	r18, r24
     a0e:	39 07       	cpc	r19, r25
     a10:	31 f5       	brne	.+76     	; 0xa5e <__stack+0x15f>
     a12:	c0 92 de 01 	sts	0x01DE, r12	; 0x8001de <tail>
     a16:	68 9c       	mul	r6, r8
     a18:	f0 01       	movw	r30, r0
     a1a:	69 9c       	mul	r6, r9
     a1c:	f0 0d       	add	r31, r0
     a1e:	11 24       	eor	r1, r1
     a20:	ef 51       	subi	r30, 0x1F	; 31
     a22:	fe 4f       	sbci	r31, 0xFE	; 254
     a24:	70 80       	ld	r7, Z
     a26:	01 50       	subi	r16, 0x01	; 1
     a28:	11 09       	sbc	r17, r1
     a2a:	f7 e0       	ldi	r31, 0x07	; 7
     a2c:	ef 0e       	add	r14, r31
     a2e:	f1 1c       	adc	r15, r1
     a30:	0c 17       	cp	r16, r28
     a32:	1d 07       	cpc	r17, r29
     a34:	a1 f0       	breq	.+40     	; 0xa5e <__stack+0x15f>
     a36:	c8 01       	movw	r24, r16
     a38:	b5 01       	movw	r22, r10
     a3a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__divmodhi4>
     a3e:	6c 01       	movw	r12, r24
     a40:	4c 01       	movw	r8, r24
     a42:	99 24       	eor	r9, r9
     a44:	c4 01       	movw	r24, r8
     a46:	0e 94 53 04 	call	0x8a6	; 0x8a6 <log_is_data_valid>
     a4a:	89 2b       	or	r24, r25
     a4c:	b9 f6       	brne	.-82     	; 0x9fc <__stack+0xfd>
     a4e:	07 c0       	rjmp	.+14     	; 0xa5e <__stack+0x15f>
     a50:	8f e0       	ldi	r24, 0x0F	; 15
     a52:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <last_written>
     a56:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <last_transaction_written>
     a5a:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <tail>
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	cf 90       	pop	r12
     a6e:	bf 90       	pop	r11
     a70:	af 90       	pop	r10
     a72:	9f 90       	pop	r9
     a74:	8f 90       	pop	r8
     a76:	7f 90       	pop	r7
     a78:	6f 90       	pop	r6
     a7a:	08 95       	ret

00000a7c <log_update>:
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_isbusy>
     a8a:	89 2b       	or	r24, r25
     a8c:	39 f5       	brne	.+78     	; 0xadc <log_update+0x60>
     a8e:	e1 e5       	ldi	r30, 0x51	; 81
     a90:	f2 e0       	ldi	r31, 0x02	; 2
     a92:	c0 e0       	ldi	r28, 0x00	; 0
     a94:	d0 e0       	ldi	r29, 0x00	; 0
     a96:	81 91       	ld	r24, Z+
     a98:	88 23       	and	r24, r24
     a9a:	e1 f0       	breq	.+56     	; 0xad4 <log_update+0x58>
     a9c:	17 e0       	ldi	r17, 0x07	; 7
     a9e:	1c 9f       	mul	r17, r28
     aa0:	c0 01       	movw	r24, r0
     aa2:	1d 9f       	mul	r17, r29
     aa4:	90 0d       	add	r25, r0
     aa6:	11 24       	eor	r1, r1
     aa8:	9c 01       	movw	r18, r24
     aaa:	2f 51       	subi	r18, 0x1F	; 31
     aac:	3e 4f       	sbci	r19, 0xFE	; 254
     aae:	79 01       	movw	r14, r18
     ab0:	67 e0       	ldi	r22, 0x07	; 7
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	c9 01       	movw	r24, r18
     ab6:	0e 94 a9 02 	call	0x552	; 0x552 <update_checksum>
     aba:	c1 9f       	mul	r28, r17
     abc:	c0 01       	movw	r24, r0
     abe:	11 24       	eor	r1, r1
     ac0:	47 e0       	ldi	r20, 0x07	; 7
     ac2:	b7 01       	movw	r22, r14
     ac4:	80 58       	subi	r24, 0x80	; 128
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <eeprom_writebuf>
     acc:	cf 5a       	subi	r28, 0xAF	; 175
     ace:	dd 4f       	sbci	r29, 0xFD	; 253
     ad0:	18 82       	st	Y, r1
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <log_update+0x60>
     ad4:	21 96       	adiw	r28, 0x01	; 1
     ad6:	c0 31       	cpi	r28, 0x10	; 16
     ad8:	d1 05       	cpc	r29, r1
     ada:	e9 f6       	brne	.-70     	; 0xa96 <log_update+0x1a>
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	08 95       	ret

00000ae8 <log_add_record>:
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	e8 2e       	mov	r14, r24
     af6:	c0 91 e0 01 	lds	r28, 0x01E0	; 0x8001e0 <last_written>
     afa:	d0 e0       	ldi	r29, 0x00	; 0
     afc:	21 96       	adiw	r28, 0x01	; 1
     afe:	cf 70       	andi	r28, 0x0F	; 15
     b00:	dd 27       	eor	r29, r29
     b02:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <tail>
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 53 04 	call	0x8a6	; 0x8a6 <log_is_data_valid>
     b0c:	f8 2e       	mov	r15, r24
     b0e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <last_transaction_written>
     b12:	8f 5f       	subi	r24, 0xFF	; 255
     b14:	81 32       	cpi	r24, 0x21	; 33
     b16:	18 f4       	brcc	.+6      	; 0xb1e <log_add_record+0x36>
     b18:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <last_transaction_written>
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <log_add_record+0x3a>
     b1e:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <last_transaction_written>
     b22:	87 e0       	ldi	r24, 0x07	; 7
     b24:	8c 9f       	mul	r24, r28
     b26:	80 01       	movw	r16, r0
     b28:	8d 9f       	mul	r24, r29
     b2a:	10 0d       	add	r17, r0
     b2c:	11 24       	eor	r1, r1
     b2e:	0f 51       	subi	r16, 0x1F	; 31
     b30:	1e 4f       	sbci	r17, 0xFE	; 254
     b32:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <last_transaction_written>
     b36:	f8 01       	movw	r30, r16
     b38:	80 83       	st	Z, r24
     b3a:	0e 94 41 06 	call	0xc82	; 0xc82 <rtc_get_date>
     b3e:	f8 01       	movw	r30, r16
     b40:	61 83       	std	Z+1, r22	; 0x01
     b42:	72 83       	std	Z+2, r23	; 0x02
     b44:	83 83       	std	Z+3, r24	; 0x03
     b46:	94 83       	std	Z+4, r25	; 0x04
     b48:	e5 82       	std	Z+5, r14	; 0x05
     b4a:	c0 93 e0 01 	sts	0x01E0, r28	; 0x8001e0 <last_written>
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	c8 01       	movw	r24, r16
     b54:	0e 94 a9 02 	call	0x552	; 0x552 <update_checksum>
     b58:	cf 5a       	subi	r28, 0xAF	; 175
     b5a:	dd 4f       	sbci	r29, 0xFD	; 253
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	88 83       	st	Y, r24
     b60:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <last_written>
     b64:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <tail>
     b68:	89 13       	cpse	r24, r25
     b6a:	08 c0       	rjmp	.+16     	; 0xb7c <log_add_record+0x94>
     b6c:	ff 20       	and	r15, r15
     b6e:	31 f0       	breq	.+12     	; 0xb7c <log_add_record+0x94>
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	8f 70       	andi	r24, 0x0F	; 15
     b76:	99 27       	eor	r25, r25
     b78:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <tail>
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	08 95       	ret

00000b8a <log_clear>:
     b8a:	e1 ee       	ldi	r30, 0xE1	; 225
     b8c:	f1 e0       	ldi	r31, 0x01	; 1
     b8e:	a1 e5       	ldi	r26, 0x51	; 81
     b90:	b2 e0       	ldi	r27, 0x02	; 2
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	4f ef       	ldi	r20, 0xFF	; 255
     b96:	5f ef       	ldi	r21, 0xFF	; 255
     b98:	ba 01       	movw	r22, r20
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	80 83       	st	Z, r24
     b9e:	85 83       	std	Z+5, r24	; 0x05
     ba0:	41 83       	std	Z+1, r20	; 0x01
     ba2:	52 83       	std	Z+2, r21	; 0x02
     ba4:	63 83       	std	Z+3, r22	; 0x03
     ba6:	74 83       	std	Z+4, r23	; 0x04
     ba8:	9d 93       	st	X+, r25
     baa:	37 96       	adiw	r30, 0x07	; 7
     bac:	22 e0       	ldi	r18, 0x02	; 2
     bae:	e1 35       	cpi	r30, 0x51	; 81
     bb0:	f2 07       	cpc	r31, r18
     bb2:	a1 f7       	brne	.-24     	; 0xb9c <log_clear+0x12>
     bb4:	8f e0       	ldi	r24, 0x0F	; 15
     bb6:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <last_written>
     bba:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <tail>
     bbe:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <last_transaction_written>
     bc2:	08 95       	ret

00000bc4 <log_get_num_entries>:
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	00 91 de 01 	lds	r16, 0x01DE	; 0x8001de <tail>
     bd0:	c0 2f       	mov	r28, r16
     bd2:	10 e0       	ldi	r17, 0x00	; 0
     bd4:	d0 e0       	ldi	r29, 0x00	; 0
     bd6:	ce 01       	movw	r24, r28
     bd8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <log_is_data_valid>
     bdc:	89 2b       	or	r24, r25
     bde:	29 f0       	breq	.+10     	; 0xbea <log_get_num_entries+0x26>
     be0:	21 96       	adiw	r28, 0x01	; 1
     be2:	cf 70       	andi	r28, 0x0F	; 15
     be4:	1f 5f       	subi	r17, 0xFF	; 255
     be6:	0c 13       	cpse	r16, r28
     be8:	f5 cf       	rjmp	.-22     	; 0xbd4 <log_get_num_entries+0x10>
     bea:	81 2f       	mov	r24, r17
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <log_get_record>:
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	6b 01       	movw	r12, r22
     c0c:	7c 01       	movw	r14, r24
     c0e:	8a 01       	movw	r16, r20
     c10:	59 01       	movw	r10, r18
     c12:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <log_get_num_entries>
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	c8 16       	cp	r12, r24
     c1e:	d9 06       	cpc	r13, r25
     c20:	ea 06       	cpc	r14, r26
     c22:	fb 06       	cpc	r15, r27
     c24:	f8 f4       	brcc	.+62     	; 0xc64 <log_get_record+0x6e>
     c26:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <tail>
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	c8 0e       	add	r12, r24
     c2e:	d9 1e       	adc	r13, r25
     c30:	8f e0       	ldi	r24, 0x0F	; 15
     c32:	c8 22       	and	r12, r24
     c34:	dd 24       	eor	r13, r13
     c36:	87 e0       	ldi	r24, 0x07	; 7
     c38:	8c 9d       	mul	r24, r12
     c3a:	f0 01       	movw	r30, r0
     c3c:	8d 9d       	mul	r24, r13
     c3e:	f0 0d       	add	r31, r0
     c40:	11 24       	eor	r1, r1
     c42:	ef 51       	subi	r30, 0x1F	; 31
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	92 81       	ldd	r25, Z+2	; 0x02
     c4a:	a3 81       	ldd	r26, Z+3	; 0x03
     c4c:	b4 81       	ldd	r27, Z+4	; 0x04
     c4e:	e8 01       	movw	r28, r16
     c50:	88 83       	st	Y, r24
     c52:	99 83       	std	Y+1, r25	; 0x01
     c54:	aa 83       	std	Y+2, r26	; 0x02
     c56:	bb 83       	std	Y+3, r27	; 0x03
     c58:	85 81       	ldd	r24, Z+5	; 0x05
     c5a:	f5 01       	movw	r30, r10
     c5c:	80 83       	st	Z, r24
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <log_get_record+0x72>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	08 95       	ret

00000c7e <rtc_init>:
     c7e:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <timer1_init>

00000c82 <rtc_get_date>:
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <timer1_get>
     c8a:	00 91 c1 04 	lds	r16, 0x04C1	; 0x8004c1 <rtc_base>
     c8e:	10 91 c2 04 	lds	r17, 0x04C2	; 0x8004c2 <rtc_base+0x1>
     c92:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <rtc_base+0x2>
     c96:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <rtc_base+0x3>
     c9a:	60 0f       	add	r22, r16
     c9c:	71 1f       	adc	r23, r17
     c9e:	82 1f       	adc	r24, r18
     ca0:	93 1f       	adc	r25, r19
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <is_leapyear>:
     ca8:	9c 01       	movw	r18, r24
     caa:	60 e9       	ldi	r22, 0x90	; 144
     cac:	71 e0       	ldi	r23, 0x01	; 1
     cae:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     cb2:	89 2b       	or	r24, r25
     cb4:	79 f0       	breq	.+30     	; 0xcd4 <is_leapyear+0x2c>
     cb6:	c9 01       	movw	r24, r18
     cb8:	83 70       	andi	r24, 0x03	; 3
     cba:	99 27       	eor	r25, r25
     cbc:	89 2b       	or	r24, r25
     cbe:	61 f4       	brne	.+24     	; 0xcd8 <is_leapyear+0x30>
     cc0:	c9 01       	movw	r24, r18
     cc2:	64 e6       	ldi	r22, 0x64	; 100
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     cca:	9c 01       	movw	r18, r24
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	23 2b       	or	r18, r19
     cd0:	21 f4       	brne	.+8      	; 0xcda <is_leapyear+0x32>
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <is_leapyear+0x30>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	08 95       	ret
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	08 95       	ret

00000cdc <rtc_set_by_datestr>:
     cdc:	2f 92       	push	r2
     cde:	3f 92       	push	r3
     ce0:	4f 92       	push	r4
     ce2:	5f 92       	push	r5
     ce4:	6f 92       	push	r6
     ce6:	7f 92       	push	r7
     ce8:	8f 92       	push	r8
     cea:	9f 92       	push	r9
     cec:	af 92       	push	r10
     cee:	bf 92       	push	r11
     cf0:	cf 92       	push	r12
     cf2:	df 92       	push	r13
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	67 97       	sbiw	r28, 0x17	; 23
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	2c e0       	ldi	r18, 0x0C	; 12
     d12:	e1 eb       	ldi	r30, 0xB1	; 177
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	ae 01       	movw	r20, r28
     d18:	4f 5f       	subi	r20, 0xFF	; 255
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	1a 01       	movw	r2, r20
     d1e:	da 01       	movw	r26, r20
     d20:	01 90       	ld	r0, Z+
     d22:	0d 92       	st	X+, r0
     d24:	2a 95       	dec	r18
     d26:	e1 f7       	brne	.-8      	; 0xd20 <rtc_set_by_datestr+0x44>
     d28:	dc 01       	movw	r26, r24
     d2a:	2c 91       	ld	r18, X
     d2c:	22 0f       	add	r18, r18
     d2e:	20 56       	subi	r18, 0x60	; 96
     d30:	32 2f       	mov	r19, r18
     d32:	33 0f       	add	r19, r19
     d34:	33 0f       	add	r19, r19
     d36:	23 0f       	add	r18, r19
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	3c 91       	ld	r19, X
     d3c:	11 97       	sbiw	r26, 0x01	; 1
     d3e:	31 53       	subi	r19, 0x31	; 49
     d40:	23 0f       	add	r18, r19
     d42:	2d 87       	std	Y+13, r18	; 0x0d
     d44:	13 96       	adiw	r26, 0x03	; 3
     d46:	2c 91       	ld	r18, X
     d48:	13 97       	sbiw	r26, 0x03	; 3
     d4a:	02 2e       	mov	r0, r18
     d4c:	00 0c       	add	r0, r0
     d4e:	33 0b       	sbc	r19, r19
     d50:	20 53       	subi	r18, 0x30	; 48
     d52:	31 09       	sbc	r19, r1
     d54:	6a e0       	ldi	r22, 0x0A	; 10
     d56:	62 9f       	mul	r22, r18
     d58:	a0 01       	movw	r20, r0
     d5a:	63 9f       	mul	r22, r19
     d5c:	50 0d       	add	r21, r0
     d5e:	11 24       	eor	r1, r1
     d60:	14 96       	adiw	r26, 0x04	; 4
     d62:	cc 90       	ld	r12, X
     d64:	0c 2c       	mov	r0, r12
     d66:	00 0c       	add	r0, r0
     d68:	dd 08       	sbc	r13, r13
     d6a:	b0 e3       	ldi	r27, 0x30	; 48
     d6c:	cb 1a       	sub	r12, r27
     d6e:	d1 08       	sbc	r13, r1
     d70:	c4 0e       	add	r12, r20
     d72:	d5 1e       	adc	r13, r21
     d74:	86 01       	movw	r16, r12
     d76:	01 50       	subi	r16, 0x01	; 1
     d78:	11 09       	sbc	r17, r1
     d7a:	fc 01       	movw	r30, r24
     d7c:	26 81       	ldd	r18, Z+6	; 0x06
     d7e:	02 2e       	mov	r0, r18
     d80:	00 0c       	add	r0, r0
     d82:	33 0b       	sbc	r19, r19
     d84:	20 53       	subi	r18, 0x30	; 48
     d86:	31 09       	sbc	r19, r1
     d88:	e8 ee       	ldi	r30, 0xE8	; 232
     d8a:	f3 e0       	ldi	r31, 0x03	; 3
     d8c:	2e 9f       	mul	r18, r30
     d8e:	a0 01       	movw	r20, r0
     d90:	2f 9f       	mul	r18, r31
     d92:	50 0d       	add	r21, r0
     d94:	3e 9f       	mul	r19, r30
     d96:	50 0d       	add	r21, r0
     d98:	11 24       	eor	r1, r1
     d9a:	dc 01       	movw	r26, r24
     d9c:	17 96       	adiw	r26, 0x07	; 7
     d9e:	2c 91       	ld	r18, X
     da0:	17 97       	sbiw	r26, 0x07	; 7
     da2:	02 2e       	mov	r0, r18
     da4:	00 0c       	add	r0, r0
     da6:	33 0b       	sbc	r19, r19
     da8:	20 53       	subi	r18, 0x30	; 48
     daa:	31 09       	sbc	r19, r1
     dac:	74 e6       	ldi	r23, 0x64	; 100
     dae:	72 9f       	mul	r23, r18
     db0:	70 01       	movw	r14, r0
     db2:	73 9f       	mul	r23, r19
     db4:	f0 0c       	add	r15, r0
     db6:	11 24       	eor	r1, r1
     db8:	e4 0e       	add	r14, r20
     dba:	f5 1e       	adc	r15, r21
     dbc:	18 96       	adiw	r26, 0x08	; 8
     dbe:	4c 91       	ld	r20, X
     dc0:	18 97       	sbiw	r26, 0x08	; 8
     dc2:	04 2e       	mov	r0, r20
     dc4:	00 0c       	add	r0, r0
     dc6:	55 0b       	sbc	r21, r21
     dc8:	40 53       	subi	r20, 0x30	; 48
     dca:	51 09       	sbc	r21, r1
     dcc:	64 9f       	mul	r22, r20
     dce:	90 01       	movw	r18, r0
     dd0:	65 9f       	mul	r22, r21
     dd2:	30 0d       	add	r19, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	e2 0e       	add	r14, r18
     dd8:	f3 1e       	adc	r15, r19
     dda:	19 96       	adiw	r26, 0x09	; 9
     ddc:	2c 91       	ld	r18, X
     dde:	19 97       	sbiw	r26, 0x09	; 9
     de0:	f7 01       	movw	r30, r14
     de2:	e2 0f       	add	r30, r18
     de4:	f1 1d       	adc	r31, r1
     de6:	27 fd       	sbrc	r18, 7
     de8:	fa 95       	dec	r31
     dea:	af 01       	movw	r20, r30
     dec:	58 50       	subi	r21, 0x08	; 8
     dee:	7a 01       	movw	r14, r20
     df0:	1b 96       	adiw	r26, 0x0b	; 11
     df2:	2c 91       	ld	r18, X
     df4:	1b 97       	sbiw	r26, 0x0b	; 11
     df6:	22 0f       	add	r18, r18
     df8:	20 56       	subi	r18, 0x60	; 96
     dfa:	32 2f       	mov	r19, r18
     dfc:	33 0f       	add	r19, r19
     dfe:	33 0f       	add	r19, r19
     e00:	23 0f       	add	r18, r19
     e02:	1c 96       	adiw	r26, 0x0c	; 12
     e04:	3c 91       	ld	r19, X
     e06:	1c 97       	sbiw	r26, 0x0c	; 12
     e08:	30 53       	subi	r19, 0x30	; 48
     e0a:	23 0f       	add	r18, r19
     e0c:	29 8b       	std	Y+17, r18	; 0x11
     e0e:	1e 96       	adiw	r26, 0x0e	; 14
     e10:	2c 91       	ld	r18, X
     e12:	1e 97       	sbiw	r26, 0x0e	; 14
     e14:	22 0f       	add	r18, r18
     e16:	20 56       	subi	r18, 0x60	; 96
     e18:	32 2f       	mov	r19, r18
     e1a:	33 0f       	add	r19, r19
     e1c:	33 0f       	add	r19, r19
     e1e:	23 0f       	add	r18, r19
     e20:	1f 96       	adiw	r26, 0x0f	; 15
     e22:	3c 91       	ld	r19, X
     e24:	1f 97       	sbiw	r26, 0x0f	; 15
     e26:	30 53       	subi	r19, 0x30	; 48
     e28:	23 0f       	add	r18, r19
     e2a:	2a 8b       	std	Y+18, r18	; 0x12
     e2c:	51 96       	adiw	r26, 0x11	; 17
     e2e:	2c 91       	ld	r18, X
     e30:	51 97       	sbiw	r26, 0x11	; 17
     e32:	22 0f       	add	r18, r18
     e34:	20 56       	subi	r18, 0x60	; 96
     e36:	32 2f       	mov	r19, r18
     e38:	33 0f       	add	r19, r19
     e3a:	33 0f       	add	r19, r19
     e3c:	23 0f       	add	r18, r19
     e3e:	52 96       	adiw	r26, 0x12	; 18
     e40:	8c 91       	ld	r24, X
     e42:	80 53       	subi	r24, 0x30	; 48
     e44:	28 0f       	add	r18, r24
     e46:	2b 8b       	std	Y+19, r18	; 0x13
     e48:	ca 01       	movw	r24, r20
     e4a:	0e 94 54 06 	call	0xca8	; 0xca8 <is_leapyear>
     e4e:	88 23       	and	r24, r24
     e50:	21 f0       	breq	.+8      	; 0xe5a <rtc_set_by_datestr+0x17e>
     e52:	5d 85       	ldd	r21, Y+13	; 0x0d
     e54:	52 30       	cpi	r21, 0x02	; 2
     e56:	08 f0       	brcs	.+2      	; 0xe5a <rtc_set_by_datestr+0x17e>
     e58:	86 01       	movw	r16, r12
     e5a:	c7 01       	movw	r24, r14
     e5c:	60 e9       	ldi	r22, 0x90	; 144
     e5e:	71 e0       	ldi	r23, 0x01	; 1
     e60:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     e64:	fc 01       	movw	r30, r24
     e66:	db 01       	movw	r26, r22
     e68:	20 e8       	ldi	r18, 0x80	; 128
     e6a:	39 e5       	ldi	r19, 0x59	; 89
     e6c:	40 e6       	ldi	r20, 0x60	; 96
     e6e:	50 ef       	ldi	r21, 0xF0	; 240
     e70:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__muluhisi3>
     e74:	2b 01       	movw	r4, r22
     e76:	3c 01       	movw	r6, r24
     e78:	cf 01       	movw	r24, r30
     e7a:	64 e6       	ldi	r22, 0x64	; 100
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     e82:	fc 01       	movw	r30, r24
     e84:	db 01       	movw	r26, r22
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	32 ec       	ldi	r19, 0xC2	; 194
     e8a:	47 e1       	ldi	r20, 0x17	; 23
     e8c:	5c eb       	ldi	r21, 0xBC	; 188
     e8e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__muluhisi3>
     e92:	4b 01       	movw	r8, r22
     e94:	5c 01       	movw	r10, r24
     e96:	df 01       	movw	r26, r30
     e98:	b6 95       	lsr	r27
     e9a:	a7 95       	ror	r26
     e9c:	b6 95       	lsr	r27
     e9e:	a7 95       	ror	r26
     ea0:	20 e8       	ldi	r18, 0x80	; 128
     ea2:	3f e1       	ldi	r19, 0x1F	; 31
     ea4:	46 e8       	ldi	r20, 0x86	; 134
     ea6:	57 e0       	ldi	r21, 0x07	; 7
     ea8:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__muluhisi3>
     eac:	6b 01       	movw	r12, r22
     eae:	7c 01       	movw	r14, r24
     eb0:	df 01       	movw	r26, r30
     eb2:	a3 70       	andi	r26, 0x03	; 3
     eb4:	bb 27       	eor	r27, r27
     eb6:	20 e8       	ldi	r18, 0x80	; 128
     eb8:	33 e3       	ldi	r19, 0x33	; 51
     eba:	41 ee       	ldi	r20, 0xE1	; 225
     ebc:	51 e0       	ldi	r21, 0x01	; 1
     ebe:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__muluhisi3>
     ec2:	6c 8b       	std	Y+20, r22	; 0x14
     ec4:	7d 8b       	std	Y+21, r23	; 0x15
     ec6:	8e 8b       	std	Y+22, r24	; 0x16
     ec8:	9f 8b       	std	Y+23, r25	; 0x17
     eca:	f1 01       	movw	r30, r2
     ecc:	8e 2f       	mov	r24, r30
     ece:	82 19       	sub	r24, r2
     ed0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ed2:	89 17       	cp	r24, r25
     ed4:	20 f4       	brcc	.+8      	; 0xede <rtc_set_by_datestr+0x202>
     ed6:	81 91       	ld	r24, Z+
     ed8:	08 0f       	add	r16, r24
     eda:	11 1d       	adc	r17, r1
     edc:	f7 cf       	rjmp	.-18     	; 0xecc <rtc_set_by_datestr+0x1f0>
     ede:	a9 89       	ldd	r26, Y+17	; 0x11
     ee0:	2a 2f       	mov	r18, r26
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	a0 e1       	ldi	r26, 0x10	; 16
     ee6:	be e0       	ldi	r27, 0x0E	; 14
     ee8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__umulhisi3>
     eec:	6d 87       	std	Y+13, r22	; 0x0d
     eee:	7e 87       	std	Y+14, r23	; 0x0e
     ef0:	8f 87       	std	Y+15, r24	; 0x0f
     ef2:	98 8b       	std	Y+16, r25	; 0x10
     ef4:	ba 89       	ldd	r27, Y+18	; 0x12
     ef6:	2b 2f       	mov	r18, r27
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	ac e3       	ldi	r26, 0x3C	; 60
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__umulhisi3>
     f02:	2d 85       	ldd	r18, Y+13	; 0x0d
     f04:	3e 85       	ldd	r19, Y+14	; 0x0e
     f06:	4f 85       	ldd	r20, Y+15	; 0x0f
     f08:	58 89       	ldd	r21, Y+16	; 0x10
     f0a:	26 0f       	add	r18, r22
     f0c:	37 1f       	adc	r19, r23
     f0e:	48 1f       	adc	r20, r24
     f10:	59 1f       	adc	r21, r25
     f12:	da 01       	movw	r26, r20
     f14:	c9 01       	movw	r24, r18
     f16:	3b 89       	ldd	r19, Y+19	; 0x13
     f18:	83 0f       	add	r24, r19
     f1a:	91 1d       	adc	r25, r1
     f1c:	a1 1d       	adc	r26, r1
     f1e:	b1 1d       	adc	r27, r1
     f20:	48 0e       	add	r4, r24
     f22:	59 1e       	adc	r5, r25
     f24:	6a 1e       	adc	r6, r26
     f26:	7b 1e       	adc	r7, r27
     f28:	84 0c       	add	r8, r4
     f2a:	95 1c       	adc	r9, r5
     f2c:	a6 1c       	adc	r10, r6
     f2e:	b7 1c       	adc	r11, r7
     f30:	c8 0c       	add	r12, r8
     f32:	d9 1c       	adc	r13, r9
     f34:	ea 1c       	adc	r14, r10
     f36:	fb 1c       	adc	r15, r11
     f38:	8c 89       	ldd	r24, Y+20	; 0x14
     f3a:	9d 89       	ldd	r25, Y+21	; 0x15
     f3c:	ae 89       	ldd	r26, Y+22	; 0x16
     f3e:	bf 89       	ldd	r27, Y+23	; 0x17
     f40:	c8 0e       	add	r12, r24
     f42:	d9 1e       	adc	r13, r25
     f44:	ea 1e       	adc	r14, r26
     f46:	fb 1e       	adc	r15, r27
     f48:	d8 01       	movw	r26, r16
     f4a:	20 e8       	ldi	r18, 0x80	; 128
     f4c:	31 e5       	ldi	r19, 0x51	; 81
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__muluhisi3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	8c 0d       	add	r24, r12
     f5c:	9d 1d       	adc	r25, r13
     f5e:	ae 1d       	adc	r26, r14
     f60:	bf 1d       	adc	r27, r15
     f62:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <rtc_base>
     f66:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <rtc_base+0x1>
     f6a:	a0 93 c3 04 	sts	0x04C3, r26	; 0x8004c3 <rtc_base+0x2>
     f6e:	b0 93 c4 04 	sts	0x04C4, r27	; 0x8004c4 <rtc_base+0x3>
     f72:	67 96       	adiw	r28, 0x17	; 23
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	bf 90       	pop	r11
     f90:	af 90       	pop	r10
     f92:	9f 90       	pop	r9
     f94:	8f 90       	pop	r8
     f96:	7f 90       	pop	r7
     f98:	6f 90       	pop	r6
     f9a:	5f 90       	pop	r5
     f9c:	4f 90       	pop	r4
     f9e:	3f 90       	pop	r3
     fa0:	2f 90       	pop	r2
     fa2:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <timer1_clear>

00000fa6 <get_month>:
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	68 97       	sbiw	r28, 0x18	; 24
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	7b 01       	movw	r14, r22
     fc4:	2c e0       	ldi	r18, 0x0C	; 12
     fc6:	e1 eb       	ldi	r30, 0xB1	; 177
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
     fca:	de 01       	movw	r26, r28
     fcc:	1d 96       	adiw	r26, 0x0d	; 13
     fce:	01 90       	ld	r0, Z+
     fd0:	0d 92       	st	X+, r0
     fd2:	2a 95       	dec	r18
     fd4:	e1 f7       	brne	.-8      	; 0xfce <get_month+0x28>
     fd6:	8e 01       	movw	r16, r28
     fd8:	0f 5f       	subi	r16, 0xFF	; 255
     fda:	1f 4f       	sbci	r17, 0xFF	; 255
     fdc:	2c e0       	ldi	r18, 0x0C	; 12
     fde:	f8 01       	movw	r30, r16
     fe0:	11 92       	st	Z+, r1
     fe2:	2a 95       	dec	r18
     fe4:	e9 f7       	brne	.-6      	; 0xfe0 <get_month+0x3a>
     fe6:	0e 94 54 06 	call	0xca8	; 0xca8 <is_leapyear>
     fea:	8a 83       	std	Y+2, r24	; 0x02
     fec:	de 01       	movw	r26, r28
     fee:	1d 96       	adiw	r26, 0x0d	; 13
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	f7 01       	movw	r30, r14
     ff4:	40 81       	ld	r20, Z
     ff6:	51 81       	ldd	r21, Z+1	; 0x01
     ff8:	9d 91       	ld	r25, X+
     ffa:	f8 01       	movw	r30, r16
     ffc:	21 91       	ld	r18, Z+
     ffe:	8f 01       	movw	r16, r30
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	29 0f       	add	r18, r25
    1004:	31 1d       	adc	r19, r1
    1006:	42 17       	cp	r20, r18
    1008:	53 07       	cpc	r21, r19
    100a:	40 f0       	brcs	.+16     	; 0x101c <get_month+0x76>
    100c:	42 1b       	sub	r20, r18
    100e:	53 0b       	sbc	r21, r19
    1010:	f7 01       	movw	r30, r14
    1012:	51 83       	std	Z+1, r21	; 0x01
    1014:	40 83       	st	Z, r20
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	8c 30       	cpi	r24, 0x0C	; 12
    101a:	59 f7       	brne	.-42     	; 0xff2 <get_month+0x4c>
    101c:	68 96       	adiw	r28, 0x18	; 24
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	08 95       	ret

00001036 <rtc_num2datestr>:
    1036:	4f 92       	push	r4
    1038:	5f 92       	push	r5
    103a:	6f 92       	push	r6
    103c:	7f 92       	push	r7
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	00 d0       	rcall	.+0      	; 0x1054 <rtc_num2datestr+0x1e>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	2b 01       	movw	r4, r22
    105a:	3c 01       	movw	r6, r24
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 e0       	ldi	r26, 0x00	; 0
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	20 e8       	ldi	r18, 0x80	; 128
    1066:	42 16       	cp	r4, r18
    1068:	29 e5       	ldi	r18, 0x59	; 89
    106a:	52 06       	cpc	r5, r18
    106c:	20 e6       	ldi	r18, 0x60	; 96
    106e:	62 06       	cpc	r6, r18
    1070:	20 ef       	ldi	r18, 0xF0	; 240
    1072:	72 06       	cpc	r7, r18
    1074:	18 f4       	brcc	.+6      	; 0x107c <rtc_num2datestr+0x46>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	dc 01       	movw	r26, r24
    107c:	20 e9       	ldi	r18, 0x90	; 144
    107e:	31 e0       	ldi	r19, 0x01	; 1
    1080:	82 9f       	mul	r24, r18
    1082:	50 01       	movw	r10, r0
    1084:	83 9f       	mul	r24, r19
    1086:	b0 0c       	add	r11, r0
    1088:	92 9f       	mul	r25, r18
    108a:	b0 0c       	add	r11, r0
    108c:	11 24       	eor	r1, r1
    108e:	80 e3       	ldi	r24, 0x30	; 48
    1090:	a8 1a       	sub	r10, r24
    1092:	88 ef       	ldi	r24, 0xF8	; 248
    1094:	b8 0a       	sbc	r11, r24
    1096:	c1 2c       	mov	r12, r1
    1098:	d1 2c       	mov	r13, r1
    109a:	76 01       	movw	r14, r12
    109c:	c3 94       	inc	r12
    109e:	20 e8       	ldi	r18, 0x80	; 128
    10a0:	42 16       	cp	r4, r18
    10a2:	29 e5       	ldi	r18, 0x59	; 89
    10a4:	52 06       	cpc	r5, r18
    10a6:	20 e6       	ldi	r18, 0x60	; 96
    10a8:	62 06       	cpc	r6, r18
    10aa:	20 ef       	ldi	r18, 0xF0	; 240
    10ac:	72 06       	cpc	r7, r18
    10ae:	18 f4       	brcc	.+6      	; 0x10b6 <rtc_num2datestr+0x80>
    10b0:	c1 2c       	mov	r12, r1
    10b2:	d1 2c       	mov	r13, r1
    10b4:	76 01       	movw	r14, r12
    10b6:	a7 01       	movw	r20, r14
    10b8:	96 01       	movw	r18, r12
    10ba:	60 e8       	ldi	r22, 0x80	; 128
    10bc:	79 e5       	ldi	r23, 0x59	; 89
    10be:	80 e6       	ldi	r24, 0x60	; 96
    10c0:	90 ef       	ldi	r25, 0xF0	; 240
    10c2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__mulsi3>
    10c6:	73 01       	movw	r14, r6
    10c8:	62 01       	movw	r12, r4
    10ca:	c6 1a       	sub	r12, r22
    10cc:	d7 0a       	sbc	r13, r23
    10ce:	e8 0a       	sbc	r14, r24
    10d0:	f9 0a       	sbc	r15, r25
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	c1 14       	cp	r12, r1
    10dc:	22 ec       	ldi	r18, 0xC2	; 194
    10de:	d2 06       	cpc	r13, r18
    10e0:	27 e1       	ldi	r18, 0x17	; 23
    10e2:	e2 06       	cpc	r14, r18
    10e4:	2c eb       	ldi	r18, 0xBC	; 188
    10e6:	f2 06       	cpc	r15, r18
    10e8:	18 f4       	brcc	.+6      	; 0x10f0 <rtc_num2datestr+0xba>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	dc 01       	movw	r26, r24
    10f0:	44 e6       	ldi	r20, 0x64	; 100
    10f2:	48 9f       	mul	r20, r24
    10f4:	90 01       	movw	r18, r0
    10f6:	49 9f       	mul	r20, r25
    10f8:	30 0d       	add	r19, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	a2 0e       	add	r10, r18
    10fe:	b3 1e       	adc	r11, r19
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	c1 14       	cp	r12, r1
    110a:	82 ec       	ldi	r24, 0xC2	; 194
    110c:	d8 06       	cpc	r13, r24
    110e:	87 e1       	ldi	r24, 0x17	; 23
    1110:	e8 06       	cpc	r14, r24
    1112:	8c eb       	ldi	r24, 0xBC	; 188
    1114:	f8 06       	cpc	r15, r24
    1116:	18 f4       	brcc	.+6      	; 0x111e <rtc_num2datestr+0xe8>
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	a9 01       	movw	r20, r18
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	72 ec       	ldi	r23, 0xC2	; 194
    1122:	87 e1       	ldi	r24, 0x17	; 23
    1124:	9c eb       	ldi	r25, 0xBC	; 188
    1126:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__mulsi3>
    112a:	a7 01       	movw	r20, r14
    112c:	96 01       	movw	r18, r12
    112e:	26 1b       	sub	r18, r22
    1130:	37 0b       	sbc	r19, r23
    1132:	48 0b       	sbc	r20, r24
    1134:	59 0b       	sbc	r21, r25
    1136:	ca 01       	movw	r24, r20
    1138:	b9 01       	movw	r22, r18
    113a:	20 e8       	ldi	r18, 0x80	; 128
    113c:	3f e1       	ldi	r19, 0x1F	; 31
    113e:	46 e8       	ldi	r20, 0x86	; 134
    1140:	57 e0       	ldi	r21, 0x07	; 7
    1142:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__udivmodsi4>
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	a2 0e       	add	r10, r18
    1150:	b3 1e       	adc	r11, r19
    1152:	20 e8       	ldi	r18, 0x80	; 128
    1154:	33 e3       	ldi	r19, 0x33	; 51
    1156:	41 ee       	ldi	r20, 0xE1	; 225
    1158:	51 e0       	ldi	r21, 0x01	; 1
    115a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__udivmodsi4>
    115e:	75 01       	movw	r14, r10
    1160:	e2 0e       	add	r14, r18
    1162:	f3 1e       	adc	r15, r19
    1164:	20 e8       	ldi	r18, 0x80	; 128
    1166:	31 e5       	ldi	r19, 0x51	; 81
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__udivmodsi4>
    1170:	4b 01       	movw	r8, r22
    1172:	5c 01       	movw	r10, r24
    1174:	3a 83       	std	Y+2, r19	; 0x02
    1176:	29 83       	std	Y+1, r18	; 0x01
    1178:	be 01       	movw	r22, r28
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	c7 01       	movw	r24, r14
    1180:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <get_month>
    1184:	d8 2e       	mov	r13, r24
    1186:	c5 01       	movw	r24, r10
    1188:	b4 01       	movw	r22, r8
    118a:	20 e1       	ldi	r18, 0x10	; 16
    118c:	3e e0       	ldi	r19, 0x0E	; 14
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__udivmodsi4>
    1196:	29 01       	movw	r4, r18
    1198:	3a 01       	movw	r6, r20
    119a:	4b 01       	movw	r8, r22
    119c:	5c 01       	movw	r10, r24
    119e:	6d eb       	ldi	r22, 0xBD	; 189
    11a0:	71 e0       	ldi	r23, 0x01	; 1
    11a2:	89 e4       	ldi	r24, 0x49	; 73
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	0e 94 32 09 	call	0x1264	; 0x1264 <str_cpy>
    11aa:	6d 2d       	mov	r22, r13
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	6f 5f       	subi	r22, 0xFF	; 255
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255
    11b2:	42 e0       	ldi	r20, 0x02	; 2
    11b4:	89 e4       	ldi	r24, 0x49	; 73
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	0e 94 3c 09 	call	0x1278	; 0x1278 <str_writeudec16>
    11bc:	69 81       	ldd	r22, Y+1	; 0x01
    11be:	7a 81       	ldd	r23, Y+2	; 0x02
    11c0:	6f 5f       	subi	r22, 0xFF	; 255
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	42 e0       	ldi	r20, 0x02	; 2
    11c6:	8c e4       	ldi	r24, 0x4C	; 76
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	0e 94 3c 09 	call	0x1278	; 0x1278 <str_writeudec16>
    11ce:	44 e0       	ldi	r20, 0x04	; 4
    11d0:	b7 01       	movw	r22, r14
    11d2:	8f e4       	ldi	r24, 0x4F	; 79
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	0e 94 3c 09 	call	0x1278	; 0x1278 <str_writeudec16>
    11da:	42 e0       	ldi	r20, 0x02	; 2
    11dc:	b2 01       	movw	r22, r4
    11de:	84 e5       	ldi	r24, 0x54	; 84
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 3c 09 	call	0x1278	; 0x1278 <str_writeudec16>
    11e6:	c5 01       	movw	r24, r10
    11e8:	b4 01       	movw	r22, r8
    11ea:	2c e3       	ldi	r18, 0x3C	; 60
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__udivmodsi4>
    11f6:	49 01       	movw	r8, r18
    11f8:	5a 01       	movw	r10, r20
    11fa:	6b 01       	movw	r12, r22
    11fc:	7c 01       	movw	r14, r24
    11fe:	42 e0       	ldi	r20, 0x02	; 2
    1200:	b4 01       	movw	r22, r8
    1202:	87 e5       	ldi	r24, 0x57	; 87
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	0e 94 3c 09 	call	0x1278	; 0x1278 <str_writeudec16>
    120a:	42 e0       	ldi	r20, 0x02	; 2
    120c:	b6 01       	movw	r22, r12
    120e:	8a e5       	ldi	r24, 0x5A	; 90
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	0e 94 3c 09 	call	0x1278	; 0x1278 <str_writeudec16>
    1216:	89 e4       	ldi	r24, 0x49	; 73
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	7f 90       	pop	r7
    1234:	6f 90       	pop	r6
    1236:	5f 90       	pop	r5
    1238:	4f 90       	pop	r4
    123a:	08 95       	ret

0000123c <rtc_get_date_string>:
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <timer1_get>
    1244:	00 91 c1 04 	lds	r16, 0x04C1	; 0x8004c1 <rtc_base>
    1248:	10 91 c2 04 	lds	r17, 0x04C2	; 0x8004c2 <rtc_base+0x1>
    124c:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <rtc_base+0x2>
    1250:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <rtc_base+0x3>
    1254:	60 0f       	add	r22, r16
    1256:	71 1f       	adc	r23, r17
    1258:	82 1f       	adc	r24, r18
    125a:	93 1f       	adc	r25, r19
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <rtc_num2datestr>

00001264 <str_cpy>:
    1264:	fc 01       	movw	r30, r24
    1266:	db 01       	movw	r26, r22
    1268:	8d 91       	ld	r24, X+
    126a:	bd 01       	movw	r22, r26
    126c:	88 23       	and	r24, r24
    126e:	11 f0       	breq	.+4      	; 0x1274 <str_cpy+0x10>
    1270:	81 93       	st	Z+, r24
    1272:	f9 cf       	rjmp	.-14     	; 0x1266 <str_cpy+0x2>
    1274:	10 82       	st	Z, r1
    1276:	08 95       	ret

00001278 <str_writeudec16>:
    1278:	9f 92       	push	r9
    127a:	af 92       	push	r10
    127c:	bf 92       	push	r11
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	00 d0       	rcall	.+0      	; 0x1290 <str_writeudec16+0x18>
    1290:	00 d0       	rcall	.+0      	; 0x1292 <str_writeudec16+0x1a>
    1292:	1f 92       	push	r1
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	fc 01       	movw	r30, r24
    129a:	6b 01       	movw	r12, r22
    129c:	9e 01       	movw	r18, r28
    129e:	2f 5f       	subi	r18, 0xFF	; 255
    12a0:	3f 4f       	sbci	r19, 0xFF	; 255
    12a2:	8e 01       	movw	r16, r28
    12a4:	0a 5f       	subi	r16, 0xFA	; 250
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	ee 24       	eor	r14, r14
    12aa:	e3 94       	inc	r14
    12ac:	f1 2c       	mov	r15, r1
    12ae:	9a e0       	ldi	r25, 0x0A	; 10
    12b0:	99 2e       	mov	r9, r25
    12b2:	9e 9c       	mul	r9, r14
    12b4:	50 01       	movw	r10, r0
    12b6:	9f 9c       	mul	r9, r15
    12b8:	b0 0c       	add	r11, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	c6 01       	movw	r24, r12
    12be:	b5 01       	movw	r22, r10
    12c0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
    12c4:	b7 01       	movw	r22, r14
    12c6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
    12ca:	d9 01       	movw	r26, r18
    12cc:	6d 93       	st	X+, r22
    12ce:	9d 01       	movw	r18, r26
    12d0:	c6 1a       	sub	r12, r22
    12d2:	d1 08       	sbc	r13, r1
    12d4:	67 fd       	sbrc	r22, 7
    12d6:	d3 94       	inc	r13
    12d8:	75 01       	movw	r14, r10
    12da:	a0 17       	cp	r26, r16
    12dc:	b1 07       	cpc	r27, r17
    12de:	49 f7       	brne	.-46     	; 0x12b2 <str_writeudec16+0x3a>
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	84 e0       	ldi	r24, 0x04	; 4
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	d8 01       	movw	r26, r16
    12ec:	2e 91       	ld	r18, -X
    12ee:	8d 01       	movw	r16, r26
    12f0:	21 11       	cpse	r18, r1
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <str_writeudec16+0x86>
    12f4:	61 15       	cp	r22, r1
    12f6:	71 05       	cpc	r23, r1
    12f8:	11 f4       	brne	.+4      	; 0x12fe <str_writeudec16+0x86>
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	41 f4       	brne	.+16     	; 0x130e <str_writeudec16+0x96>
    12fe:	84 17       	cp	r24, r20
    1300:	95 07       	cpc	r25, r21
    1302:	2c f4       	brge	.+10     	; 0x130e <str_writeudec16+0x96>
    1304:	20 5d       	subi	r18, 0xD0	; 208
    1306:	21 93       	st	Z+, r18
    1308:	61 e0       	ldi	r22, 0x01	; 1
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <str_writeudec16+0x9e>
    130e:	84 17       	cp	r24, r20
    1310:	95 07       	cpc	r25, r21
    1312:	0c f4       	brge	.+2      	; 0x1316 <str_writeudec16+0x9e>
    1314:	31 96       	adiw	r30, 0x01	; 1
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	40 f7       	brcc	.-48     	; 0x12ea <str_writeudec16+0x72>
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	cf 90       	pop	r12
    1334:	bf 90       	pop	r11
    1336:	af 90       	pop	r10
    1338:	9f 90       	pop	r9
    133a:	08 95       	ret

0000133c <__vector_11>:
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer1_count>
    1352:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer1_count+0x1>
    1356:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer1_count+0x2>
    135a:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer1_count+0x3>
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	a1 1d       	adc	r26, r1
    1362:	b1 1d       	adc	r27, r1
    1364:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <timer1_count>
    1368:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <timer1_count+0x1>
    136c:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <timer1_count+0x2>
    1370:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <timer1_count+0x3>
    1374:	bf 91       	pop	r27
    1376:	af 91       	pop	r26
    1378:	9f 91       	pop	r25
    137a:	8f 91       	pop	r24
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <timer1_init>:
    1386:	83 e2       	ldi	r24, 0x23	; 35
    1388:	94 ef       	ldi	r25, 0xF4	; 244
    138a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    138e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1392:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1396:	8c e0       	ldi	r24, 0x0C	; 12
    1398:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    13a2:	08 95       	ret

000013a4 <timer1_get>:
    13a4:	2f b7       	in	r18, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	60 91 61 02 	lds	r22, 0x0261	; 0x800261 <timer1_count>
    13ac:	70 91 62 02 	lds	r23, 0x0262	; 0x800262 <timer1_count+0x1>
    13b0:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <timer1_count+0x2>
    13b4:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <timer1_count+0x3>
    13b8:	2f bf       	out	0x3f, r18	; 63
    13ba:	08 95       	ret

000013bc <timer1_clear>:
    13bc:	8f b7       	in	r24, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <timer1_count>
    13c4:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <timer1_count+0x1>
    13c8:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <timer1_count+0x2>
    13cc:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <timer1_count+0x3>
    13d0:	8f bf       	out	0x3f, r24	; 63
    13d2:	08 95       	ret

000013d4 <uart_init>:
    13d4:	0e 94 14 0c 	call	0x1828	; 0x1828 <serial_init>
    13d8:	78 94       	sei
    13da:	08 95       	ret

000013dc <uart_writechar>:
    13dc:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <serial_writechar>

000013e0 <uart_writestr>:
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	ec 01       	movw	r28, r24
    13e6:	89 91       	ld	r24, Y+
    13e8:	88 23       	and	r24, r24
    13ea:	19 f0       	breq	.+6      	; 0x13f2 <uart_writestr+0x12>
    13ec:	0e 94 ac 0c 	call	0x1958	; 0x1958 <serial_writechar>
    13f0:	fa cf       	rjmp	.-12     	; 0x13e6 <uart_writestr+0x6>
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <uart_writehex8>:
    13f8:	cf 93       	push	r28
    13fa:	c8 2f       	mov	r28, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	24 e0       	ldi	r18, 0x04	; 4
    1400:	95 95       	asr	r25
    1402:	87 95       	ror	r24
    1404:	2a 95       	dec	r18
    1406:	e1 f7       	brne	.-8      	; 0x1400 <uart_writehex8+0x8>
    1408:	8a 30       	cpi	r24, 0x0A	; 10
    140a:	10 f4       	brcc	.+4      	; 0x1410 <uart_writehex8+0x18>
    140c:	80 5d       	subi	r24, 0xD0	; 208
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <uart_writehex8+0x1a>
    1410:	89 5c       	subi	r24, 0xC9	; 201
    1412:	0e 94 ac 0c 	call	0x1958	; 0x1958 <serial_writechar>
    1416:	8c 2f       	mov	r24, r28
    1418:	8f 70       	andi	r24, 0x0F	; 15
    141a:	8a 30       	cpi	r24, 0x0A	; 10
    141c:	10 f0       	brcs	.+4      	; 0x1422 <uart_writehex8+0x2a>
    141e:	89 5c       	subi	r24, 0xC9	; 201
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <uart_writehex8+0x2c>
    1422:	80 5d       	subi	r24, 0xD0	; 208
    1424:	cf 91       	pop	r28
    1426:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <serial_writechar>

0000142a <uart_writehex16>:
    142a:	cf 93       	push	r28
    142c:	c8 2f       	mov	r28, r24
    142e:	89 2f       	mov	r24, r25
    1430:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_writehex8>
    1434:	8c 2f       	mov	r24, r28
    1436:	cf 91       	pop	r28
    1438:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <uart_writehex8>

0000143c <uart_writedec32>:
    143c:	2f 92       	push	r2
    143e:	3f 92       	push	r3
    1440:	4f 92       	push	r4
    1442:	5f 92       	push	r5
    1444:	6f 92       	push	r6
    1446:	7f 92       	push	r7
    1448:	8f 92       	push	r8
    144a:	9f 92       	push	r9
    144c:	af 92       	push	r10
    144e:	bf 92       	push	r11
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	63 97       	sbiw	r28, 0x13	; 19
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	6b 01       	movw	r12, r22
    1472:	7c 01       	movw	r14, r24
    1474:	97 ff       	sbrs	r25, 7
    1476:	0d c0       	rjmp	.+26     	; 0x1492 <uart_writedec32+0x56>
    1478:	f0 94       	com	r15
    147a:	e0 94       	com	r14
    147c:	d0 94       	com	r13
    147e:	c0 94       	com	r12
    1480:	c1 1c       	adc	r12, r1
    1482:	d1 1c       	adc	r13, r1
    1484:	e1 1c       	adc	r14, r1
    1486:	f1 1c       	adc	r15, r1
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	9b 8b       	std	Y+19, r25	; 0x13
    148e:	8a 8b       	std	Y+18, r24	; 0x12
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <uart_writedec32+0x5a>
    1492:	1b 8a       	std	Y+19, r1	; 0x13
    1494:	1a 8a       	std	Y+18, r1	; 0x12
    1496:	fe 01       	movw	r30, r28
    1498:	31 96       	adiw	r30, 0x01	; 1
    149a:	5f 01       	movw	r10, r30
    149c:	8e 01       	movw	r16, r28
    149e:	05 5f       	subi	r16, 0xF5	; 245
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	f9 8b       	std	Y+17, r31	; 0x11
    14a4:	e8 8b       	std	Y+16, r30	; 0x10
    14a6:	66 24       	eor	r6, r6
    14a8:	63 94       	inc	r6
    14aa:	71 2c       	mov	r7, r1
    14ac:	81 2c       	mov	r8, r1
    14ae:	91 2c       	mov	r9, r1
    14b0:	aa e0       	ldi	r26, 0x0A	; 10
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	93 01       	movw	r18, r6
    14b6:	a4 01       	movw	r20, r8
    14b8:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__muluhisi3>
    14bc:	1b 01       	movw	r2, r22
    14be:	2c 01       	movw	r4, r24
    14c0:	c7 01       	movw	r24, r14
    14c2:	b6 01       	movw	r22, r12
    14c4:	91 01       	movw	r18, r2
    14c6:	a2 01       	movw	r20, r4
    14c8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__divmodsi4>
    14cc:	93 01       	movw	r18, r6
    14ce:	a4 01       	movw	r20, r8
    14d0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__divmodsi4>
    14d4:	e8 89       	ldd	r30, Y+16	; 0x10
    14d6:	f9 89       	ldd	r31, Y+17	; 0x11
    14d8:	21 93       	st	Z+, r18
    14da:	f9 8b       	std	Y+17, r31	; 0x11
    14dc:	e8 8b       	std	Y+16, r30	; 0x10
    14de:	82 2f       	mov	r24, r18
    14e0:	22 0f       	add	r18, r18
    14e2:	99 0b       	sbc	r25, r25
    14e4:	aa 0b       	sbc	r26, r26
    14e6:	bb 0b       	sbc	r27, r27
    14e8:	c8 1a       	sub	r12, r24
    14ea:	d9 0a       	sbc	r13, r25
    14ec:	ea 0a       	sbc	r14, r26
    14ee:	fb 0a       	sbc	r15, r27
    14f0:	31 01       	movw	r6, r2
    14f2:	42 01       	movw	r8, r4
    14f4:	0e 17       	cp	r16, r30
    14f6:	1f 07       	cpc	r17, r31
    14f8:	d9 f6       	brne	.-74     	; 0x14b0 <uart_writedec32+0x74>
    14fa:	8a 89       	ldd	r24, Y+18	; 0x12
    14fc:	9b 89       	ldd	r25, Y+19	; 0x13
    14fe:	89 2b       	or	r24, r25
    1500:	11 f0       	breq	.+4      	; 0x1506 <uart_writedec32+0xca>
    1502:	8d e2       	ldi	r24, 0x2D	; 45
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <uart_writedec32+0xcc>
    1506:	80 e2       	ldi	r24, 0x20	; 32
    1508:	0e 94 ac 0c 	call	0x1958	; 0x1958 <serial_writechar>
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	f8 01       	movw	r30, r16
    1512:	82 91       	ld	r24, -Z
    1514:	8f 01       	movw	r16, r30
    1516:	81 11       	cpse	r24, r1
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <uart_writedec32+0xea>
    151a:	21 15       	cp	r18, r1
    151c:	31 05       	cpc	r19, r1
    151e:	19 f4       	brne	.+6      	; 0x1526 <uart_writedec32+0xea>
    1520:	ea 15       	cp	r30, r10
    1522:	fb 05       	cpc	r31, r11
    1524:	29 f4       	brne	.+10     	; 0x1530 <uart_writedec32+0xf4>
    1526:	80 5d       	subi	r24, 0xD0	; 208
    1528:	0e 94 ac 0c 	call	0x1958	; 0x1958 <serial_writechar>
    152c:	21 e0       	ldi	r18, 0x01	; 1
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	0a 15       	cp	r16, r10
    1532:	1b 05       	cpc	r17, r11
    1534:	69 f7       	brne	.-38     	; 0x1510 <uart_writedec32+0xd4>
    1536:	63 96       	adiw	r28, 0x13	; 19
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	bf 90       	pop	r11
    1554:	af 90       	pop	r10
    1556:	9f 90       	pop	r9
    1558:	8f 90       	pop	r8
    155a:	7f 90       	pop	r7
    155c:	6f 90       	pop	r6
    155e:	5f 90       	pop	r5
    1560:	4f 90       	pop	r4
    1562:	3f 90       	pop	r3
    1564:	2f 90       	pop	r2
    1566:	08 95       	ret

00001568 <dump_eeprom>:
    1568:	2f 92       	push	r2
    156a:	3f 92       	push	r3
    156c:	4f 92       	push	r4
    156e:	5f 92       	push	r5
    1570:	6f 92       	push	r6
    1572:	7f 92       	push	r7
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	64 97       	sbiw	r28, 0x14	; 20
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	8c 01       	movw	r16, r24
    159e:	61 15       	cp	r22, r1
    15a0:	71 05       	cpc	r23, r1
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <dump_eeprom+0x3e>
    15a4:	92 c0       	rjmp	.+292    	; 0x16ca <dump_eeprom+0x162>
    15a6:	81 2c       	mov	r8, r1
    15a8:	91 2c       	mov	r9, r1
    15aa:	54 01       	movw	r10, r8
    15ac:	cb 01       	movw	r24, r22
    15ae:	a0 e0       	ldi	r26, 0x00	; 0
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	89 8b       	std	Y+17, r24	; 0x11
    15b4:	9a 8b       	std	Y+18, r25	; 0x12
    15b6:	ab 8b       	std	Y+19, r26	; 0x13
    15b8:	bc 8b       	std	Y+20, r27	; 0x14
    15ba:	de 01       	movw	r26, r28
    15bc:	11 96       	adiw	r26, 0x01	; 1
    15be:	1d 01       	movw	r2, r26
    15c0:	89 89       	ldd	r24, Y+17	; 0x11
    15c2:	9a 89       	ldd	r25, Y+18	; 0x12
    15c4:	ab 89       	ldd	r26, Y+19	; 0x13
    15c6:	bc 89       	ldd	r27, Y+20	; 0x14
    15c8:	88 16       	cp	r8, r24
    15ca:	99 06       	cpc	r9, r25
    15cc:	aa 06       	cpc	r10, r26
    15ce:	bb 06       	cpc	r11, r27
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <dump_eeprom+0x6c>
    15d2:	7b c0       	rjmp	.+246    	; 0x16ca <dump_eeprom+0x162>
    15d4:	81 2f       	mov	r24, r17
    15d6:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_writehex8>
    15da:	80 2f       	mov	r24, r16
    15dc:	80 7f       	andi	r24, 0xF0	; 240
    15de:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_writehex8>
    15e2:	80 e2       	ldi	r24, 0x20	; 32
    15e4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <uart_writechar>
    15e8:	61 01       	movw	r12, r2
    15ea:	78 01       	movw	r14, r16
    15ec:	41 2c       	mov	r4, r1
    15ee:	51 2c       	mov	r5, r1
    15f0:	32 01       	movw	r6, r4
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	b6 01       	movw	r22, r12
    15f6:	c7 01       	movw	r24, r14
    15f8:	0e 94 ad 01 	call	0x35a	; 0x35a <eeprom_readbuf>
    15fc:	bf ef       	ldi	r27, 0xFF	; 255
    15fe:	eb 1a       	sub	r14, r27
    1600:	fb 0a       	sbc	r15, r27
    1602:	ef ef       	ldi	r30, 0xFF	; 255
    1604:	4e 1a       	sub	r4, r30
    1606:	5e 0a       	sbc	r5, r30
    1608:	6e 0a       	sbc	r6, r30
    160a:	7e 0a       	sbc	r7, r30
    160c:	ff ef       	ldi	r31, 0xFF	; 255
    160e:	8f 1a       	sub	r8, r31
    1610:	9f 0a       	sbc	r9, r31
    1612:	af 0a       	sbc	r10, r31
    1614:	bf 0a       	sbc	r11, r31
    1616:	89 89       	ldd	r24, Y+17	; 0x11
    1618:	9a 89       	ldd	r25, Y+18	; 0x12
    161a:	ab 89       	ldd	r26, Y+19	; 0x13
    161c:	bc 89       	ldd	r27, Y+20	; 0x14
    161e:	88 16       	cp	r8, r24
    1620:	99 06       	cpc	r9, r25
    1622:	aa 06       	cpc	r10, r26
    1624:	bb 06       	cpc	r11, r27
    1626:	50 f0       	brcs	.+20     	; 0x163c <dump_eeprom+0xd4>
    1628:	68 01       	movw	r12, r16
    162a:	9f e0       	ldi	r25, 0x0F	; 15
    162c:	c9 22       	and	r12, r25
    162e:	dd 24       	eor	r13, r13
    1630:	00 e0       	ldi	r16, 0x00	; 0
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	32 01       	movw	r6, r4
    1636:	6c 0c       	add	r6, r12
    1638:	7d 1c       	adc	r7, r13
    163a:	09 c0       	rjmp	.+18     	; 0x164e <dump_eeprom+0xe6>
    163c:	af ef       	ldi	r26, 0xFF	; 255
    163e:	ca 1a       	sub	r12, r26
    1640:	da 0a       	sbc	r13, r26
    1642:	c7 01       	movw	r24, r14
    1644:	8f 70       	andi	r24, 0x0F	; 15
    1646:	99 27       	eor	r25, r25
    1648:	89 2b       	or	r24, r25
    164a:	99 f6       	brne	.-90     	; 0x15f2 <dump_eeprom+0x8a>
    164c:	ed cf       	rjmp	.-38     	; 0x1628 <dump_eeprom+0xc0>
    164e:	0c 15       	cp	r16, r12
    1650:	1d 05       	cpc	r17, r13
    1652:	18 f0       	brcs	.+6      	; 0x165a <dump_eeprom+0xf2>
    1654:	06 15       	cp	r16, r6
    1656:	17 05       	cpc	r17, r7
    1658:	28 f0       	brcs	.+10     	; 0x1664 <dump_eeprom+0xfc>
    165a:	81 ed       	ldi	r24, 0xD1	; 209
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_writestr>
    1662:	0b c0       	rjmp	.+22     	; 0x167a <dump_eeprom+0x112>
    1664:	f8 01       	movw	r30, r16
    1666:	ec 19       	sub	r30, r12
    1668:	fd 09       	sbc	r31, r13
    166a:	e2 0d       	add	r30, r2
    166c:	f3 1d       	adc	r31, r3
    166e:	80 81       	ld	r24, Z
    1670:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_writehex8>
    1674:	80 e2       	ldi	r24, 0x20	; 32
    1676:	0e 94 ee 09 	call	0x13dc	; 0x13dc <uart_writechar>
    167a:	0f 5f       	subi	r16, 0xFF	; 255
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	00 31       	cpi	r16, 0x10	; 16
    1680:	11 05       	cpc	r17, r1
    1682:	29 f7       	brne	.-54     	; 0x164e <dump_eeprom+0xe6>
    1684:	00 e0       	ldi	r16, 0x00	; 0
    1686:	10 e0       	ldi	r17, 0x00	; 0
    1688:	c0 16       	cp	r12, r16
    168a:	d1 06       	cpc	r13, r17
    168c:	31 f0       	breq	.+12     	; 0x169a <dump_eeprom+0x132>
    168e:	80 e2       	ldi	r24, 0x20	; 32
    1690:	0e 94 ee 09 	call	0x13dc	; 0x13dc <uart_writechar>
    1694:	0f 5f       	subi	r16, 0xFF	; 255
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	f7 cf       	rjmp	.-18     	; 0x1688 <dump_eeprom+0x120>
    169a:	81 01       	movw	r16, r2
    169c:	c8 01       	movw	r24, r16
    169e:	82 19       	sub	r24, r2
    16a0:	93 09       	sbc	r25, r3
    16a2:	84 15       	cp	r24, r4
    16a4:	95 05       	cpc	r25, r5
    16a6:	58 f4       	brcc	.+22     	; 0x16be <dump_eeprom+0x156>
    16a8:	f8 01       	movw	r30, r16
    16aa:	81 91       	ld	r24, Z+
    16ac:	8f 01       	movw	r16, r30
    16ae:	90 ee       	ldi	r25, 0xE0	; 224
    16b0:	98 0f       	add	r25, r24
    16b2:	90 36       	cpi	r25, 0x60	; 96
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <dump_eeprom+0x150>
    16b6:	8e e2       	ldi	r24, 0x2E	; 46
    16b8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <uart_writechar>
    16bc:	ef cf       	rjmp	.-34     	; 0x169c <dump_eeprom+0x134>
    16be:	85 ed       	ldi	r24, 0xD5	; 213
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_writestr>
    16c6:	87 01       	movw	r16, r14
    16c8:	7b cf       	rjmp	.-266    	; 0x15c0 <dump_eeprom+0x58>
    16ca:	64 96       	adiw	r28, 0x14	; 20
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    16ee:	7f 90       	pop	r7
    16f0:	6f 90       	pop	r6
    16f2:	5f 90       	pop	r5
    16f4:	4f 90       	pop	r4
    16f6:	3f 90       	pop	r3
    16f8:	2f 90       	pop	r2
    16fa:	08 95       	ret

000016fc <__vector_14>:
    16fc:	1f 92       	push	r1
    16fe:	0f 92       	push	r0
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	0f 92       	push	r0
    1704:	11 24       	eor	r1, r1
    1706:	2f 93       	push	r18
    1708:	3f 93       	push	r19
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <delay_count>
    1712:	30 91 6c 02 	lds	r19, 0x026C	; 0x80026c <delay_count+0x1>
    1716:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <delay_limit>
    171a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <delay_limit+0x1>
    171e:	28 17       	cp	r18, r24
    1720:	39 07       	cpc	r19, r25
    1722:	49 f0       	breq	.+18     	; 0x1736 <__vector_14+0x3a>
    1724:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <delay_count>
    1728:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <delay_count+0x1>
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <delay_count+0x1>
    1732:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <delay_count>
    1736:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <delay_count+0x2>
    173a:	30 91 6e 02 	lds	r19, 0x026E	; 0x80026e <delay_count+0x3>
    173e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <delay_limit+0x2>
    1742:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <delay_limit+0x3>
    1746:	28 17       	cp	r18, r24
    1748:	39 07       	cpc	r19, r25
    174a:	49 f0       	breq	.+18     	; 0x175e <__vector_14+0x62>
    174c:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <delay_count+0x2>
    1750:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <delay_count+0x3>
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <delay_count+0x3>
    175a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <delay_count+0x2>
    175e:	9f 91       	pop	r25
    1760:	8f 91       	pop	r24
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0
    176c:	1f 90       	pop	r1
    176e:	18 95       	reti

00001770 <delay_init>:
    1770:	89 ef       	ldi	r24, 0xF9	; 249
    1772:	87 bd       	out	0x27, r24	; 39
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	84 bd       	out	0x24, r24	; 36
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	95 bd       	out	0x25, r25	; 37
    177c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1780:	08 95       	ret

00001782 <delay_get>:
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	91 05       	cpc	r25, r1
    1786:	50 f4       	brcc	.+20     	; 0x179c <delay_get+0x1a>
    1788:	f8 94       	cli
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	fc 01       	movw	r30, r24
    1790:	e5 59       	subi	r30, 0x95	; 149
    1792:	fd 4f       	sbci	r31, 0xFD	; 253
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	78 94       	sei
    179a:	08 95       	ret
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	08 95       	ret

000017a2 <delay_isdone>:
    17a2:	82 30       	cpi	r24, 0x02	; 2
    17a4:	91 05       	cpc	r25, r1
    17a6:	98 f4       	brcc	.+38     	; 0x17ce <delay_isdone+0x2c>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	fc 01       	movw	r30, r24
    17ae:	e5 59       	subi	r30, 0x95	; 149
    17b0:	fd 4f       	sbci	r31, 0xFD	; 253
    17b2:	20 81       	ld	r18, Z
    17b4:	31 81       	ldd	r19, Z+1	; 0x01
    17b6:	fc 01       	movw	r30, r24
    17b8:	e9 59       	subi	r30, 0x99	; 153
    17ba:	fd 4f       	sbci	r31, 0xFD	; 253
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	40 81       	ld	r20, Z
    17c2:	51 81       	ldd	r21, Z+1	; 0x01
    17c4:	42 17       	cp	r20, r18
    17c6:	53 07       	cpc	r21, r19
    17c8:	21 f0       	breq	.+8      	; 0x17d2 <delay_isdone+0x30>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	08 95       	ret
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	08 95       	ret

000017d4 <delay_set>:
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	ec 01       	movw	r28, r24
    17de:	8b 01       	movw	r16, r22
    17e0:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <initialized.1590>
    17e4:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <initialized.1590+0x1>
    17e8:	89 2b       	or	r24, r25
    17ea:	41 f4       	brne	.+16     	; 0x17fc <delay_set+0x28>
    17ec:	0e 94 b8 0b 	call	0x1770	; 0x1770 <delay_init>
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <initialized.1590+0x1>
    17f8:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <initialized.1590>
    17fc:	c2 30       	cpi	r28, 0x02	; 2
    17fe:	d1 05       	cpc	r29, r1
    1800:	70 f4       	brcc	.+28     	; 0x181e <delay_set+0x4a>
    1802:	8f b7       	in	r24, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	cc 0f       	add	r28, r28
    1808:	dd 1f       	adc	r29, r29
    180a:	fe 01       	movw	r30, r28
    180c:	e9 59       	subi	r30, 0x99	; 153
    180e:	fd 4f       	sbci	r31, 0xFD	; 253
    1810:	11 83       	std	Z+1, r17	; 0x01
    1812:	00 83       	st	Z, r16
    1814:	c5 59       	subi	r28, 0x95	; 149
    1816:	dd 4f       	sbci	r29, 0xFD	; 253
    1818:	19 82       	std	Y+1, r1	; 0x01
    181a:	18 82       	st	Y, r1
    181c:	8f bf       	out	0x3f, r24	; 63
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	08 95       	ret

00001828 <serial_init>:
    1828:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    182c:	87 e6       	ldi	r24, 0x67	; 103
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1834:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1838:	e1 ec       	ldi	r30, 0xC1	; 193
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	88 e1       	ldi	r24, 0x18	; 24
    183e:	80 83       	st	Z, r24
    1840:	86 e0       	ldi	r24, 0x06	; 6
    1842:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1846:	80 81       	ld	r24, Z
    1848:	80 6a       	ori	r24, 0xA0	; 160
    184a:	80 83       	st	Z, r24
    184c:	08 95       	ret

0000184e <__vector_18>:
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	2f 93       	push	r18
    185a:	8f 93       	push	r24
    185c:	9f 93       	push	r25
    185e:	ef 93       	push	r30
    1860:	ff 93       	push	r31
    1862:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <rxtail>
    1866:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <rxhead>
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	82 1b       	sub	r24, r18
    186e:	91 09       	sbc	r25, r1
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	8f 73       	andi	r24, 0x3F	; 63
    1874:	99 27       	eor	r25, r25
    1876:	89 2b       	or	r24, r25
    1878:	79 f0       	breq	.+30     	; 0x1898 <__vector_18+0x4a>
    187a:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <rxhead>
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1884:	eb 53       	subi	r30, 0x3B	; 59
    1886:	fb 4f       	sbci	r31, 0xFB	; 251
    1888:	80 83       	st	Z, r24
    188a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <rxhead>
    188e:	8f 5f       	subi	r24, 0xFF	; 255
    1890:	8f 73       	andi	r24, 0x3F	; 63
    1892:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <rxhead>
    1896:	02 c0       	rjmp	.+4      	; 0x189c <__vector_18+0x4e>
    1898:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    189c:	ff 91       	pop	r31
    189e:	ef 91       	pop	r30
    18a0:	9f 91       	pop	r25
    18a2:	8f 91       	pop	r24
    18a4:	2f 91       	pop	r18
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	0f 90       	pop	r0
    18ac:	1f 90       	pop	r1
    18ae:	18 95       	reti

000018b0 <__vector_19>:
    18b0:	1f 92       	push	r1
    18b2:	0f 92       	push	r0
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	0f 92       	push	r0
    18b8:	11 24       	eor	r1, r1
    18ba:	2f 93       	push	r18
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
    18c4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <txhead>
    18c8:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <txtail>
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	82 1b       	sub	r24, r18
    18d0:	91 09       	sbc	r25, r1
    18d2:	8f 73       	andi	r24, 0x3F	; 63
    18d4:	99 27       	eor	r25, r25
    18d6:	89 2b       	or	r24, r25
    18d8:	79 f0       	breq	.+30     	; 0x18f8 <__vector_19+0x48>
    18da:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <txtail>
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	eb 5f       	subi	r30, 0xFB	; 251
    18e2:	fa 4f       	sbci	r31, 0xFA	; 250
    18e4:	80 81       	ld	r24, Z
    18e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    18ea:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <txtail>
    18ee:	8f 5f       	subi	r24, 0xFF	; 255
    18f0:	8f 73       	andi	r24, 0x3F	; 63
    18f2:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <txtail>
    18f6:	05 c0       	rjmp	.+10     	; 0x1902 <__vector_19+0x52>
    18f8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    18fc:	8f 7d       	andi	r24, 0xDF	; 223
    18fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1902:	ff 91       	pop	r31
    1904:	ef 91       	pop	r30
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	2f 91       	pop	r18
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <serial_rxchars>:
    1916:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <rxhead>
    191a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <rxtail>
    191e:	89 1b       	sub	r24, r25
    1920:	8f 73       	andi	r24, 0x3F	; 63
    1922:	08 95       	ret

00001924 <serial_popchar>:
    1924:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <rxhead>
    1928:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <rxtail>
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	82 1b       	sub	r24, r18
    1930:	91 09       	sbc	r25, r1
    1932:	8f 73       	andi	r24, 0x3F	; 63
    1934:	99 27       	eor	r25, r25
    1936:	89 2b       	or	r24, r25
    1938:	69 f0       	breq	.+26     	; 0x1954 <serial_popchar+0x30>
    193a:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <rxtail>
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	eb 53       	subi	r30, 0x3B	; 59
    1942:	fb 4f       	sbci	r31, 0xFB	; 251
    1944:	80 81       	ld	r24, Z
    1946:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <rxtail>
    194a:	9f 5f       	subi	r25, 0xFF	; 255
    194c:	9f 73       	andi	r25, 0x3F	; 63
    194e:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <rxtail>
    1952:	08 95       	ret
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	08 95       	ret

00001958 <serial_writechar>:
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	07 fe       	sbrs	r0, 7
    195c:	0e c0       	rjmp	.+28     	; 0x197a <serial_writechar+0x22>
    195e:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <txtail>
    1962:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <txhead>
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	29 1b       	sub	r18, r25
    196a:	31 09       	sbc	r19, r1
    196c:	21 50       	subi	r18, 0x01	; 1
    196e:	31 09       	sbc	r19, r1
    1970:	2f 73       	andi	r18, 0x3F	; 63
    1972:	33 27       	eor	r19, r19
    1974:	23 2b       	or	r18, r19
    1976:	99 f3       	breq	.-26     	; 0x195e <serial_writechar+0x6>
    1978:	0d c0       	rjmp	.+26     	; 0x1994 <serial_writechar+0x3c>
    197a:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <txtail>
    197e:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <txhead>
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	29 1b       	sub	r18, r25
    1986:	31 09       	sbc	r19, r1
    1988:	21 50       	subi	r18, 0x01	; 1
    198a:	31 09       	sbc	r19, r1
    198c:	2f 73       	andi	r18, 0x3F	; 63
    198e:	33 27       	eor	r19, r19
    1990:	23 2b       	or	r18, r19
    1992:	61 f0       	breq	.+24     	; 0x19ac <serial_writechar+0x54>
    1994:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <txhead>
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	eb 5f       	subi	r30, 0xFB	; 251
    199c:	fa 4f       	sbci	r31, 0xFA	; 250
    199e:	80 83       	st	Z, r24
    19a0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <txhead>
    19a4:	8f 5f       	subi	r24, 0xFF	; 255
    19a6:	8f 73       	andi	r24, 0x3F	; 63
    19a8:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <txhead>
    19ac:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    19b0:	80 62       	ori	r24, 0x20	; 32
    19b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    19b6:	08 95       	ret

000019b8 <serial_writestr>:
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	ec 01       	movw	r28, r24
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	11 e0       	ldi	r17, 0x01	; 1
    19c4:	18 0f       	add	r17, r24
    19c6:	fe 01       	movw	r30, r28
    19c8:	e8 0f       	add	r30, r24
    19ca:	f1 1d       	adc	r31, r1
    19cc:	80 81       	ld	r24, Z
    19ce:	88 23       	and	r24, r24
    19d0:	21 f0       	breq	.+8      	; 0x19da <serial_writestr+0x22>
    19d2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <serial_writechar>
    19d6:	81 2f       	mov	r24, r17
    19d8:	f4 cf       	rjmp	.-24     	; 0x19c2 <serial_writestr+0xa>
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	08 95       	ret

000019e2 <serial_writestr_P>:
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	ec 01       	movw	r28, r24
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	11 e0       	ldi	r17, 0x01	; 1
    19ee:	18 0f       	add	r17, r24
    19f0:	fe 01       	movw	r30, r28
    19f2:	e8 0f       	add	r30, r24
    19f4:	f1 1d       	adc	r31, r1
    19f6:	84 91       	lpm	r24, Z
    19f8:	88 23       	and	r24, r24
    19fa:	21 f0       	breq	.+8      	; 0x1a04 <serial_writestr_P+0x22>
    19fc:	0e 94 ac 0c 	call	0x1958	; 0x1958 <serial_writechar>
    1a00:	81 2f       	mov	r24, r17
    1a02:	f4 cf       	rjmp	.-24     	; 0x19ec <serial_writestr_P+0xa>
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	08 95       	ret

00001a0c <__mulsi3>:
    1a0c:	db 01       	movw	r26, r22
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__muluhisi3>
    1a16:	bf 91       	pop	r27
    1a18:	af 91       	pop	r26
    1a1a:	a2 9f       	mul	r26, r18
    1a1c:	80 0d       	add	r24, r0
    1a1e:	91 1d       	adc	r25, r1
    1a20:	a3 9f       	mul	r26, r19
    1a22:	90 0d       	add	r25, r0
    1a24:	b2 9f       	mul	r27, r18
    1a26:	90 0d       	add	r25, r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	08 95       	ret

00001a2c <__udivmodhi4>:
    1a2c:	aa 1b       	sub	r26, r26
    1a2e:	bb 1b       	sub	r27, r27
    1a30:	51 e1       	ldi	r21, 0x11	; 17
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <__udivmodhi4_ep>

00001a34 <__udivmodhi4_loop>:
    1a34:	aa 1f       	adc	r26, r26
    1a36:	bb 1f       	adc	r27, r27
    1a38:	a6 17       	cp	r26, r22
    1a3a:	b7 07       	cpc	r27, r23
    1a3c:	10 f0       	brcs	.+4      	; 0x1a42 <__udivmodhi4_ep>
    1a3e:	a6 1b       	sub	r26, r22
    1a40:	b7 0b       	sbc	r27, r23

00001a42 <__udivmodhi4_ep>:
    1a42:	88 1f       	adc	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	5a 95       	dec	r21
    1a48:	a9 f7       	brne	.-22     	; 0x1a34 <__udivmodhi4_loop>
    1a4a:	80 95       	com	r24
    1a4c:	90 95       	com	r25
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	08 95       	ret

00001a54 <__divmodhi4>:
    1a54:	97 fb       	bst	r25, 7
    1a56:	07 2e       	mov	r0, r23
    1a58:	16 f4       	brtc	.+4      	; 0x1a5e <__divmodhi4+0xa>
    1a5a:	00 94       	com	r0
    1a5c:	07 d0       	rcall	.+14     	; 0x1a6c <__divmodhi4_neg1>
    1a5e:	77 fd       	sbrc	r23, 7
    1a60:	09 d0       	rcall	.+18     	; 0x1a74 <__divmodhi4_neg2>
    1a62:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
    1a66:	07 fc       	sbrc	r0, 7
    1a68:	05 d0       	rcall	.+10     	; 0x1a74 <__divmodhi4_neg2>
    1a6a:	3e f4       	brtc	.+14     	; 0x1a7a <__divmodhi4_exit>

00001a6c <__divmodhi4_neg1>:
    1a6c:	90 95       	com	r25
    1a6e:	81 95       	neg	r24
    1a70:	9f 4f       	sbci	r25, 0xFF	; 255
    1a72:	08 95       	ret

00001a74 <__divmodhi4_neg2>:
    1a74:	70 95       	com	r23
    1a76:	61 95       	neg	r22
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255

00001a7a <__divmodhi4_exit>:
    1a7a:	08 95       	ret

00001a7c <__udivmodsi4>:
    1a7c:	a1 e2       	ldi	r26, 0x21	; 33
    1a7e:	1a 2e       	mov	r1, r26
    1a80:	aa 1b       	sub	r26, r26
    1a82:	bb 1b       	sub	r27, r27
    1a84:	fd 01       	movw	r30, r26
    1a86:	0d c0       	rjmp	.+26     	; 0x1aa2 <__udivmodsi4_ep>

00001a88 <__udivmodsi4_loop>:
    1a88:	aa 1f       	adc	r26, r26
    1a8a:	bb 1f       	adc	r27, r27
    1a8c:	ee 1f       	adc	r30, r30
    1a8e:	ff 1f       	adc	r31, r31
    1a90:	a2 17       	cp	r26, r18
    1a92:	b3 07       	cpc	r27, r19
    1a94:	e4 07       	cpc	r30, r20
    1a96:	f5 07       	cpc	r31, r21
    1a98:	20 f0       	brcs	.+8      	; 0x1aa2 <__udivmodsi4_ep>
    1a9a:	a2 1b       	sub	r26, r18
    1a9c:	b3 0b       	sbc	r27, r19
    1a9e:	e4 0b       	sbc	r30, r20
    1aa0:	f5 0b       	sbc	r31, r21

00001aa2 <__udivmodsi4_ep>:
    1aa2:	66 1f       	adc	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	1a 94       	dec	r1
    1aac:	69 f7       	brne	.-38     	; 0x1a88 <__udivmodsi4_loop>
    1aae:	60 95       	com	r22
    1ab0:	70 95       	com	r23
    1ab2:	80 95       	com	r24
    1ab4:	90 95       	com	r25
    1ab6:	9b 01       	movw	r18, r22
    1ab8:	ac 01       	movw	r20, r24
    1aba:	bd 01       	movw	r22, r26
    1abc:	cf 01       	movw	r24, r30
    1abe:	08 95       	ret

00001ac0 <__divmodsi4>:
    1ac0:	05 2e       	mov	r0, r21
    1ac2:	97 fb       	bst	r25, 7
    1ac4:	1e f4       	brtc	.+6      	; 0x1acc <__divmodsi4+0xc>
    1ac6:	00 94       	com	r0
    1ac8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__negsi2>
    1acc:	57 fd       	sbrc	r21, 7
    1ace:	07 d0       	rcall	.+14     	; 0x1ade <__divmodsi4_neg2>
    1ad0:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__udivmodsi4>
    1ad4:	07 fc       	sbrc	r0, 7
    1ad6:	03 d0       	rcall	.+6      	; 0x1ade <__divmodsi4_neg2>
    1ad8:	4e f4       	brtc	.+18     	; 0x1aec <__divmodsi4_exit>
    1ada:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__negsi2>

00001ade <__divmodsi4_neg2>:
    1ade:	50 95       	com	r21
    1ae0:	40 95       	com	r20
    1ae2:	30 95       	com	r19
    1ae4:	21 95       	neg	r18
    1ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae8:	4f 4f       	sbci	r20, 0xFF	; 255
    1aea:	5f 4f       	sbci	r21, 0xFF	; 255

00001aec <__divmodsi4_exit>:
    1aec:	08 95       	ret

00001aee <__negsi2>:
    1aee:	90 95       	com	r25
    1af0:	80 95       	com	r24
    1af2:	70 95       	com	r23
    1af4:	61 95       	neg	r22
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	8f 4f       	sbci	r24, 0xFF	; 255
    1afa:	9f 4f       	sbci	r25, 0xFF	; 255
    1afc:	08 95       	ret

00001afe <__umulhisi3>:
    1afe:	a2 9f       	mul	r26, r18
    1b00:	b0 01       	movw	r22, r0
    1b02:	b3 9f       	mul	r27, r19
    1b04:	c0 01       	movw	r24, r0
    1b06:	a3 9f       	mul	r26, r19
    1b08:	70 0d       	add	r23, r0
    1b0a:	81 1d       	adc	r24, r1
    1b0c:	11 24       	eor	r1, r1
    1b0e:	91 1d       	adc	r25, r1
    1b10:	b2 9f       	mul	r27, r18
    1b12:	70 0d       	add	r23, r0
    1b14:	81 1d       	adc	r24, r1
    1b16:	11 24       	eor	r1, r1
    1b18:	91 1d       	adc	r25, r1
    1b1a:	08 95       	ret

00001b1c <__muluhisi3>:
    1b1c:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__umulhisi3>
    1b20:	a5 9f       	mul	r26, r21
    1b22:	90 0d       	add	r25, r0
    1b24:	b4 9f       	mul	r27, r20
    1b26:	90 0d       	add	r25, r0
    1b28:	a4 9f       	mul	r26, r20
    1b2a:	80 0d       	add	r24, r0
    1b2c:	91 1d       	adc	r25, r1
    1b2e:	11 24       	eor	r1, r1
    1b30:	08 95       	ret

00001b32 <_exit>:
    1b32:	f8 94       	cli

00001b34 <__stop_program>:
    1b34:	ff cf       	rjmp	.-2      	; 0x1b34 <__stop_program>
