
bin/Debug/Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000dd6  00000e6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00000dae  00000dae  00000e42  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e2  00800180  00800180  00000eea  2**0
                  ALLOC
  4 .stab         00001890  00000000  00000000  00000eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000e7d  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  000035f9  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000361c  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  0000365c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00003c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000041f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_18>
  4c:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_22>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a0 e8       	ldi	r26, 0x80	; 128
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 49 02 	call	0x492	; 0x492 <main>
  9e:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
/*********** Private declarations ***********/
int is_data_valid();
void write_defaults();

/*********** Public definitions ***********/
void config_init() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  /* while the data is not valid */

  /* write defaults */
  /* init config with defaults */
  /* clear the modified flag */
}
  ae:	00 00       	nop
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <config_update>:
void config_update() {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  /* if eeprom is busy or !modified just return */

  /* update the checksum */
  /* write config to eeprom */
  /* clear the modified flag */
}
  be:	00 00       	nop
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <config_set_modified>:
void config_set_modified() {
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  config_modified = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
}
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <is_data_valid>:


/*********** Private definitions ***********/
int is_data_valid() {
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  // todo 
  return 0;
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <write_defaults>:
void write_defaults() {
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  /* upate_checksum() for defaults*/

  /* write defaults to eeprom */
  f6:	00 00       	nop
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <eeprom_unlock>:
* Changes ...
*/
void eeprom_unlock()
{
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
  fe:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
 100:	f9 9a       	sbi	0x1f, 1	; 31
}
 102:	08 95       	ret

00000104 <__vector_22>:

/* Enabled when writebuf() places new data in the write buffer, this ISR sends
 * one byte at a time to the EEPROM. When the last byte is sent, it disables
 * futher EERPOM interrupts */
/* should this bee vector 22 or 23?? Documents say 23 for EE ready */
void __vector_22(){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
  // if (EECR & (1<<EEPE)) { return; } /* not ready. Don't block */

  /* if you haven't written all characters in then keep writing */
  /* should we check to see if it is ready to write? */
  if (bufidx < writesize) {
 12e:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <bufidx>
 132:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <writesize>
 136:	98 17       	cp	r25, r24
 138:	28 f5       	brcc	.+74     	; 0x184 <__vector_22+0x80>
    /* set low byte */
    EEARL = writeaddr & 0xFF; 
 13a:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <writeaddr>
 13e:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <writeaddr+0x1>
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
    /* set high byte */
    EEARH = (writeaddr >> 8) & 0xFF;
 14a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <writeaddr>
 14e:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <writeaddr+0x1>
 152:	29 2f       	mov	r18, r25
 154:	33 27       	eor	r19, r19
 156:	82 e4       	ldi	r24, 0x42	; 66
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
    EEDR = writebuf[bufidx++];
 15e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <bufidx>
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	98 0f       	add	r25, r24
 166:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <bufidx>
 16a:	28 2f       	mov	r18, r24
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	26 55       	subi	r18, 0x56	; 86
 174:	3e 4f       	sbci	r19, 0xFE	; 254
 176:	f9 01       	movw	r30, r18
 178:	20 81       	ld	r18, Z
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
    eeprom_unlock();
 17e:	0e 94 7f 00 	call	0xfe	; 0xfe <eeprom_unlock>
    /* disable interrupts */
    disable_interrupt();
    /* make ready to write another */
    write_busy = 0;
  }
}
 182:	04 c0       	rjmp	.+8      	; 0x18c <__vector_22+0x88>
    eeprom_unlock();
  }
  else {

    /* disable interrupts */
    disable_interrupt();
 184:	0e 94 ab 01 	call	0x356	; 0x356 <disable_interrupt>
    /* make ready to write another */
    write_busy = 0;
 188:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <write_busy>
  }
}
 18c:	00 00       	nop
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <eeprom_writebuf>:

/* this function places the data (specified buf and size) into the write buffer
 * for later writing to the EEPROM. The addr parameter specifies the location to
 * write the data to. */
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf, unsigned char size) {
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <eeprom_writebuf+0x6>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <eeprom_writebuf+0x8>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <eeprom_writebuf+0xa>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	9b 83       	std	Y+3, r25	; 0x03
 1c4:	8a 83       	std	Y+2, r24	; 0x02
 1c6:	7d 83       	std	Y+5, r23	; 0x05
 1c8:	6c 83       	std	Y+4, r22	; 0x04
 1ca:	4e 83       	std	Y+6, r20	; 0x06
  // check that write_busy is 0
  if (write_busy > 0) {
 1cc:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <write_busy>
 1d0:	88 23       	and	r24, r24
 1d2:	b9 f5       	brne	.+110    	; 0x242 <eeprom_writebuf+0x8e>
    return;
  }
  if (size > 64) {
 1d4:	8e 81       	ldd	r24, Y+6	; 0x06
 1d6:	81 34       	cpi	r24, 0x41	; 65
 1d8:	b0 f5       	brcc	.+108    	; 0x246 <eeprom_writebuf+0x92>
    return;
  }
  if ((addr + size) > 0x3FF) {
 1da:	8e 81       	ldd	r24, Y+6	; 0x06
 1dc:	28 2f       	mov	r18, r24
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	9b 81       	ldd	r25, Y+3	; 0x03
 1e4:	82 0f       	add	r24, r18
 1e6:	93 1f       	adc	r25, r19
 1e8:	81 15       	cp	r24, r1
 1ea:	94 40       	sbci	r25, 0x04	; 4
 1ec:	70 f5       	brcc	.+92     	; 0x24a <eeprom_writebuf+0x96>
    return;
  }
  /* the EEPROM is now writing */
  write_busy = 1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <write_busy>
  /* change the write address */
  writeaddr = addr;
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	9b 81       	ldd	r25, Y+3	; 0x03
 1f8:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <writeaddr+0x1>
 1fc:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <writeaddr>
  /* start reading from the beginning of the buffer */
  bufidx = 0;
 200:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <bufidx>

  /* copy buf to writebuf and configure writesize */
  for(unsigned char i = 0; i < size; i++) {
 204:	19 82       	std	Y+1, r1	; 0x01
 206:	13 c0       	rjmp	.+38     	; 0x22e <eeprom_writebuf+0x7a>
    writebuf[i] = buf[i];
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	88 2f       	mov	r24, r24
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	2c 81       	ldd	r18, Y+4	; 0x04
 210:	3d 81       	ldd	r19, Y+5	; 0x05
 212:	28 0f       	add	r18, r24
 214:	39 1f       	adc	r19, r25
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	88 2f       	mov	r24, r24
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	f9 01       	movw	r30, r18
 21e:	20 81       	ld	r18, Z
 220:	86 55       	subi	r24, 0x56	; 86
 222:	9e 4f       	sbci	r25, 0xFE	; 254
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
  writeaddr = addr;
  /* start reading from the beginning of the buffer */
  bufidx = 0;

  /* copy buf to writebuf and configure writesize */
  for(unsigned char i = 0; i < size; i++) {
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	99 81       	ldd	r25, Y+1	; 0x01
 230:	8e 81       	ldd	r24, Y+6	; 0x06
 232:	98 17       	cp	r25, r24
 234:	48 f3       	brcs	.-46     	; 0x208 <eeprom_writebuf+0x54>
    writebuf[i] = buf[i];
  }

  writesize = size;
 236:	8e 81       	ldd	r24, Y+6	; 0x06
 238:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <writesize>

  
  /* enable the EEPROM ready interrupts */
  enable_interrupt();
 23c:	0e 94 9a 01 	call	0x334	; 0x334 <enable_interrupt>
 240:	05 c0       	rjmp	.+10     	; 0x24c <eeprom_writebuf+0x98>
 * write the data to. */
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf, unsigned char size) {
  // check that write_busy is 0
  if (write_busy > 0) {
    return;
 242:	00 00       	nop
 244:	03 c0       	rjmp	.+6      	; 0x24c <eeprom_writebuf+0x98>
  }
  if (size > 64) {
    return;
 246:	00 00       	nop
 248:	01 c0       	rjmp	.+2      	; 0x24c <eeprom_writebuf+0x98>
  }
  if ((addr + size) > 0x3FF) {
    return;
 24a:	00 00       	nop
  writesize = size;

  
  /* enable the EEPROM ready interrupts */
  enable_interrupt();
}
 24c:	26 96       	adiw	r28, 0x06	; 6
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <eeprom_readbuf>:

/* this function reads a specified amount of data(size) from the EEPROM starting
 * at a specified address(addr) and places it in the specified buffer(buf) */
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	00 d0       	rcall	.+0      	; 0x264 <eeprom_readbuf+0x6>
 264:	00 d0       	rcall	.+0      	; 0x266 <eeprom_readbuf+0x8>
 266:	00 d0       	rcall	.+0      	; 0x268 <eeprom_readbuf+0xa>
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	9b 83       	std	Y+3, r25	; 0x03
 26e:	8a 83       	std	Y+2, r24	; 0x02
 270:	7d 83       	std	Y+5, r23	; 0x05
 272:	6c 83       	std	Y+4, r22	; 0x04
 274:	4e 83       	std	Y+6, r20	; 0x06

  // check that write_busy is 0
  if (write_busy > 0) {
 276:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <write_busy>
 27a:	88 23       	and	r24, r24
 27c:	a9 f5       	brne	.+106    	; 0x2e8 <eeprom_readbuf+0x8a>
    // write to the console
    return;
  }
  if (size > 64) {
 27e:	8e 81       	ldd	r24, Y+6	; 0x06
 280:	81 34       	cpi	r24, 0x41	; 65
 282:	a0 f5       	brcc	.+104    	; 0x2ec <eeprom_readbuf+0x8e>
    /* write error. buffer is too big */
    return;
  }

  for (unsigned char i = 0; i < size; i++) {
 284:	19 82       	std	Y+1, r1	; 0x01
 286:	2b c0       	rjmp	.+86     	; 0x2de <eeprom_readbuf+0x80>
    /* set the address */
    /* set low byte */
    EEARL = addr & 0xFF; 
 288:	81 e4       	ldi	r24, 0x41	; 65
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	2a 81       	ldd	r18, Y+2	; 0x02
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18

    /* set high byte */
    EEARH = (addr >> 8) & 0xFF;
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	9b 81       	ldd	r25, Y+3	; 0x03
 296:	29 2f       	mov	r18, r25
 298:	33 27       	eor	r19, r19
 29a:	82 e4       	ldi	r24, 0x42	; 66
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18

    /* set mode to read */
    EECR |= (1<<EERE);
 2a2:	8f e3       	ldi	r24, 0x3F	; 63
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 81       	ld	r18, Z
 2aa:	8f e3       	ldi	r24, 0x3F	; 63
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	21 60       	ori	r18, 0x01	; 1
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
    /* write from register to buffer */
    buf[i] = EEDR;
 2b4:	20 e4       	ldi	r18, 0x40	; 64
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	88 2f       	mov	r24, r24
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	4c 81       	ldd	r20, Y+4	; 0x04
 2c0:	5d 81       	ldd	r21, Y+5	; 0x05
 2c2:	84 0f       	add	r24, r20
 2c4:	95 1f       	adc	r25, r21
 2c6:	f9 01       	movw	r30, r18
 2c8:	20 81       	ld	r18, Z
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18

    addr++;
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	9b 81       	ldd	r25, Y+3	; 0x03
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	9b 83       	std	Y+3, r25	; 0x03
 2d6:	8a 83       	std	Y+2, r24	; 0x02
  if (size > 64) {
    /* write error. buffer is too big */
    return;
  }

  for (unsigned char i = 0; i < size; i++) {
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	8f 5f       	subi	r24, 0xFF	; 255
 2dc:	89 83       	std	Y+1, r24	; 0x01
 2de:	99 81       	ldd	r25, Y+1	; 0x01
 2e0:	8e 81       	ldd	r24, Y+6	; 0x06
 2e2:	98 17       	cp	r25, r24
 2e4:	88 f2       	brcs	.-94     	; 0x288 <eeprom_readbuf+0x2a>
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <eeprom_readbuf+0x90>
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {

  // check that write_busy is 0
  if (write_busy > 0) {
    // write to the console
    return;
 2e8:	00 00       	nop
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <eeprom_readbuf+0x90>
  }
  if (size > 64) {
    /* write error. buffer is too big */
    return;
 2ec:	00 00       	nop
    buf[i] = EEDR;

    addr++;
  }
  
}
 2ee:	26 96       	adiw	r28, 0x06	; 6
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <eeprom_isbusy>:

/* this functiosn returns 0 if write_busy is 0, otherwise, returns 1 */
int eeprom_isbusy() { 
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <eeprom_isbusy+0x6>
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
  int status;
  disable_interrupt();
 30a:	0e 94 ab 01 	call	0x356	; 0x356 <disable_interrupt>
  status = write_busy == 1;
 30e:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <write_busy>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	91 30       	cpi	r25, 0x01	; 1
 316:	09 f0       	breq	.+2      	; 0x31a <eeprom_isbusy+0x1a>
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	88 2f       	mov	r24, r24
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	9a 83       	std	Y+2, r25	; 0x02
 320:	89 83       	std	Y+1, r24	; 0x01
  enable_interrupt();
 322:	0e 94 9a 01 	call	0x334	; 0x334 <enable_interrupt>
  return status;
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	9a 81       	ldd	r25, Y+2	; 0x02
}
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <enable_interrupt>:

void enable_interrupt() {
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
  EECR |= (1<<EERIE);
 33c:	8f e3       	ldi	r24, 0x3F	; 63
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	fc 01       	movw	r30, r24
 342:	20 81       	ld	r18, Z
 344:	8f e3       	ldi	r24, 0x3F	; 63
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	28 60       	ori	r18, 0x08	; 8
 34a:	fc 01       	movw	r30, r24
 34c:	20 83       	st	Z, r18
}
 34e:	00 00       	nop
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <disable_interrupt>:

void disable_interrupt() {
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
  EECR &= ~(1<<EERIE);
 35e:	8f e3       	ldi	r24, 0x3F	; 63
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	fc 01       	movw	r30, r24
 364:	20 81       	ld	r18, Z
 366:	8f e3       	ldi	r24, 0x3F	; 63
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	27 7f       	andi	r18, 0xF7	; 247
 36c:	fc 01       	movw	r30, r24
 36e:	20 83       	st	Z, r18
}
 370:	00 00       	nop
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <test_eeprom_uart>:
#include "eeprom.h"
#include "led.h"
#include "util.h"


void test_eeprom_uart() {
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	c5 54       	subi	r28, 0x45	; 69
 382:	d1 09       	sbc	r29, r1
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
    // Define test data
    const char *test_string = "Hello, EEPROM!";
 38e:	89 e4       	ldi	r24, 0x49	; 73
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	9b 83       	std	Y+3, r25	; 0x03
 394:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char write_buffer[32];  // Use a buffer sized for the actual test string
    unsigned char read_buffer[32];   // Separate buffer for reading
    unsigned int test_address = 0x00; // Example EEPROM start address
 396:	1d 82       	std	Y+5, r1	; 0x05
 398:	1c 82       	std	Y+4, r1	; 0x04
    unsigned char test_size = 0;
 39a:	19 82       	std	Y+1, r1	; 0x01

    // Manually copy test_string into write_buffer
    for (test_size = 0; test_string[test_size] != '\0'; test_size++) {
 39c:	19 82       	std	Y+1, r1	; 0x01
 39e:	17 c0       	rjmp	.+46     	; 0x3ce <test_eeprom_uart+0x56>
        write_buffer[test_size] = test_string[test_size];
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	88 2f       	mov	r24, r24
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	2a 81       	ldd	r18, Y+2	; 0x02
 3a8:	3b 81       	ldd	r19, Y+3	; 0x03
 3aa:	82 0f       	add	r24, r18
 3ac:	93 1f       	adc	r25, r19
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 81       	ld	r18, Z
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	42 2f       	mov	r20, r18
 3ba:	9e 01       	movw	r18, r28
 3bc:	2a 5f       	subi	r18, 0xFA	; 250
 3be:	3f 4f       	sbci	r19, 0xFF	; 255
 3c0:	82 0f       	add	r24, r18
 3c2:	93 1f       	adc	r25, r19
 3c4:	fc 01       	movw	r30, r24
 3c6:	40 83       	st	Z, r20
    unsigned char read_buffer[32];   // Separate buffer for reading
    unsigned int test_address = 0x00; // Example EEPROM start address
    unsigned char test_size = 0;

    // Manually copy test_string into write_buffer
    for (test_size = 0; test_string[test_size] != '\0'; test_size++) {
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	89 83       	std	Y+1, r24	; 0x01
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	88 2f       	mov	r24, r24
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	2a 81       	ldd	r18, Y+2	; 0x02
 3d6:	3b 81       	ldd	r19, Y+3	; 0x03
 3d8:	82 0f       	add	r24, r18
 3da:	93 1f       	adc	r25, r19
 3dc:	fc 01       	movw	r30, r24
 3de:	80 81       	ld	r24, Z
 3e0:	88 23       	and	r24, r24
 3e2:	f1 f6       	brne	.-68     	; 0x3a0 <test_eeprom_uart+0x28>
        write_buffer[test_size] = test_string[test_size];
    }
    write_buffer[test_size] = '\0';  // Include null terminator
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	9e 01       	movw	r18, r28
 3ec:	2a 5f       	subi	r18, 0xFA	; 250
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
 3f0:	82 0f       	add	r24, r18
 3f2:	93 1f       	adc	r25, r19
 3f4:	fc 01       	movw	r30, r24
 3f6:	10 82       	st	Z, r1
    test_size++;  // Add 1 for the null terminator
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	8f 5f       	subi	r24, 0xFF	; 255
 3fc:	89 83       	std	Y+1, r24	; 0x01

    // Write test data to EEPROM
    eeprom_writebuf(test_address, write_buffer, test_size);
 3fe:	9e 01       	movw	r18, r28
 400:	2a 5f       	subi	r18, 0xFA	; 250
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	9d 81       	ldd	r25, Y+5	; 0x05
 408:	49 81       	ldd	r20, Y+1	; 0x01
 40a:	b9 01       	movw	r22, r18
 40c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <eeprom_writebuf>

    // Simulate EEPROM write completion
    while (eeprom_isbusy()) {
 410:	00 00       	nop
 412:	0e 94 80 01 	call	0x300	; 0x300 <eeprom_isbusy>
 416:	89 2b       	or	r24, r25
 418:	e1 f7       	brne	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
        // Simulated EEPROM ISR writes data
    }

    // Read data back from EEPROM
    eeprom_readbuf(test_address, read_buffer, test_size);
 41a:	9e 01       	movw	r18, r28
 41c:	2a 5d       	subi	r18, 0xDA	; 218
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
 420:	8c 81       	ldd	r24, Y+4	; 0x04
 422:	9d 81       	ldd	r25, Y+5	; 0x05
 424:	49 81       	ldd	r20, Y+1	; 0x01
 426:	b9 01       	movw	r22, r18
 428:	0e 94 2f 01 	call	0x25e	; 0x25e <eeprom_readbuf>

    // Null-terminate the read buffer for safety
    read_buffer[test_size - 1] = '\0';
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	88 2f       	mov	r24, r24
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	9e 01       	movw	r18, r28
 436:	2a 5d       	subi	r18, 0xDA	; 218
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	82 0f       	add	r24, r18
 43c:	93 1f       	adc	r25, r19
 43e:	fc 01       	movw	r30, r24
 440:	10 82       	st	Z, r1

    // Output the read data via UART
    uart_writestr("Read from EEPROM: ");
 442:	88 e5       	ldi	r24, 0x58	; 88
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uart_writestr>
    uart_writestr((char *)read_buffer);
 44a:	ce 01       	movw	r24, r28
 44c:	86 96       	adiw	r24, 0x26	; 38
 44e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uart_writestr>
    uart_writestr("\n");
 452:	8b e6       	ldi	r24, 0x6B	; 107
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uart_writestr>
}
 45a:	00 00       	nop
 45c:	cb 5b       	subi	r28, 0xBB	; 187
 45e:	df 4f       	sbci	r29, 0xFF	; 255
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	de bf       	out	0x3e, r29	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	cd bf       	out	0x3d, r28	; 61
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <enable_global_interrupts>:

#define SREG (*(volatile unsigned char *)0x5F)
#define I_BIT 7

void enable_global_interrupts() {
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
    SREG |= (1 << I_BIT);  // Set the I bit to enable interrupts
 478:	8f e5       	ldi	r24, 0x5F	; 95
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	fc 01       	movw	r30, r24
 47e:	20 81       	ld	r18, Z
 480:	8f e5       	ldi	r24, 0x5F	; 95
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	20 68       	ori	r18, 0x80	; 128
 486:	fc 01       	movw	r30, r24
 488:	20 83       	st	Z, r18
}
 48a:	00 00       	nop
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <main>:

int main() {
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	00 d0       	rcall	.+0      	; 0x498 <main+0x6>
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
  enable_global_interrupts();
 49c:	0e 94 38 02 	call	0x470	; 0x470 <enable_global_interrupts>
  // variable to track if the eeprom has been dumped
  int dumped = 0;
 4a0:	1a 82       	std	Y+2, r1	; 0x02
 4a2:	19 82       	std	Y+1, r1	; 0x01
  test_eeprom_uart();
 4a4:	0e 94 bc 01 	call	0x378	; 0x378 <test_eeprom_uart>
  // init uart
  uart_init();
 4a8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <uart_init>
  // init conig
  // init led
  led_init();
 4ac:	0e 94 52 03 	call	0x6a4	; 0x6a4 <led_init>
  // init log
  // init rtc
  // init vpd

  // led blink pattern "--- -.-"
  led_set_blink("--- -.-"); 
 4b0:	8d e6       	ldi	r24, 0x6D	; 109
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <led_set_blink>
  // clear the event log
  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc

  while(1) {
    // update the blink fsm every
    led_update();
 4b8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <led_update>
      // update the log in EEPROM

    // if (config has changed && eeprom is not busy)
      // update config in EEPROM

    if ((!eeprom_isbusy()) && (!dumped)) {
 4bc:	0e 94 80 01 	call	0x300	; 0x300 <eeprom_isbusy>
 4c0:	89 2b       	or	r24, r25
 4c2:	d1 f7       	brne	.-12     	; 0x4b8 <main+0x26>
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	9a 81       	ldd	r25, Y+2	; 0x02
 4c8:	89 2b       	or	r24, r25
 4ca:	b1 f7       	brne	.-20     	; 0x4b8 <main+0x26>
          dump_eeprom(0,0x100);
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	71 e0       	ldi	r23, 0x01	; 1
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 28 04 	call	0x850	; 0x850 <dump_eeprom>
          dumped=1;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	9a 83       	std	Y+2, r25	; 0x02
 4de:	89 83       	std	Y+1, r24	; 0x01
  // clear the event log
  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc

  while(1) {
    // update the blink fsm every
    led_update();
 4e0:	eb cf       	rjmp	.-42     	; 0x4b8 <main+0x26>

000004e2 <read_vpd>:
struct vpd_struct vpd;
struct vpd_struct defaults = {"SER", "DaVonte", "Carter", "super1337", 0, {'D'&0xFE,'a','V','C','a','r'}, "USA", 0};

/********** private declarations **********/
/* read manufacturer data from eeprom */
void read_vpd() {
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
}
 4ea:	00 00       	nop
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <vpd_init>:

int cmp_str(const char *str1, const char *str2) ;


/********** public definitions **********/
void vpd_init() {
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	cd b7       	in	r28, 0x3d	; 61
 4f8:	de b7       	in	r29, 0x3e	; 62
  // wait for the eeprom to free up
  while(eeprom_isbusy());
 4fa:	00 00       	nop
 4fc:	0e 94 80 01 	call	0x300	; 0x300 <eeprom_isbusy>
 500:	89 2b       	or	r24, r25
 502:	e1 f7       	brne	.-8      	; 0x4fc <vpd_init+0xa>
  
  /* read all data from the EEPROM at address 0x000 */

  /* if the data was invalid then write defaults and try to reinitialize */
  while(!vpd_is_data_valid()) {
 504:	00 00       	nop
 506:	0e 94 93 02 	call	0x526	; 0x526 <vpd_is_data_valid>
 50a:	89 2b       	or	r24, r25
 50c:	e1 f3       	breq	.-8      	; 0x506 <vpd_init+0x14>
    // initialize data from defaults
    // read defaults
  }
}
 50e:	00 00       	nop
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <vpd_write_defaults>:

void vpd_write_defaults() {
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	cd b7       	in	r28, 0x3d	; 61
 51c:	de b7       	in	r29, 0x3e	; 62
  /* update checksum for defaults */
  
  /* write the defaults */


}
 51e:	00 00       	nop
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <vpd_is_data_valid>:

int vpd_is_data_valid() {
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(vpd.token, "SER");
 52e:	65 e7       	ldi	r22, 0x75	; 117
 530:	71 e0       	ldi	r23, 0x01	; 1
 532:	8b ea       	ldi	r24, 0xAB	; 171
 534:	93 e0       	ldi	r25, 0x03	; 3
 536:	0e 94 a0 02 	call	0x540	; 0x540 <cmp_str>
    // return (vpd.token == "SER") && is_checksum_valid();

}
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <cmp_str>:

/********** private definitions **********/

int cmp_str(const char *str1, const char *str2) {
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	00 d0       	rcall	.+0      	; 0x546 <cmp_str+0x6>
 546:	00 d0       	rcall	.+0      	; 0x548 <cmp_str+0x8>
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	9a 83       	std	Y+2, r25	; 0x02
 54e:	89 83       	std	Y+1, r24	; 0x01
 550:	7c 83       	std	Y+4, r23	; 0x04
 552:	6b 83       	std	Y+3, r22	; 0x03
  while (*str1 && *str2) {
 554:	17 c0       	rjmp	.+46     	; 0x584 <cmp_str+0x44>
    if (*str1 != *str2) {
 556:	89 81       	ldd	r24, Y+1	; 0x01
 558:	9a 81       	ldd	r25, Y+2	; 0x02
 55a:	fc 01       	movw	r30, r24
 55c:	20 81       	ld	r18, Z
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	9c 81       	ldd	r25, Y+4	; 0x04
 562:	fc 01       	movw	r30, r24
 564:	80 81       	ld	r24, Z
 566:	28 17       	cp	r18, r24
 568:	19 f0       	breq	.+6      	; 0x570 <cmp_str+0x30>
      return 0;
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	27 c0       	rjmp	.+78     	; 0x5be <cmp_str+0x7e>
    }
    str1++;
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	9a 81       	ldd	r25, Y+2	; 0x02
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	9a 83       	std	Y+2, r25	; 0x02
 578:	89 83       	std	Y+1, r24	; 0x01
    str2++;
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	9c 81       	ldd	r25, Y+4	; 0x04
 57e:	01 96       	adiw	r24, 0x01	; 1
 580:	9c 83       	std	Y+4, r25	; 0x04
 582:	8b 83       	std	Y+3, r24	; 0x03
}

/********** private definitions **********/

int cmp_str(const char *str1, const char *str2) {
  while (*str1 && *str2) {
 584:	89 81       	ldd	r24, Y+1	; 0x01
 586:	9a 81       	ldd	r25, Y+2	; 0x02
 588:	fc 01       	movw	r30, r24
 58a:	80 81       	ld	r24, Z
 58c:	88 23       	and	r24, r24
 58e:	31 f0       	breq	.+12     	; 0x59c <cmp_str+0x5c>
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	9c 81       	ldd	r25, Y+4	; 0x04
 594:	fc 01       	movw	r30, r24
 596:	80 81       	ld	r24, Z
 598:	88 23       	and	r24, r24
 59a:	e9 f6       	brne	.-70     	; 0x556 <cmp_str+0x16>
      return 0;
    }
    str1++;
    str2++;
  }
  return *str1 == '\0' && *str2 == '\0';
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	9a 81       	ldd	r25, Y+2	; 0x02
 5a0:	fc 01       	movw	r30, r24
 5a2:	80 81       	ld	r24, Z
 5a4:	88 23       	and	r24, r24
 5a6:	49 f4       	brne	.+18     	; 0x5ba <cmp_str+0x7a>
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	9c 81       	ldd	r25, Y+4	; 0x04
 5ac:	fc 01       	movw	r30, r24
 5ae:	80 81       	ld	r24, Z
 5b0:	88 23       	and	r24, r24
 5b2:	19 f4       	brne	.+6      	; 0x5ba <cmp_str+0x7a>
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <cmp_str+0x7e>
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <led_set_blink>:
 5cc:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <blink_msg+0x1>
 5d0:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <blink_msg>
 5d4:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <blink_pos+0x1>
 5d8:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <blink_pos>
 5dc:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <blink_state>
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 5e 05 	call	0xabc	; 0xabc <delay_set>
 5ec:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <led_off>

000005f0 <led_update>:
 5f0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <blink_msg>
 5f4:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <blink_msg+0x1>
 5f8:	89 2b       	or	r24, r25
 5fa:	09 f4       	brne	.+2      	; 0x5fe <led_update+0xe>
 5fc:	52 c0       	rjmp	.+164    	; 0x6a2 <led_update+0xb2>
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 45 05 	call	0xa8a	; 0xa8a <delay_isdone>
 606:	89 2b       	or	r24, r25
 608:	09 f4       	brne	.+2      	; 0x60c <led_update+0x1c>
 60a:	4b c0       	rjmp	.+150    	; 0x6a2 <led_update+0xb2>
 60c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <blink_state>
 610:	81 11       	cpse	r24, r1
 612:	34 c0       	rjmp	.+104    	; 0x67c <led_update+0x8c>
 614:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <blink_pos>
 618:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <blink_pos+0x1>
 61c:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <blink_msg>
 620:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <blink_msg+0x1>
 624:	e2 0f       	add	r30, r18
 626:	f3 1f       	adc	r31, r19
 628:	80 81       	ld	r24, Z
 62a:	80 32       	cpi	r24, 0x20	; 32
 62c:	e9 f0       	breq	.+58     	; 0x668 <led_update+0x78>
 62e:	3c f4       	brge	.+14     	; 0x63e <led_update+0x4e>
 630:	81 11       	cpse	r24, r1
 632:	1d c0       	rjmp	.+58     	; 0x66e <led_update+0x7e>
 634:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <blink_pos+0x1>
 638:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <blink_pos>
 63c:	08 95       	ret
 63e:	8d 32       	cpi	r24, 0x2D	; 45
 640:	39 f0       	breq	.+14     	; 0x650 <led_update+0x60>
 642:	8e 32       	cpi	r24, 0x2E	; 46
 644:	a1 f4       	brne	.+40     	; 0x66e <led_update+0x7e>
 646:	0e 94 55 03 	call	0x6aa	; 0x6aa <led_on>
 64a:	6a ef       	ldi	r22, 0xFA	; 250
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	04 c0       	rjmp	.+8      	; 0x658 <led_update+0x68>
 650:	0e 94 55 03 	call	0x6aa	; 0x6aa <led_on>
 654:	6e ee       	ldi	r22, 0xEE	; 238
 656:	72 e0       	ldi	r23, 0x02	; 2
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 5e 05 	call	0xabc	; 0xabc <delay_set>
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <blink_state>
 666:	08 95       	ret
 668:	68 ee       	ldi	r22, 0xE8	; 232
 66a:	73 e0       	ldi	r23, 0x03	; 3
 66c:	0b c0       	rjmp	.+22     	; 0x684 <led_update+0x94>
 66e:	2f 5f       	subi	r18, 0xFF	; 255
 670:	3f 4f       	sbci	r19, 0xFF	; 255
 672:	30 93 85 01 	sts	0x0185, r19	; 0x800185 <blink_pos+0x1>
 676:	20 93 84 01 	sts	0x0184, r18	; 0x800184 <blink_pos>
 67a:	08 95       	ret
 67c:	0e 94 57 03 	call	0x6ae	; 0x6ae <led_off>
 680:	64 e6       	ldi	r22, 0x64	; 100
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 5e 05 	call	0xabc	; 0xabc <delay_set>
 68c:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <blink_state>
 690:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <blink_pos>
 694:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <blink_pos+0x1>
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <blink_pos+0x1>
 69e:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <blink_pos>
 6a2:	08 95       	ret

000006a4 <led_init>:
 6a4:	21 9a       	sbi	0x04, 1	; 4
 6a6:	29 98       	cbi	0x05, 1	; 5
 6a8:	08 95       	ret

000006aa <led_on>:
 6aa:	29 9a       	sbi	0x05, 1	; 5
 6ac:	08 95       	ret

000006ae <led_off>:
 6ae:	29 98       	cbi	0x05, 1	; 5
 6b0:	08 95       	ret

000006b2 <led_is_on>:
 6b2:	85 b1       	in	r24, 0x05	; 5
 6b4:	86 95       	lsr	r24
 6b6:	81 70       	andi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	08 95       	ret

000006bc <uart_init>:
 6bc:	0e 94 88 05 	call	0xb10	; 0xb10 <serial_init>
 6c0:	78 94       	sei
 6c2:	08 95       	ret

000006c4 <uart_writechar>:
 6c4:	0c 94 20 06 	jmp	0xc40	; 0xc40 <serial_writechar>

000006c8 <uart_writestr>:
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	ec 01       	movw	r28, r24
 6ce:	89 91       	ld	r24, Y+
 6d0:	88 23       	and	r24, r24
 6d2:	19 f0       	breq	.+6      	; 0x6da <uart_writestr+0x12>
 6d4:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_writechar>
 6d8:	fa cf       	rjmp	.-12     	; 0x6ce <uart_writestr+0x6>
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <uart_writehex8>:
 6e0:	cf 93       	push	r28
 6e2:	c8 2f       	mov	r28, r24
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	24 e0       	ldi	r18, 0x04	; 4
 6e8:	95 95       	asr	r25
 6ea:	87 95       	ror	r24
 6ec:	2a 95       	dec	r18
 6ee:	e1 f7       	brne	.-8      	; 0x6e8 <uart_writehex8+0x8>
 6f0:	8a 30       	cpi	r24, 0x0A	; 10
 6f2:	10 f4       	brcc	.+4      	; 0x6f8 <uart_writehex8+0x18>
 6f4:	80 5d       	subi	r24, 0xD0	; 208
 6f6:	01 c0       	rjmp	.+2      	; 0x6fa <uart_writehex8+0x1a>
 6f8:	89 5c       	subi	r24, 0xC9	; 201
 6fa:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_writechar>
 6fe:	8c 2f       	mov	r24, r28
 700:	8f 70       	andi	r24, 0x0F	; 15
 702:	8a 30       	cpi	r24, 0x0A	; 10
 704:	10 f0       	brcs	.+4      	; 0x70a <uart_writehex8+0x2a>
 706:	89 5c       	subi	r24, 0xC9	; 201
 708:	01 c0       	rjmp	.+2      	; 0x70c <uart_writehex8+0x2c>
 70a:	80 5d       	subi	r24, 0xD0	; 208
 70c:	cf 91       	pop	r28
 70e:	0c 94 20 06 	jmp	0xc40	; 0xc40 <serial_writechar>

00000712 <uart_writehex16>:
 712:	cf 93       	push	r28
 714:	c8 2f       	mov	r28, r24
 716:	89 2f       	mov	r24, r25
 718:	0e 94 70 03 	call	0x6e0	; 0x6e0 <uart_writehex8>
 71c:	8c 2f       	mov	r24, r28
 71e:	cf 91       	pop	r28
 720:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <uart_writehex8>

00000724 <uart_writedec32>:
 724:	2f 92       	push	r2
 726:	3f 92       	push	r3
 728:	4f 92       	push	r4
 72a:	5f 92       	push	r5
 72c:	6f 92       	push	r6
 72e:	7f 92       	push	r7
 730:	8f 92       	push	r8
 732:	9f 92       	push	r9
 734:	af 92       	push	r10
 736:	bf 92       	push	r11
 738:	cf 92       	push	r12
 73a:	df 92       	push	r13
 73c:	ef 92       	push	r14
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	63 97       	sbiw	r28, 0x13	; 19
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
 758:	6b 01       	movw	r12, r22
 75a:	7c 01       	movw	r14, r24
 75c:	97 ff       	sbrs	r25, 7
 75e:	0d c0       	rjmp	.+26     	; 0x77a <uart_writedec32+0x56>
 760:	f0 94       	com	r15
 762:	e0 94       	com	r14
 764:	d0 94       	com	r13
 766:	c0 94       	com	r12
 768:	c1 1c       	adc	r12, r1
 76a:	d1 1c       	adc	r13, r1
 76c:	e1 1c       	adc	r14, r1
 76e:	f1 1c       	adc	r15, r1
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	9b 8b       	std	Y+19, r25	; 0x13
 776:	8a 8b       	std	Y+18, r24	; 0x12
 778:	02 c0       	rjmp	.+4      	; 0x77e <uart_writedec32+0x5a>
 77a:	1b 8a       	std	Y+19, r1	; 0x13
 77c:	1a 8a       	std	Y+18, r1	; 0x12
 77e:	fe 01       	movw	r30, r28
 780:	31 96       	adiw	r30, 0x01	; 1
 782:	5f 01       	movw	r10, r30
 784:	8e 01       	movw	r16, r28
 786:	05 5f       	subi	r16, 0xF5	; 245
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	f9 8b       	std	Y+17, r31	; 0x11
 78c:	e8 8b       	std	Y+16, r30	; 0x10
 78e:	66 24       	eor	r6, r6
 790:	63 94       	inc	r6
 792:	71 2c       	mov	r7, r1
 794:	81 2c       	mov	r8, r1
 796:	91 2c       	mov	r9, r1
 798:	aa e0       	ldi	r26, 0x0A	; 10
 79a:	b0 e0       	ldi	r27, 0x00	; 0
 79c:	93 01       	movw	r18, r6
 79e:	a4 01       	movw	r20, r8
 7a0:	0e 94 99 06 	call	0xd32	; 0xd32 <__muluhisi3>
 7a4:	1b 01       	movw	r2, r22
 7a6:	2c 01       	movw	r4, r24
 7a8:	c7 01       	movw	r24, r14
 7aa:	b6 01       	movw	r22, r12
 7ac:	91 01       	movw	r18, r2
 7ae:	a2 01       	movw	r20, r4
 7b0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__divmodsi4>
 7b4:	93 01       	movw	r18, r6
 7b6:	a4 01       	movw	r20, r8
 7b8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__divmodsi4>
 7bc:	e8 89       	ldd	r30, Y+16	; 0x10
 7be:	f9 89       	ldd	r31, Y+17	; 0x11
 7c0:	21 93       	st	Z+, r18
 7c2:	f9 8b       	std	Y+17, r31	; 0x11
 7c4:	e8 8b       	std	Y+16, r30	; 0x10
 7c6:	82 2f       	mov	r24, r18
 7c8:	22 0f       	add	r18, r18
 7ca:	99 0b       	sbc	r25, r25
 7cc:	aa 0b       	sbc	r26, r26
 7ce:	bb 0b       	sbc	r27, r27
 7d0:	c8 1a       	sub	r12, r24
 7d2:	d9 0a       	sbc	r13, r25
 7d4:	ea 0a       	sbc	r14, r26
 7d6:	fb 0a       	sbc	r15, r27
 7d8:	31 01       	movw	r6, r2
 7da:	42 01       	movw	r8, r4
 7dc:	0e 17       	cp	r16, r30
 7de:	1f 07       	cpc	r17, r31
 7e0:	d9 f6       	brne	.-74     	; 0x798 <uart_writedec32+0x74>
 7e2:	8a 89       	ldd	r24, Y+18	; 0x12
 7e4:	9b 89       	ldd	r25, Y+19	; 0x13
 7e6:	89 2b       	or	r24, r25
 7e8:	11 f0       	breq	.+4      	; 0x7ee <uart_writedec32+0xca>
 7ea:	8d e2       	ldi	r24, 0x2D	; 45
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <uart_writedec32+0xcc>
 7ee:	80 e2       	ldi	r24, 0x20	; 32
 7f0:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_writechar>
 7f4:	20 e0       	ldi	r18, 0x00	; 0
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	f8 01       	movw	r30, r16
 7fa:	82 91       	ld	r24, -Z
 7fc:	8f 01       	movw	r16, r30
 7fe:	81 11       	cpse	r24, r1
 800:	06 c0       	rjmp	.+12     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 802:	21 15       	cp	r18, r1
 804:	31 05       	cpc	r19, r1
 806:	19 f4       	brne	.+6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 808:	ea 15       	cp	r30, r10
 80a:	fb 05       	cpc	r31, r11
 80c:	29 f4       	brne	.+10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80e:	80 5d       	subi	r24, 0xD0	; 208
 810:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_writechar>
 814:	21 e0       	ldi	r18, 0x01	; 1
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	0a 15       	cp	r16, r10
 81a:	1b 05       	cpc	r17, r11
 81c:	69 f7       	brne	.-38     	; 0x7f8 <uart_writedec32+0xd4>
 81e:	63 96       	adiw	r28, 0x13	; 19
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	f8 94       	cli
 824:	de bf       	out	0x3e, r29	; 62
 826:	0f be       	out	0x3f, r0	; 63
 828:	cd bf       	out	0x3d, r28	; 61
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	ff 90       	pop	r15
 834:	ef 90       	pop	r14
 836:	df 90       	pop	r13
 838:	cf 90       	pop	r12
 83a:	bf 90       	pop	r11
 83c:	af 90       	pop	r10
 83e:	9f 90       	pop	r9
 840:	8f 90       	pop	r8
 842:	7f 90       	pop	r7
 844:	6f 90       	pop	r6
 846:	5f 90       	pop	r5
 848:	4f 90       	pop	r4
 84a:	3f 90       	pop	r3
 84c:	2f 90       	pop	r2
 84e:	08 95       	ret

00000850 <dump_eeprom>:
 850:	2f 92       	push	r2
 852:	3f 92       	push	r3
 854:	4f 92       	push	r4
 856:	5f 92       	push	r5
 858:	6f 92       	push	r6
 85a:	7f 92       	push	r7
 85c:	8f 92       	push	r8
 85e:	9f 92       	push	r9
 860:	af 92       	push	r10
 862:	bf 92       	push	r11
 864:	cf 92       	push	r12
 866:	df 92       	push	r13
 868:	ef 92       	push	r14
 86a:	ff 92       	push	r15
 86c:	0f 93       	push	r16
 86e:	1f 93       	push	r17
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	cd b7       	in	r28, 0x3d	; 61
 876:	de b7       	in	r29, 0x3e	; 62
 878:	64 97       	sbiw	r28, 0x14	; 20
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	f8 94       	cli
 87e:	de bf       	out	0x3e, r29	; 62
 880:	0f be       	out	0x3f, r0	; 63
 882:	cd bf       	out	0x3d, r28	; 61
 884:	8c 01       	movw	r16, r24
 886:	61 15       	cp	r22, r1
 888:	71 05       	cpc	r23, r1
 88a:	09 f4       	brne	.+2      	; 0x88e <dump_eeprom+0x3e>
 88c:	92 c0       	rjmp	.+292    	; 0x9b2 <__stack+0xb3>
 88e:	81 2c       	mov	r8, r1
 890:	91 2c       	mov	r9, r1
 892:	54 01       	movw	r10, r8
 894:	cb 01       	movw	r24, r22
 896:	a0 e0       	ldi	r26, 0x00	; 0
 898:	b0 e0       	ldi	r27, 0x00	; 0
 89a:	89 8b       	std	Y+17, r24	; 0x11
 89c:	9a 8b       	std	Y+18, r25	; 0x12
 89e:	ab 8b       	std	Y+19, r26	; 0x13
 8a0:	bc 8b       	std	Y+20, r27	; 0x14
 8a2:	de 01       	movw	r26, r28
 8a4:	11 96       	adiw	r26, 0x01	; 1
 8a6:	1d 01       	movw	r2, r26
 8a8:	89 89       	ldd	r24, Y+17	; 0x11
 8aa:	9a 89       	ldd	r25, Y+18	; 0x12
 8ac:	ab 89       	ldd	r26, Y+19	; 0x13
 8ae:	bc 89       	ldd	r27, Y+20	; 0x14
 8b0:	88 16       	cp	r8, r24
 8b2:	99 06       	cpc	r9, r25
 8b4:	aa 06       	cpc	r10, r26
 8b6:	bb 06       	cpc	r11, r27
 8b8:	08 f0       	brcs	.+2      	; 0x8bc <dump_eeprom+0x6c>
 8ba:	7b c0       	rjmp	.+246    	; 0x9b2 <__stack+0xb3>
 8bc:	81 2f       	mov	r24, r17
 8be:	0e 94 70 03 	call	0x6e0	; 0x6e0 <uart_writehex8>
 8c2:	80 2f       	mov	r24, r16
 8c4:	80 7f       	andi	r24, 0xF0	; 240
 8c6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <uart_writehex8>
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	0e 94 62 03 	call	0x6c4	; 0x6c4 <uart_writechar>
 8d0:	61 01       	movw	r12, r2
 8d2:	78 01       	movw	r14, r16
 8d4:	41 2c       	mov	r4, r1
 8d6:	51 2c       	mov	r5, r1
 8d8:	32 01       	movw	r6, r4
 8da:	41 e0       	ldi	r20, 0x01	; 1
 8dc:	b6 01       	movw	r22, r12
 8de:	c7 01       	movw	r24, r14
 8e0:	0e 94 2f 01 	call	0x25e	; 0x25e <eeprom_readbuf>
 8e4:	bf ef       	ldi	r27, 0xFF	; 255
 8e6:	eb 1a       	sub	r14, r27
 8e8:	fb 0a       	sbc	r15, r27
 8ea:	ef ef       	ldi	r30, 0xFF	; 255
 8ec:	4e 1a       	sub	r4, r30
 8ee:	5e 0a       	sbc	r5, r30
 8f0:	6e 0a       	sbc	r6, r30
 8f2:	7e 0a       	sbc	r7, r30
 8f4:	ff ef       	ldi	r31, 0xFF	; 255
 8f6:	8f 1a       	sub	r8, r31
 8f8:	9f 0a       	sbc	r9, r31
 8fa:	af 0a       	sbc	r10, r31
 8fc:	bf 0a       	sbc	r11, r31
 8fe:	89 89       	ldd	r24, Y+17	; 0x11
 900:	9a 89       	ldd	r25, Y+18	; 0x12
 902:	ab 89       	ldd	r26, Y+19	; 0x13
 904:	bc 89       	ldd	r27, Y+20	; 0x14
 906:	88 16       	cp	r8, r24
 908:	99 06       	cpc	r9, r25
 90a:	aa 06       	cpc	r10, r26
 90c:	bb 06       	cpc	r11, r27
 90e:	50 f0       	brcs	.+20     	; 0x924 <__stack+0x25>
 910:	68 01       	movw	r12, r16
 912:	9f e0       	ldi	r25, 0x0F	; 15
 914:	c9 22       	and	r12, r25
 916:	dd 24       	eor	r13, r13
 918:	00 e0       	ldi	r16, 0x00	; 0
 91a:	10 e0       	ldi	r17, 0x00	; 0
 91c:	32 01       	movw	r6, r4
 91e:	6c 0c       	add	r6, r12
 920:	7d 1c       	adc	r7, r13
 922:	09 c0       	rjmp	.+18     	; 0x936 <__stack+0x37>
 924:	af ef       	ldi	r26, 0xFF	; 255
 926:	ca 1a       	sub	r12, r26
 928:	da 0a       	sbc	r13, r26
 92a:	c7 01       	movw	r24, r14
 92c:	8f 70       	andi	r24, 0x0F	; 15
 92e:	99 27       	eor	r25, r25
 930:	89 2b       	or	r24, r25
 932:	99 f6       	brne	.-90     	; 0x8da <dump_eeprom+0x8a>
 934:	ed cf       	rjmp	.-38     	; 0x910 <__stack+0x11>
 936:	0c 15       	cp	r16, r12
 938:	1d 05       	cpc	r17, r13
 93a:	18 f0       	brcs	.+6      	; 0x942 <__stack+0x43>
 93c:	06 15       	cp	r16, r6
 93e:	17 05       	cpc	r17, r7
 940:	28 f0       	brcs	.+10     	; 0x94c <__stack+0x4d>
 942:	89 e7       	ldi	r24, 0x79	; 121
 944:	91 e0       	ldi	r25, 0x01	; 1
 946:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uart_writestr>
 94a:	0b c0       	rjmp	.+22     	; 0x962 <__stack+0x63>
 94c:	f8 01       	movw	r30, r16
 94e:	ec 19       	sub	r30, r12
 950:	fd 09       	sbc	r31, r13
 952:	e2 0d       	add	r30, r2
 954:	f3 1d       	adc	r31, r3
 956:	80 81       	ld	r24, Z
 958:	0e 94 70 03 	call	0x6e0	; 0x6e0 <uart_writehex8>
 95c:	80 e2       	ldi	r24, 0x20	; 32
 95e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <uart_writechar>
 962:	0f 5f       	subi	r16, 0xFF	; 255
 964:	1f 4f       	sbci	r17, 0xFF	; 255
 966:	00 31       	cpi	r16, 0x10	; 16
 968:	11 05       	cpc	r17, r1
 96a:	29 f7       	brne	.-54     	; 0x936 <__stack+0x37>
 96c:	00 e0       	ldi	r16, 0x00	; 0
 96e:	10 e0       	ldi	r17, 0x00	; 0
 970:	c0 16       	cp	r12, r16
 972:	d1 06       	cpc	r13, r17
 974:	31 f0       	breq	.+12     	; 0x982 <__stack+0x83>
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	0e 94 62 03 	call	0x6c4	; 0x6c4 <uart_writechar>
 97c:	0f 5f       	subi	r16, 0xFF	; 255
 97e:	1f 4f       	sbci	r17, 0xFF	; 255
 980:	f7 cf       	rjmp	.-18     	; 0x970 <__stack+0x71>
 982:	81 01       	movw	r16, r2
 984:	c8 01       	movw	r24, r16
 986:	82 19       	sub	r24, r2
 988:	93 09       	sbc	r25, r3
 98a:	84 15       	cp	r24, r4
 98c:	95 05       	cpc	r25, r5
 98e:	58 f4       	brcc	.+22     	; 0x9a6 <__stack+0xa7>
 990:	f8 01       	movw	r30, r16
 992:	81 91       	ld	r24, Z+
 994:	8f 01       	movw	r16, r30
 996:	90 ee       	ldi	r25, 0xE0	; 224
 998:	98 0f       	add	r25, r24
 99a:	90 36       	cpi	r25, 0x60	; 96
 99c:	08 f0       	brcs	.+2      	; 0x9a0 <__stack+0xa1>
 99e:	8e e2       	ldi	r24, 0x2E	; 46
 9a0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <uart_writechar>
 9a4:	ef cf       	rjmp	.-34     	; 0x984 <__stack+0x85>
 9a6:	8d e7       	ldi	r24, 0x7D	; 125
 9a8:	91 e0       	ldi	r25, 0x01	; 1
 9aa:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uart_writestr>
 9ae:	87 01       	movw	r16, r14
 9b0:	7b cf       	rjmp	.-266    	; 0x8a8 <dump_eeprom+0x58>
 9b2:	64 96       	adiw	r28, 0x14	; 20
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	f8 94       	cli
 9b8:	de bf       	out	0x3e, r29	; 62
 9ba:	0f be       	out	0x3f, r0	; 63
 9bc:	cd bf       	out	0x3d, r28	; 61
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	1f 91       	pop	r17
 9c4:	0f 91       	pop	r16
 9c6:	ff 90       	pop	r15
 9c8:	ef 90       	pop	r14
 9ca:	df 90       	pop	r13
 9cc:	cf 90       	pop	r12
 9ce:	bf 90       	pop	r11
 9d0:	af 90       	pop	r10
 9d2:	9f 90       	pop	r9
 9d4:	8f 90       	pop	r8
 9d6:	7f 90       	pop	r7
 9d8:	6f 90       	pop	r6
 9da:	5f 90       	pop	r5
 9dc:	4f 90       	pop	r4
 9de:	3f 90       	pop	r3
 9e0:	2f 90       	pop	r2
 9e2:	08 95       	ret

000009e4 <__vector_14>:
 9e4:	1f 92       	push	r1
 9e6:	0f 92       	push	r0
 9e8:	0f b6       	in	r0, 0x3f	; 63
 9ea:	0f 92       	push	r0
 9ec:	11 24       	eor	r1, r1
 9ee:	2f 93       	push	r18
 9f0:	3f 93       	push	r19
 9f2:	8f 93       	push	r24
 9f4:	9f 93       	push	r25
 9f6:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <delay_count>
 9fa:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <delay_count+0x1>
 9fe:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <delay_limit>
 a02:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <delay_limit+0x1>
 a06:	28 17       	cp	r18, r24
 a08:	39 07       	cpc	r19, r25
 a0a:	49 f0       	breq	.+18     	; 0xa1e <__vector_14+0x3a>
 a0c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <delay_count>
 a10:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <delay_count+0x1>
 a14:	01 96       	adiw	r24, 0x01	; 1
 a16:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <delay_count+0x1>
 a1a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <delay_count>
 a1e:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <delay_count+0x2>
 a22:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <delay_count+0x3>
 a26:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <delay_limit+0x2>
 a2a:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <delay_limit+0x3>
 a2e:	28 17       	cp	r18, r24
 a30:	39 07       	cpc	r19, r25
 a32:	49 f0       	breq	.+18     	; 0xa46 <__vector_14+0x62>
 a34:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <delay_count+0x2>
 a38:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <delay_count+0x3>
 a3c:	01 96       	adiw	r24, 0x01	; 1
 a3e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <delay_count+0x3>
 a42:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <delay_count+0x2>
 a46:	9f 91       	pop	r25
 a48:	8f 91       	pop	r24
 a4a:	3f 91       	pop	r19
 a4c:	2f 91       	pop	r18
 a4e:	0f 90       	pop	r0
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	0f 90       	pop	r0
 a54:	1f 90       	pop	r1
 a56:	18 95       	reti

00000a58 <delay_init>:
 a58:	89 ef       	ldi	r24, 0xF9	; 249
 a5a:	87 bd       	out	0x27, r24	; 39
 a5c:	82 e0       	ldi	r24, 0x02	; 2
 a5e:	84 bd       	out	0x24, r24	; 36
 a60:	93 e0       	ldi	r25, 0x03	; 3
 a62:	95 bd       	out	0x25, r25	; 37
 a64:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 a68:	08 95       	ret

00000a6a <delay_get>:
 a6a:	82 30       	cpi	r24, 0x02	; 2
 a6c:	91 05       	cpc	r25, r1
 a6e:	50 f4       	brcc	.+20     	; 0xa84 <delay_get+0x1a>
 a70:	f8 94       	cli
 a72:	88 0f       	add	r24, r24
 a74:	99 1f       	adc	r25, r25
 a76:	fc 01       	movw	r30, r24
 a78:	e4 57       	subi	r30, 0x74	; 116
 a7a:	fe 4f       	sbci	r31, 0xFE	; 254
 a7c:	80 81       	ld	r24, Z
 a7e:	91 81       	ldd	r25, Z+1	; 0x01
 a80:	78 94       	sei
 a82:	08 95       	ret
 a84:	80 e0       	ldi	r24, 0x00	; 0
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	08 95       	ret

00000a8a <delay_isdone>:
 a8a:	82 30       	cpi	r24, 0x02	; 2
 a8c:	91 05       	cpc	r25, r1
 a8e:	98 f4       	brcc	.+38     	; 0xab6 <delay_isdone+0x2c>
 a90:	88 0f       	add	r24, r24
 a92:	99 1f       	adc	r25, r25
 a94:	fc 01       	movw	r30, r24
 a96:	e4 57       	subi	r30, 0x74	; 116
 a98:	fe 4f       	sbci	r31, 0xFE	; 254
 a9a:	20 81       	ld	r18, Z
 a9c:	31 81       	ldd	r19, Z+1	; 0x01
 a9e:	fc 01       	movw	r30, r24
 aa0:	e8 57       	subi	r30, 0x78	; 120
 aa2:	fe 4f       	sbci	r31, 0xFE	; 254
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	40 81       	ld	r20, Z
 aaa:	51 81       	ldd	r21, Z+1	; 0x01
 aac:	42 17       	cp	r20, r18
 aae:	53 07       	cpc	r21, r19
 ab0:	21 f0       	breq	.+8      	; 0xaba <delay_isdone+0x30>
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	08 95       	ret
 ab6:	80 e0       	ldi	r24, 0x00	; 0
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	08 95       	ret

00000abc <delay_set>:
 abc:	0f 93       	push	r16
 abe:	1f 93       	push	r17
 ac0:	cf 93       	push	r28
 ac2:	df 93       	push	r29
 ac4:	ec 01       	movw	r28, r24
 ac6:	8b 01       	movw	r16, r22
 ac8:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <initialized.1590>
 acc:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <initialized.1590+0x1>
 ad0:	89 2b       	or	r24, r25
 ad2:	41 f4       	brne	.+16     	; 0xae4 <delay_set+0x28>
 ad4:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay_init>
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <initialized.1590+0x1>
 ae0:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <initialized.1590>
 ae4:	c2 30       	cpi	r28, 0x02	; 2
 ae6:	d1 05       	cpc	r29, r1
 ae8:	70 f4       	brcc	.+28     	; 0xb06 <delay_set+0x4a>
 aea:	8f b7       	in	r24, 0x3f	; 63
 aec:	f8 94       	cli
 aee:	cc 0f       	add	r28, r28
 af0:	dd 1f       	adc	r29, r29
 af2:	fe 01       	movw	r30, r28
 af4:	e8 57       	subi	r30, 0x78	; 120
 af6:	fe 4f       	sbci	r31, 0xFE	; 254
 af8:	11 83       	std	Z+1, r17	; 0x01
 afa:	00 83       	st	Z, r16
 afc:	c4 57       	subi	r28, 0x74	; 116
 afe:	de 4f       	sbci	r29, 0xFE	; 254
 b00:	19 82       	std	Y+1, r1	; 0x01
 b02:	18 82       	st	Y, r1
 b04:	8f bf       	out	0x3f, r24	; 63
 b06:	df 91       	pop	r29
 b08:	cf 91       	pop	r28
 b0a:	1f 91       	pop	r17
 b0c:	0f 91       	pop	r16
 b0e:	08 95       	ret

00000b10 <serial_init>:
 b10:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 b14:	87 e6       	ldi	r24, 0x67	; 103
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 b1c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 b20:	e1 ec       	ldi	r30, 0xC1	; 193
 b22:	f0 e0       	ldi	r31, 0x00	; 0
 b24:	88 e1       	ldi	r24, 0x18	; 24
 b26:	80 83       	st	Z, r24
 b28:	86 e0       	ldi	r24, 0x06	; 6
 b2a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 b2e:	80 81       	ld	r24, Z
 b30:	80 6a       	ori	r24, 0xA0	; 160
 b32:	80 83       	st	Z, r24
 b34:	08 95       	ret

00000b36 <__vector_18>:
 b36:	1f 92       	push	r1
 b38:	0f 92       	push	r0
 b3a:	0f b6       	in	r0, 0x3f	; 63
 b3c:	0f 92       	push	r0
 b3e:	11 24       	eor	r1, r1
 b40:	2f 93       	push	r18
 b42:	8f 93       	push	r24
 b44:	9f 93       	push	r25
 b46:	ef 93       	push	r30
 b48:	ff 93       	push	r31
 b4a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <rxtail>
 b4e:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <rxhead>
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	82 1b       	sub	r24, r18
 b56:	91 09       	sbc	r25, r1
 b58:	01 97       	sbiw	r24, 0x01	; 1
 b5a:	8f 73       	andi	r24, 0x3F	; 63
 b5c:	99 27       	eor	r25, r25
 b5e:	89 2b       	or	r24, r25
 b60:	79 f0       	breq	.+30     	; 0xb80 <__vector_18+0x4a>
 b62:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <rxhead>
 b66:	f0 e0       	ldi	r31, 0x00	; 0
 b68:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 b6c:	ee 51       	subi	r30, 0x1E	; 30
 b6e:	fc 4f       	sbci	r31, 0xFC	; 252
 b70:	80 83       	st	Z, r24
 b72:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <rxhead>
 b76:	8f 5f       	subi	r24, 0xFF	; 255
 b78:	8f 73       	andi	r24, 0x3F	; 63
 b7a:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <rxhead>
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <__vector_18+0x4e>
 b80:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 b84:	ff 91       	pop	r31
 b86:	ef 91       	pop	r30
 b88:	9f 91       	pop	r25
 b8a:	8f 91       	pop	r24
 b8c:	2f 91       	pop	r18
 b8e:	0f 90       	pop	r0
 b90:	0f be       	out	0x3f, r0	; 63
 b92:	0f 90       	pop	r0
 b94:	1f 90       	pop	r1
 b96:	18 95       	reti

00000b98 <__vector_19>:
 b98:	1f 92       	push	r1
 b9a:	0f 92       	push	r0
 b9c:	0f b6       	in	r0, 0x3f	; 63
 b9e:	0f 92       	push	r0
 ba0:	11 24       	eor	r1, r1
 ba2:	2f 93       	push	r18
 ba4:	8f 93       	push	r24
 ba6:	9f 93       	push	r25
 ba8:	ef 93       	push	r30
 baa:	ff 93       	push	r31
 bac:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <txhead>
 bb0:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <txtail>
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	82 1b       	sub	r24, r18
 bb8:	91 09       	sbc	r25, r1
 bba:	8f 73       	andi	r24, 0x3F	; 63
 bbc:	99 27       	eor	r25, r25
 bbe:	89 2b       	or	r24, r25
 bc0:	79 f0       	breq	.+30     	; 0xbe0 <__vector_19+0x48>
 bc2:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <txtail>
 bc6:	f0 e0       	ldi	r31, 0x00	; 0
 bc8:	ee 5d       	subi	r30, 0xDE	; 222
 bca:	fb 4f       	sbci	r31, 0xFB	; 251
 bcc:	80 81       	ld	r24, Z
 bce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 bd2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <txtail>
 bd6:	8f 5f       	subi	r24, 0xFF	; 255
 bd8:	8f 73       	andi	r24, 0x3F	; 63
 bda:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <txtail>
 bde:	05 c0       	rjmp	.+10     	; 0xbea <__vector_19+0x52>
 be0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 be4:	8f 7d       	andi	r24, 0xDF	; 223
 be6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 bea:	ff 91       	pop	r31
 bec:	ef 91       	pop	r30
 bee:	9f 91       	pop	r25
 bf0:	8f 91       	pop	r24
 bf2:	2f 91       	pop	r18
 bf4:	0f 90       	pop	r0
 bf6:	0f be       	out	0x3f, r0	; 63
 bf8:	0f 90       	pop	r0
 bfa:	1f 90       	pop	r1
 bfc:	18 95       	reti

00000bfe <serial_rxchars>:
 bfe:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <rxhead>
 c02:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <rxtail>
 c06:	89 1b       	sub	r24, r25
 c08:	8f 73       	andi	r24, 0x3F	; 63
 c0a:	08 95       	ret

00000c0c <serial_popchar>:
 c0c:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <rxhead>
 c10:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <rxtail>
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	82 1b       	sub	r24, r18
 c18:	91 09       	sbc	r25, r1
 c1a:	8f 73       	andi	r24, 0x3F	; 63
 c1c:	99 27       	eor	r25, r25
 c1e:	89 2b       	or	r24, r25
 c20:	69 f0       	breq	.+26     	; 0xc3c <serial_popchar+0x30>
 c22:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <rxtail>
 c26:	f0 e0       	ldi	r31, 0x00	; 0
 c28:	ee 51       	subi	r30, 0x1E	; 30
 c2a:	fc 4f       	sbci	r31, 0xFC	; 252
 c2c:	80 81       	ld	r24, Z
 c2e:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <rxtail>
 c32:	9f 5f       	subi	r25, 0xFF	; 255
 c34:	9f 73       	andi	r25, 0x3F	; 63
 c36:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <rxtail>
 c3a:	08 95       	ret
 c3c:	80 e0       	ldi	r24, 0x00	; 0
 c3e:	08 95       	ret

00000c40 <serial_writechar>:
 c40:	0f b6       	in	r0, 0x3f	; 63
 c42:	07 fe       	sbrs	r0, 7
 c44:	0e c0       	rjmp	.+28     	; 0xc62 <serial_writechar+0x22>
 c46:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <txtail>
 c4a:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <txhead>
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	29 1b       	sub	r18, r25
 c52:	31 09       	sbc	r19, r1
 c54:	21 50       	subi	r18, 0x01	; 1
 c56:	31 09       	sbc	r19, r1
 c58:	2f 73       	andi	r18, 0x3F	; 63
 c5a:	33 27       	eor	r19, r19
 c5c:	23 2b       	or	r18, r19
 c5e:	99 f3       	breq	.-26     	; 0xc46 <serial_writechar+0x6>
 c60:	0d c0       	rjmp	.+26     	; 0xc7c <serial_writechar+0x3c>
 c62:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <txtail>
 c66:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <txhead>
 c6a:	30 e0       	ldi	r19, 0x00	; 0
 c6c:	29 1b       	sub	r18, r25
 c6e:	31 09       	sbc	r19, r1
 c70:	21 50       	subi	r18, 0x01	; 1
 c72:	31 09       	sbc	r19, r1
 c74:	2f 73       	andi	r18, 0x3F	; 63
 c76:	33 27       	eor	r19, r19
 c78:	23 2b       	or	r18, r19
 c7a:	61 f0       	breq	.+24     	; 0xc94 <serial_writechar+0x54>
 c7c:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <txhead>
 c80:	f0 e0       	ldi	r31, 0x00	; 0
 c82:	ee 5d       	subi	r30, 0xDE	; 222
 c84:	fb 4f       	sbci	r31, 0xFB	; 251
 c86:	80 83       	st	Z, r24
 c88:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <txhead>
 c8c:	8f 5f       	subi	r24, 0xFF	; 255
 c8e:	8f 73       	andi	r24, 0x3F	; 63
 c90:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <txhead>
 c94:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 c98:	80 62       	ori	r24, 0x20	; 32
 c9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 c9e:	08 95       	ret

00000ca0 <serial_writestr>:
 ca0:	1f 93       	push	r17
 ca2:	cf 93       	push	r28
 ca4:	df 93       	push	r29
 ca6:	ec 01       	movw	r28, r24
 ca8:	80 e0       	ldi	r24, 0x00	; 0
 caa:	11 e0       	ldi	r17, 0x01	; 1
 cac:	18 0f       	add	r17, r24
 cae:	fe 01       	movw	r30, r28
 cb0:	e8 0f       	add	r30, r24
 cb2:	f1 1d       	adc	r31, r1
 cb4:	80 81       	ld	r24, Z
 cb6:	88 23       	and	r24, r24
 cb8:	21 f0       	breq	.+8      	; 0xcc2 <serial_writestr+0x22>
 cba:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_writechar>
 cbe:	81 2f       	mov	r24, r17
 cc0:	f4 cf       	rjmp	.-24     	; 0xcaa <serial_writestr+0xa>
 cc2:	df 91       	pop	r29
 cc4:	cf 91       	pop	r28
 cc6:	1f 91       	pop	r17
 cc8:	08 95       	ret

00000cca <serial_writestr_P>:
 cca:	1f 93       	push	r17
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
 cd0:	ec 01       	movw	r28, r24
 cd2:	80 e0       	ldi	r24, 0x00	; 0
 cd4:	11 e0       	ldi	r17, 0x01	; 1
 cd6:	18 0f       	add	r17, r24
 cd8:	fe 01       	movw	r30, r28
 cda:	e8 0f       	add	r30, r24
 cdc:	f1 1d       	adc	r31, r1
 cde:	84 91       	lpm	r24, Z
 ce0:	88 23       	and	r24, r24
 ce2:	21 f0       	breq	.+8      	; 0xcec <serial_writestr_P+0x22>
 ce4:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_writechar>
 ce8:	81 2f       	mov	r24, r17
 cea:	f4 cf       	rjmp	.-24     	; 0xcd4 <serial_writestr_P+0xa>
 cec:	df 91       	pop	r29
 cee:	cf 91       	pop	r28
 cf0:	1f 91       	pop	r17
 cf2:	08 95       	ret

00000cf4 <__divmodsi4>:
 cf4:	05 2e       	mov	r0, r21
 cf6:	97 fb       	bst	r25, 7
 cf8:	1e f4       	brtc	.+6      	; 0xd00 <__divmodsi4+0xc>
 cfa:	00 94       	com	r0
 cfc:	0e 94 91 06 	call	0xd22	; 0xd22 <__negsi2>
 d00:	57 fd       	sbrc	r21, 7
 d02:	07 d0       	rcall	.+14     	; 0xd12 <__divmodsi4_neg2>
 d04:	0e 94 a4 06 	call	0xd48	; 0xd48 <__udivmodsi4>
 d08:	07 fc       	sbrc	r0, 7
 d0a:	03 d0       	rcall	.+6      	; 0xd12 <__divmodsi4_neg2>
 d0c:	4e f4       	brtc	.+18     	; 0xd20 <__divmodsi4_exit>
 d0e:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__negsi2>

00000d12 <__divmodsi4_neg2>:
 d12:	50 95       	com	r21
 d14:	40 95       	com	r20
 d16:	30 95       	com	r19
 d18:	21 95       	neg	r18
 d1a:	3f 4f       	sbci	r19, 0xFF	; 255
 d1c:	4f 4f       	sbci	r20, 0xFF	; 255
 d1e:	5f 4f       	sbci	r21, 0xFF	; 255

00000d20 <__divmodsi4_exit>:
 d20:	08 95       	ret

00000d22 <__negsi2>:
 d22:	90 95       	com	r25
 d24:	80 95       	com	r24
 d26:	70 95       	com	r23
 d28:	61 95       	neg	r22
 d2a:	7f 4f       	sbci	r23, 0xFF	; 255
 d2c:	8f 4f       	sbci	r24, 0xFF	; 255
 d2e:	9f 4f       	sbci	r25, 0xFF	; 255
 d30:	08 95       	ret

00000d32 <__muluhisi3>:
 d32:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__umulhisi3>
 d36:	a5 9f       	mul	r26, r21
 d38:	90 0d       	add	r25, r0
 d3a:	b4 9f       	mul	r27, r20
 d3c:	90 0d       	add	r25, r0
 d3e:	a4 9f       	mul	r26, r20
 d40:	80 0d       	add	r24, r0
 d42:	91 1d       	adc	r25, r1
 d44:	11 24       	eor	r1, r1
 d46:	08 95       	ret

00000d48 <__udivmodsi4>:
 d48:	a1 e2       	ldi	r26, 0x21	; 33
 d4a:	1a 2e       	mov	r1, r26
 d4c:	aa 1b       	sub	r26, r26
 d4e:	bb 1b       	sub	r27, r27
 d50:	fd 01       	movw	r30, r26
 d52:	0d c0       	rjmp	.+26     	; 0xd6e <__udivmodsi4_ep>

00000d54 <__udivmodsi4_loop>:
 d54:	aa 1f       	adc	r26, r26
 d56:	bb 1f       	adc	r27, r27
 d58:	ee 1f       	adc	r30, r30
 d5a:	ff 1f       	adc	r31, r31
 d5c:	a2 17       	cp	r26, r18
 d5e:	b3 07       	cpc	r27, r19
 d60:	e4 07       	cpc	r30, r20
 d62:	f5 07       	cpc	r31, r21
 d64:	20 f0       	brcs	.+8      	; 0xd6e <__udivmodsi4_ep>
 d66:	a2 1b       	sub	r26, r18
 d68:	b3 0b       	sbc	r27, r19
 d6a:	e4 0b       	sbc	r30, r20
 d6c:	f5 0b       	sbc	r31, r21

00000d6e <__udivmodsi4_ep>:
 d6e:	66 1f       	adc	r22, r22
 d70:	77 1f       	adc	r23, r23
 d72:	88 1f       	adc	r24, r24
 d74:	99 1f       	adc	r25, r25
 d76:	1a 94       	dec	r1
 d78:	69 f7       	brne	.-38     	; 0xd54 <__udivmodsi4_loop>
 d7a:	60 95       	com	r22
 d7c:	70 95       	com	r23
 d7e:	80 95       	com	r24
 d80:	90 95       	com	r25
 d82:	9b 01       	movw	r18, r22
 d84:	ac 01       	movw	r20, r24
 d86:	bd 01       	movw	r22, r26
 d88:	cf 01       	movw	r24, r30
 d8a:	08 95       	ret

00000d8c <__umulhisi3>:
 d8c:	a2 9f       	mul	r26, r18
 d8e:	b0 01       	movw	r22, r0
 d90:	b3 9f       	mul	r27, r19
 d92:	c0 01       	movw	r24, r0
 d94:	a3 9f       	mul	r26, r19
 d96:	70 0d       	add	r23, r0
 d98:	81 1d       	adc	r24, r1
 d9a:	11 24       	eor	r1, r1
 d9c:	91 1d       	adc	r25, r1
 d9e:	b2 9f       	mul	r27, r18
 da0:	70 0d       	add	r23, r0
 da2:	81 1d       	adc	r24, r1
 da4:	11 24       	eor	r1, r1
 da6:	91 1d       	adc	r25, r1
 da8:	08 95       	ret

00000daa <_exit>:
 daa:	f8 94       	cli

00000dac <__stop_program>:
 dac:	ff cf       	rjmp	.-2      	; 0xdac <__stop_program>
