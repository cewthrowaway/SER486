
bin/Debug/Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000d8a  00000e1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00000d62  00000d62  00000df6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e2  00800180  00800180  00000e9e  2**0
                  ALLOC
  4 .stab         00001878  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000e7e  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  00003596  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035b8  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0000418e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  000041a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 cc 04 	jmp	0x998	; 0x998 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 75 05 	jmp	0xaea	; 0xaea <__vector_18>
  4c:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a0 e8       	ldi	r26, 0x80	; 128
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 23 02 	call	0x446	; 0x446 <main>
  9e:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
/*********** Private declarations ***********/
int is_data_valid();
void write_defaults();

/*********** Public definitions ***********/
void config_init() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  /* while the data is not valid */

  /* write defaults */
  /* init config with defaults */
  /* clear the modified flag */
}
  ae:	00 00       	nop
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <config_update>:
void config_update() {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  /* if eeprom is busy or !modified just return */

  /* update the checksum */
  /* write config to eeprom */
  /* clear the modified flag */
}
  be:	00 00       	nop
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <config_set_modified>:
void config_set_modified() {
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  config_modified = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
}
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <is_data_valid>:


/*********** Private definitions ***********/
int is_data_valid() {
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  // todo 
  return 0;
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <write_defaults>:
void write_defaults() {
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  /* upate_checksum() for defaults*/

  /* write defaults to eeprom */
  f6:	00 00       	nop
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <eeprom_unlock>:
* Changes ...
*/
void eeprom_unlock()
{
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
  fe:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
 100:	f9 9a       	sbi	0x1f, 1	; 31
}
 102:	08 95       	ret

00000104 <__vector__23>:

/* Enabled when writebuf() places new data in the write buffer, this ISR sends
 * one byte at a time to the EEPROM. When the last byte is sent, it disables
 * futher EERPOM interrupts */
/* should this bee vector 22 or 23?? Documents say 23 for EE ready */
void __vector__23(){
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
  // if (EECR & (1<<EEPE)) { return; } /* not ready. Don't block */

  /* if you haven't written all characters in then keep writing */
  /* should we check to see if it is ready to write? */
  if (bufidx < writesize) {
 10c:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <bufidx>
 110:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <writesize>
 114:	98 17       	cp	r25, r24
 116:	28 f5       	brcc	.+74     	; 0x162 <__vector__23+0x5e>
    /* set low byte */
    EEARL = writeaddr & 0xFF; 
 118:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <writeaddr>
 11c:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <writeaddr+0x1>
 120:	81 e4       	ldi	r24, 0x41	; 65
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
    /* set high byte */
    EEARH = (writeaddr >> 8) & 0xFF;
 128:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <writeaddr>
 12c:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <writeaddr+0x1>
 130:	29 2f       	mov	r18, r25
 132:	33 27       	eor	r19, r19
 134:	82 e4       	ldi	r24, 0x42	; 66
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
    EEDR = writebuf[bufidx++];
 13c:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <bufidx>
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	98 0f       	add	r25, r24
 144:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <bufidx>
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	80 e4       	ldi	r24, 0x40	; 64
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	26 55       	subi	r18, 0x56	; 86
 152:	3e 4f       	sbci	r19, 0xFE	; 254
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
    eeprom_unlock();
 15c:	0e 94 7f 00 	call	0xfe	; 0xfe <eeprom_unlock>
    /* disable interrupts */
    disable_interrupt();
    /* make ready to write another */
    write_busy = 0;
  }
}
 160:	04 c0       	rjmp	.+8      	; 0x16a <__vector__23+0x66>
    eeprom_unlock();
  }
  else {

    /* disable interrupts */
    disable_interrupt();
 162:	0e 94 8a 01 	call	0x314	; 0x314 <disable_interrupt>
    /* make ready to write another */
    write_busy = 0;
 166:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <write_busy>
  }
}
 16a:	00 00       	nop
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <eeprom_writebuf>:

/* this function places the data (specified buf and size) into the write buffer
 * for later writing to the EEPROM. The addr parameter specifies the location to
 * write the data to. */
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf, unsigned char size) {
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	00 d0       	rcall	.+0      	; 0x178 <eeprom_writebuf+0x6>
 178:	00 d0       	rcall	.+0      	; 0x17a <eeprom_writebuf+0x8>
 17a:	00 d0       	rcall	.+0      	; 0x17c <eeprom_writebuf+0xa>
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	9b 83       	std	Y+3, r25	; 0x03
 182:	8a 83       	std	Y+2, r24	; 0x02
 184:	7d 83       	std	Y+5, r23	; 0x05
 186:	6c 83       	std	Y+4, r22	; 0x04
 188:	4e 83       	std	Y+6, r20	; 0x06
  // check that write_busy is 0
  if (write_busy > 0) {
 18a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <write_busy>
 18e:	88 23       	and	r24, r24
 190:	b9 f5       	brne	.+110    	; 0x200 <eeprom_writebuf+0x8e>
    return;
  }
  if (size > 64) {
 192:	8e 81       	ldd	r24, Y+6	; 0x06
 194:	81 34       	cpi	r24, 0x41	; 65
 196:	b0 f5       	brcc	.+108    	; 0x204 <eeprom_writebuf+0x92>
    return;
  }
  if ((addr + size) > 0x3FF) {
 198:	8e 81       	ldd	r24, Y+6	; 0x06
 19a:	28 2f       	mov	r18, r24
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	9b 81       	ldd	r25, Y+3	; 0x03
 1a2:	82 0f       	add	r24, r18
 1a4:	93 1f       	adc	r25, r19
 1a6:	81 15       	cp	r24, r1
 1a8:	94 40       	sbci	r25, 0x04	; 4
 1aa:	70 f5       	brcc	.+92     	; 0x208 <eeprom_writebuf+0x96>
    return;
  }
  /* the EEPROM is now writing */
  write_busy = 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <write_busy>
  /* change the write address */
  writeaddr = addr;
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	9b 81       	ldd	r25, Y+3	; 0x03
 1b6:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <writeaddr+0x1>
 1ba:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <writeaddr>
  /* start reading from the beginning of the buffer */
  bufidx = 0;
 1be:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <bufidx>

  /* copy buf to writebuf and configure writesize */
  for(unsigned char i = 0; i < size; i++) {
 1c2:	19 82       	std	Y+1, r1	; 0x01
 1c4:	13 c0       	rjmp	.+38     	; 0x1ec <eeprom_writebuf+0x7a>
    writebuf[i] = buf[i];
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	88 2f       	mov	r24, r24
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	2c 81       	ldd	r18, Y+4	; 0x04
 1ce:	3d 81       	ldd	r19, Y+5	; 0x05
 1d0:	28 0f       	add	r18, r24
 1d2:	39 1f       	adc	r19, r25
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	20 81       	ld	r18, Z
 1de:	86 55       	subi	r24, 0x56	; 86
 1e0:	9e 4f       	sbci	r25, 0xFE	; 254
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
  writeaddr = addr;
  /* start reading from the beginning of the buffer */
  bufidx = 0;

  /* copy buf to writebuf and configure writesize */
  for(unsigned char i = 0; i < size; i++) {
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	99 81       	ldd	r25, Y+1	; 0x01
 1ee:	8e 81       	ldd	r24, Y+6	; 0x06
 1f0:	98 17       	cp	r25, r24
 1f2:	48 f3       	brcs	.-46     	; 0x1c6 <eeprom_writebuf+0x54>
    writebuf[i] = buf[i];
  }

  writesize = size;
 1f4:	8e 81       	ldd	r24, Y+6	; 0x06
 1f6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <writesize>

  
  /* enable the EEPROM ready interrupts */
  enable_interrupt();
 1fa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <enable_interrupt>
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <eeprom_writebuf+0x98>
 * write the data to. */
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf, unsigned char size) {
  // check that write_busy is 0
  if (write_busy > 0) {
    return;
 200:	00 00       	nop
 202:	03 c0       	rjmp	.+6      	; 0x20a <eeprom_writebuf+0x98>
  }
  if (size > 64) {
    return;
 204:	00 00       	nop
 206:	01 c0       	rjmp	.+2      	; 0x20a <eeprom_writebuf+0x98>
  }
  if ((addr + size) > 0x3FF) {
    return;
 208:	00 00       	nop
  writesize = size;

  
  /* enable the EEPROM ready interrupts */
  enable_interrupt();
}
 20a:	26 96       	adiw	r28, 0x06	; 6
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <eeprom_readbuf>:

/* this function reads a specified amount of data(size) from the EEPROM starting
 * at a specified address(addr) and places it in the specified buffer(buf) */
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	00 d0       	rcall	.+0      	; 0x222 <eeprom_readbuf+0x6>
 222:	00 d0       	rcall	.+0      	; 0x224 <eeprom_readbuf+0x8>
 224:	00 d0       	rcall	.+0      	; 0x226 <eeprom_readbuf+0xa>
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	9b 83       	std	Y+3, r25	; 0x03
 22c:	8a 83       	std	Y+2, r24	; 0x02
 22e:	7d 83       	std	Y+5, r23	; 0x05
 230:	6c 83       	std	Y+4, r22	; 0x04
 232:	4e 83       	std	Y+6, r20	; 0x06

  // check that write_busy is 0
  if (write_busy > 0) {
 234:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <write_busy>
 238:	88 23       	and	r24, r24
 23a:	a9 f5       	brne	.+106    	; 0x2a6 <eeprom_readbuf+0x8a>
    // write to the console
    return;
  }
  if (size > 64) {
 23c:	8e 81       	ldd	r24, Y+6	; 0x06
 23e:	81 34       	cpi	r24, 0x41	; 65
 240:	a0 f5       	brcc	.+104    	; 0x2aa <eeprom_readbuf+0x8e>
    /* write error. buffer is too big */
    return;
  }

  for (unsigned char i = 0; i < size; i++) {
 242:	19 82       	std	Y+1, r1	; 0x01
 244:	2b c0       	rjmp	.+86     	; 0x29c <eeprom_readbuf+0x80>
    /* set the address */
    /* set low byte */
    EEARL = addr & 0xFF; 
 246:	81 e4       	ldi	r24, 0x41	; 65
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2a 81       	ldd	r18, Y+2	; 0x02
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18

    /* set high byte */
    EEARH = (addr >> 8) & 0xFF;
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	9b 81       	ldd	r25, Y+3	; 0x03
 254:	29 2f       	mov	r18, r25
 256:	33 27       	eor	r19, r19
 258:	82 e4       	ldi	r24, 0x42	; 66
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18

    /* set mode to read */
    EECR |= (1<<EERE);
 260:	8f e3       	ldi	r24, 0x3F	; 63
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fc 01       	movw	r30, r24
 266:	20 81       	ld	r18, Z
 268:	8f e3       	ldi	r24, 0x3F	; 63
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	21 60       	ori	r18, 0x01	; 1
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18
    /* write from register to buffer */
    buf[i] = EEDR;
 272:	20 e4       	ldi	r18, 0x40	; 64
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	88 2f       	mov	r24, r24
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	4c 81       	ldd	r20, Y+4	; 0x04
 27e:	5d 81       	ldd	r21, Y+5	; 0x05
 280:	84 0f       	add	r24, r20
 282:	95 1f       	adc	r25, r21
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18

    addr++;
 28c:	8a 81       	ldd	r24, Y+2	; 0x02
 28e:	9b 81       	ldd	r25, Y+3	; 0x03
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	9b 83       	std	Y+3, r25	; 0x03
 294:	8a 83       	std	Y+2, r24	; 0x02
  if (size > 64) {
    /* write error. buffer is too big */
    return;
  }

  for (unsigned char i = 0; i < size; i++) {
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	99 81       	ldd	r25, Y+1	; 0x01
 29e:	8e 81       	ldd	r24, Y+6	; 0x06
 2a0:	98 17       	cp	r25, r24
 2a2:	88 f2       	brcs	.-94     	; 0x246 <eeprom_readbuf+0x2a>
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <eeprom_readbuf+0x90>
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {

  // check that write_busy is 0
  if (write_busy > 0) {
    // write to the console
    return;
 2a6:	00 00       	nop
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <eeprom_readbuf+0x90>
  }
  if (size > 64) {
    /* write error. buffer is too big */
    return;
 2aa:	00 00       	nop
    buf[i] = EEDR;

    addr++;
  }
  
}
 2ac:	26 96       	adiw	r28, 0x06	; 6
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <eeprom_isbusy>:

/* this functiosn returns 0 if write_busy is 0, otherwise, returns 1 */
int eeprom_isbusy() { 
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <eeprom_isbusy+0x6>
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
  int status;
  disable_interrupt();
 2c8:	0e 94 8a 01 	call	0x314	; 0x314 <disable_interrupt>
  status = write_busy == 1;
 2cc:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <write_busy>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	91 30       	cpi	r25, 0x01	; 1
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <eeprom_isbusy+0x1a>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	88 2f       	mov	r24, r24
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	9a 83       	std	Y+2, r25	; 0x02
 2de:	89 83       	std	Y+1, r24	; 0x01
  enable_interrupt();
 2e0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <enable_interrupt>
  return status;
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <enable_interrupt>:

void enable_interrupt() {
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
  EECR |= (1<<EERIE);
 2fa:	8f e3       	ldi	r24, 0x3F	; 63
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	fc 01       	movw	r30, r24
 300:	20 81       	ld	r18, Z
 302:	8f e3       	ldi	r24, 0x3F	; 63
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	28 60       	ori	r18, 0x08	; 8
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
}
 30c:	00 00       	nop
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <disable_interrupt>:

void disable_interrupt() {
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
  EECR &= ~(1<<EERIE);
 31c:	8f e3       	ldi	r24, 0x3F	; 63
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	fc 01       	movw	r30, r24
 322:	20 81       	ld	r18, Z
 324:	8f e3       	ldi	r24, 0x3F	; 63
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	27 7f       	andi	r18, 0xF7	; 247
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
}
 32e:	00 00       	nop
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <test_eeprom_uart>:
#include "eeprom.h"
#include "led.h"
#include "util.h"


void test_eeprom_uart() {
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	c5 54       	subi	r28, 0x45	; 69
 340:	d1 09       	sbc	r29, r1
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
    // Define test data
    const char *test_string = "Hello, EEPROM!";
 34c:	89 e4       	ldi	r24, 0x49	; 73
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	9b 83       	std	Y+3, r25	; 0x03
 352:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char write_buffer[32];  // Use a buffer sized for the actual test string
    unsigned char read_buffer[32];   // Separate buffer for reading
    unsigned int test_address = 0x00; // Example EEPROM start address
 354:	1d 82       	std	Y+5, r1	; 0x05
 356:	1c 82       	std	Y+4, r1	; 0x04
    unsigned char test_size = 0;
 358:	19 82       	std	Y+1, r1	; 0x01

    // Manually copy test_string into write_buffer
    for (test_size = 0; test_string[test_size] != '\0'; test_size++) {
 35a:	19 82       	std	Y+1, r1	; 0x01
 35c:	17 c0       	rjmp	.+46     	; 0x38c <test_eeprom_uart+0x56>
        write_buffer[test_size] = test_string[test_size];
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	88 2f       	mov	r24, r24
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	2a 81       	ldd	r18, Y+2	; 0x02
 366:	3b 81       	ldd	r19, Y+3	; 0x03
 368:	82 0f       	add	r24, r18
 36a:	93 1f       	adc	r25, r19
 36c:	fc 01       	movw	r30, r24
 36e:	20 81       	ld	r18, Z
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	88 2f       	mov	r24, r24
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	42 2f       	mov	r20, r18
 378:	9e 01       	movw	r18, r28
 37a:	2a 5f       	subi	r18, 0xFA	; 250
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
 382:	fc 01       	movw	r30, r24
 384:	40 83       	st	Z, r20
    unsigned char read_buffer[32];   // Separate buffer for reading
    unsigned int test_address = 0x00; // Example EEPROM start address
    unsigned char test_size = 0;

    // Manually copy test_string into write_buffer
    for (test_size = 0; test_string[test_size] != '\0'; test_size++) {
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	8f 5f       	subi	r24, 0xFF	; 255
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	88 2f       	mov	r24, r24
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	2a 81       	ldd	r18, Y+2	; 0x02
 394:	3b 81       	ldd	r19, Y+3	; 0x03
 396:	82 0f       	add	r24, r18
 398:	93 1f       	adc	r25, r19
 39a:	fc 01       	movw	r30, r24
 39c:	80 81       	ld	r24, Z
 39e:	88 23       	and	r24, r24
 3a0:	f1 f6       	brne	.-68     	; 0x35e <test_eeprom_uart+0x28>
        write_buffer[test_size] = test_string[test_size];
    }
    write_buffer[test_size] = '\0';  // Include null terminator
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	88 2f       	mov	r24, r24
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	9e 01       	movw	r18, r28
 3aa:	2a 5f       	subi	r18, 0xFA	; 250
 3ac:	3f 4f       	sbci	r19, 0xFF	; 255
 3ae:	82 0f       	add	r24, r18
 3b0:	93 1f       	adc	r25, r19
 3b2:	fc 01       	movw	r30, r24
 3b4:	10 82       	st	Z, r1
    test_size++;  // Add 1 for the null terminator
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	89 83       	std	Y+1, r24	; 0x01

    // Write test data to EEPROM
    eeprom_writebuf(test_address, write_buffer, test_size);
 3bc:	9e 01       	movw	r18, r28
 3be:	2a 5f       	subi	r18, 0xFA	; 250
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	8c 81       	ldd	r24, Y+4	; 0x04
 3c4:	9d 81       	ldd	r25, Y+5	; 0x05
 3c6:	49 81       	ldd	r20, Y+1	; 0x01
 3c8:	b9 01       	movw	r22, r18
 3ca:	0e 94 b9 00 	call	0x172	; 0x172 <eeprom_writebuf>
    // while (eeprom_isbusy()) {
    //     // Simulated EEPROM ISR writes data
    // }

    // Read data back from EEPROM
    eeprom_readbuf(test_address, read_buffer, test_size);
 3ce:	9e 01       	movw	r18, r28
 3d0:	2a 5d       	subi	r18, 0xDA	; 218
 3d2:	3f 4f       	sbci	r19, 0xFF	; 255
 3d4:	8c 81       	ldd	r24, Y+4	; 0x04
 3d6:	9d 81       	ldd	r25, Y+5	; 0x05
 3d8:	49 81       	ldd	r20, Y+1	; 0x01
 3da:	b9 01       	movw	r22, r18
 3dc:	0e 94 0e 01 	call	0x21c	; 0x21c <eeprom_readbuf>

    // Null-terminate the read buffer for safety
    read_buffer[test_size - 1] = '\0';
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	9e 01       	movw	r18, r28
 3ea:	2a 5d       	subi	r18, 0xDA	; 218
 3ec:	3f 4f       	sbci	r19, 0xFF	; 255
 3ee:	82 0f       	add	r24, r18
 3f0:	93 1f       	adc	r25, r19
 3f2:	fc 01       	movw	r30, r24
 3f4:	10 82       	st	Z, r1

    // Output the read data via UART
    uart_writestr("Read from EEPROM: ");
 3f6:	88 e5       	ldi	r24, 0x58	; 88
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 3e 03 	call	0x67c	; 0x67c <uart_writestr>
    uart_writestr((char *)read_buffer);
 3fe:	ce 01       	movw	r24, r28
 400:	86 96       	adiw	r24, 0x26	; 38
 402:	0e 94 3e 03 	call	0x67c	; 0x67c <uart_writestr>
    uart_writestr("\n");
 406:	8b e6       	ldi	r24, 0x6B	; 107
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	0e 94 3e 03 	call	0x67c	; 0x67c <uart_writestr>
}
 40e:	00 00       	nop
 410:	cb 5b       	subi	r28, 0xBB	; 187
 412:	df 4f       	sbci	r29, 0xFF	; 255
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <enable_global_interrupts>:

#define SREG (*(volatile unsigned char *)0x5F)
#define I_BIT 7

void enable_global_interrupts() {
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
    SREG |= (1 << I_BIT);  // Set the I bit to enable interrupts
 42c:	8f e5       	ldi	r24, 0x5F	; 95
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	fc 01       	movw	r30, r24
 432:	20 81       	ld	r18, Z
 434:	8f e5       	ldi	r24, 0x5F	; 95
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	20 68       	ori	r18, 0x80	; 128
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18
}
 43e:	00 00       	nop
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <main>:

int main() {
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	00 d0       	rcall	.+0      	; 0x44c <main+0x6>
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
  enable_global_interrupts();
 450:	0e 94 12 02 	call	0x424	; 0x424 <enable_global_interrupts>
  // variable to track if the eeprom has been dumped
  int dumped = 0;
 454:	1a 82       	std	Y+2, r1	; 0x02
 456:	19 82       	std	Y+1, r1	; 0x01
  test_eeprom_uart();
 458:	0e 94 9b 01 	call	0x336	; 0x336 <test_eeprom_uart>
  // init uart
  uart_init();
 45c:	0e 94 38 03 	call	0x670	; 0x670 <uart_init>
  // init conig
  // init led
  led_init();
 460:	0e 94 2c 03 	call	0x658	; 0x658 <led_init>
  // init log
  // init rtc
  // init vpd

  // led blink pattern "--- -.-"
  led_set_blink("--- -.-"); 
 464:	8d e6       	ldi	r24, 0x6D	; 109
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 c0 02 	call	0x580	; 0x580 <led_set_blink>
  // clear the event log
  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc

  while(1) {
    // update the blink fsm every
    led_update();
 46c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <led_update>
      // update the log in EEPROM

    // if (config has changed && eeprom is not busy)
      // update config in EEPROM

    if ((!eeprom_isbusy()) && (!dumped)) {
 470:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_isbusy>
 474:	89 2b       	or	r24, r25
 476:	d1 f7       	brne	.-12     	; 0x46c <main+0x26>
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	9a 81       	ldd	r25, Y+2	; 0x02
 47c:	89 2b       	or	r24, r25
 47e:	b1 f7       	brne	.-20     	; 0x46c <main+0x26>
          dump_eeprom(0,0x100);
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	71 e0       	ldi	r23, 0x01	; 1
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 02 04 	call	0x804	; 0x804 <dump_eeprom>
          dumped=1;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	9a 83       	std	Y+2, r25	; 0x02
 492:	89 83       	std	Y+1, r24	; 0x01
  // clear the event log
  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc

  while(1) {
    // update the blink fsm every
    led_update();
 494:	eb cf       	rjmp	.-42     	; 0x46c <main+0x26>

00000496 <read_vpd>:
struct vpd_struct vpd;
struct vpd_struct defaults = {"SER", "DaVonte", "Carter", "super1337", 0, {'D'&0xFE,'a','V','C','a','r'}, "USA", 0};

/********** private declarations **********/
/* read manufacturer data from eeprom */
void read_vpd() {
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
}
 49e:	00 00       	nop
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <vpd_init>:

int cmp_str(const char *str1, const char *str2) ;


/********** public definitions **********/
void vpd_init() {
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
  // wait for the eeprom to free up
  while(eeprom_isbusy());
 4ae:	00 00       	nop
 4b0:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_isbusy>
 4b4:	89 2b       	or	r24, r25
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <vpd_init+0xa>
  
  /* read all data from the EEPROM at address 0x000 */

  /* if the data was invalid then write defaults and try to reinitialize */
  while(!vpd_is_data_valid()) {
 4b8:	00 00       	nop
 4ba:	0e 94 6d 02 	call	0x4da	; 0x4da <vpd_is_data_valid>
 4be:	89 2b       	or	r24, r25
 4c0:	e1 f3       	breq	.-8      	; 0x4ba <vpd_init+0x14>
    // initialize data from defaults
    // read defaults
  }
}
 4c2:	00 00       	nop
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <vpd_write_defaults>:

void vpd_write_defaults() {
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62
  /* update checksum for defaults */
  
  /* write the defaults */


}
 4d2:	00 00       	nop
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <vpd_is_data_valid>:

int vpd_is_data_valid() {
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(vpd.token, "SER");
 4e2:	65 e7       	ldi	r22, 0x75	; 117
 4e4:	71 e0       	ldi	r23, 0x01	; 1
 4e6:	8b ea       	ldi	r24, 0xAB	; 171
 4e8:	93 e0       	ldi	r25, 0x03	; 3
 4ea:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <cmp_str>
    // return (vpd.token == "SER") && is_checksum_valid();

}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <cmp_str>:

/********** private definitions **********/

int cmp_str(const char *str1, const char *str2) {
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <cmp_str+0x6>
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <cmp_str+0x8>
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	9a 83       	std	Y+2, r25	; 0x02
 502:	89 83       	std	Y+1, r24	; 0x01
 504:	7c 83       	std	Y+4, r23	; 0x04
 506:	6b 83       	std	Y+3, r22	; 0x03
  while (*str1 && *str2) {
 508:	17 c0       	rjmp	.+46     	; 0x538 <cmp_str+0x44>
    if (*str1 != *str2) {
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	9a 81       	ldd	r25, Y+2	; 0x02
 50e:	fc 01       	movw	r30, r24
 510:	20 81       	ld	r18, Z
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	9c 81       	ldd	r25, Y+4	; 0x04
 516:	fc 01       	movw	r30, r24
 518:	80 81       	ld	r24, Z
 51a:	28 17       	cp	r18, r24
 51c:	19 f0       	breq	.+6      	; 0x524 <cmp_str+0x30>
      return 0;
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	27 c0       	rjmp	.+78     	; 0x572 <cmp_str+0x7e>
    }
    str1++;
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	9a 81       	ldd	r25, Y+2	; 0x02
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	9a 83       	std	Y+2, r25	; 0x02
 52c:	89 83       	std	Y+1, r24	; 0x01
    str2++;
 52e:	8b 81       	ldd	r24, Y+3	; 0x03
 530:	9c 81       	ldd	r25, Y+4	; 0x04
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	9c 83       	std	Y+4, r25	; 0x04
 536:	8b 83       	std	Y+3, r24	; 0x03
}

/********** private definitions **********/

int cmp_str(const char *str1, const char *str2) {
  while (*str1 && *str2) {
 538:	89 81       	ldd	r24, Y+1	; 0x01
 53a:	9a 81       	ldd	r25, Y+2	; 0x02
 53c:	fc 01       	movw	r30, r24
 53e:	80 81       	ld	r24, Z
 540:	88 23       	and	r24, r24
 542:	31 f0       	breq	.+12     	; 0x550 <cmp_str+0x5c>
 544:	8b 81       	ldd	r24, Y+3	; 0x03
 546:	9c 81       	ldd	r25, Y+4	; 0x04
 548:	fc 01       	movw	r30, r24
 54a:	80 81       	ld	r24, Z
 54c:	88 23       	and	r24, r24
 54e:	e9 f6       	brne	.-70     	; 0x50a <cmp_str+0x16>
      return 0;
    }
    str1++;
    str2++;
  }
  return *str1 == '\0' && *str2 == '\0';
 550:	89 81       	ldd	r24, Y+1	; 0x01
 552:	9a 81       	ldd	r25, Y+2	; 0x02
 554:	fc 01       	movw	r30, r24
 556:	80 81       	ld	r24, Z
 558:	88 23       	and	r24, r24
 55a:	49 f4       	brne	.+18     	; 0x56e <cmp_str+0x7a>
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	9c 81       	ldd	r25, Y+4	; 0x04
 560:	fc 01       	movw	r30, r24
 562:	80 81       	ld	r24, Z
 564:	88 23       	and	r24, r24
 566:	19 f4       	brne	.+6      	; 0x56e <cmp_str+0x7a>
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <cmp_str+0x7e>
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <led_set_blink>:
 580:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <blink_msg+0x1>
 584:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <blink_msg>
 588:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <blink_pos+0x1>
 58c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <blink_pos>
 590:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <blink_state>
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 38 05 	call	0xa70	; 0xa70 <delay_set>
 5a0:	0c 94 31 03 	jmp	0x662	; 0x662 <led_off>

000005a4 <led_update>:
 5a4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <blink_msg>
 5a8:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <blink_msg+0x1>
 5ac:	89 2b       	or	r24, r25
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <led_update+0xe>
 5b0:	52 c0       	rjmp	.+164    	; 0x656 <led_update+0xb2>
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <delay_isdone>
 5ba:	89 2b       	or	r24, r25
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <led_update+0x1c>
 5be:	4b c0       	rjmp	.+150    	; 0x656 <led_update+0xb2>
 5c0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <blink_state>
 5c4:	81 11       	cpse	r24, r1
 5c6:	34 c0       	rjmp	.+104    	; 0x630 <led_update+0x8c>
 5c8:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <blink_pos>
 5cc:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <blink_pos+0x1>
 5d0:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <blink_msg>
 5d4:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <blink_msg+0x1>
 5d8:	e2 0f       	add	r30, r18
 5da:	f3 1f       	adc	r31, r19
 5dc:	80 81       	ld	r24, Z
 5de:	80 32       	cpi	r24, 0x20	; 32
 5e0:	e9 f0       	breq	.+58     	; 0x61c <led_update+0x78>
 5e2:	3c f4       	brge	.+14     	; 0x5f2 <led_update+0x4e>
 5e4:	81 11       	cpse	r24, r1
 5e6:	1d c0       	rjmp	.+58     	; 0x622 <led_update+0x7e>
 5e8:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <blink_pos+0x1>
 5ec:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <blink_pos>
 5f0:	08 95       	ret
 5f2:	8d 32       	cpi	r24, 0x2D	; 45
 5f4:	39 f0       	breq	.+14     	; 0x604 <led_update+0x60>
 5f6:	8e 32       	cpi	r24, 0x2E	; 46
 5f8:	a1 f4       	brne	.+40     	; 0x622 <led_update+0x7e>
 5fa:	0e 94 2f 03 	call	0x65e	; 0x65e <led_on>
 5fe:	6a ef       	ldi	r22, 0xFA	; 250
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	04 c0       	rjmp	.+8      	; 0x60c <led_update+0x68>
 604:	0e 94 2f 03 	call	0x65e	; 0x65e <led_on>
 608:	6e ee       	ldi	r22, 0xEE	; 238
 60a:	72 e0       	ldi	r23, 0x02	; 2
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 38 05 	call	0xa70	; 0xa70 <delay_set>
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <blink_state>
 61a:	08 95       	ret
 61c:	68 ee       	ldi	r22, 0xE8	; 232
 61e:	73 e0       	ldi	r23, 0x03	; 3
 620:	0b c0       	rjmp	.+22     	; 0x638 <led_update+0x94>
 622:	2f 5f       	subi	r18, 0xFF	; 255
 624:	3f 4f       	sbci	r19, 0xFF	; 255
 626:	30 93 85 01 	sts	0x0185, r19	; 0x800185 <blink_pos+0x1>
 62a:	20 93 84 01 	sts	0x0184, r18	; 0x800184 <blink_pos>
 62e:	08 95       	ret
 630:	0e 94 31 03 	call	0x662	; 0x662 <led_off>
 634:	64 e6       	ldi	r22, 0x64	; 100
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 38 05 	call	0xa70	; 0xa70 <delay_set>
 640:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <blink_state>
 644:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <blink_pos>
 648:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <blink_pos+0x1>
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <blink_pos+0x1>
 652:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <blink_pos>
 656:	08 95       	ret

00000658 <led_init>:
 658:	21 9a       	sbi	0x04, 1	; 4
 65a:	29 98       	cbi	0x05, 1	; 5
 65c:	08 95       	ret

0000065e <led_on>:
 65e:	29 9a       	sbi	0x05, 1	; 5
 660:	08 95       	ret

00000662 <led_off>:
 662:	29 98       	cbi	0x05, 1	; 5
 664:	08 95       	ret

00000666 <led_is_on>:
 666:	85 b1       	in	r24, 0x05	; 5
 668:	86 95       	lsr	r24
 66a:	81 70       	andi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	08 95       	ret

00000670 <uart_init>:
 670:	0e 94 62 05 	call	0xac4	; 0xac4 <serial_init>
 674:	78 94       	sei
 676:	08 95       	ret

00000678 <uart_writechar>:
 678:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <serial_writechar>

0000067c <uart_writestr>:
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	ec 01       	movw	r28, r24
 682:	89 91       	ld	r24, Y+
 684:	88 23       	and	r24, r24
 686:	19 f0       	breq	.+6      	; 0x68e <uart_writestr+0x12>
 688:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <serial_writechar>
 68c:	fa cf       	rjmp	.-12     	; 0x682 <uart_writestr+0x6>
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	08 95       	ret

00000694 <uart_writehex8>:
 694:	cf 93       	push	r28
 696:	c8 2f       	mov	r28, r24
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	24 e0       	ldi	r18, 0x04	; 4
 69c:	95 95       	asr	r25
 69e:	87 95       	ror	r24
 6a0:	2a 95       	dec	r18
 6a2:	e1 f7       	brne	.-8      	; 0x69c <uart_writehex8+0x8>
 6a4:	8a 30       	cpi	r24, 0x0A	; 10
 6a6:	10 f4       	brcc	.+4      	; 0x6ac <uart_writehex8+0x18>
 6a8:	80 5d       	subi	r24, 0xD0	; 208
 6aa:	01 c0       	rjmp	.+2      	; 0x6ae <uart_writehex8+0x1a>
 6ac:	89 5c       	subi	r24, 0xC9	; 201
 6ae:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <serial_writechar>
 6b2:	8c 2f       	mov	r24, r28
 6b4:	8f 70       	andi	r24, 0x0F	; 15
 6b6:	8a 30       	cpi	r24, 0x0A	; 10
 6b8:	10 f0       	brcs	.+4      	; 0x6be <uart_writehex8+0x2a>
 6ba:	89 5c       	subi	r24, 0xC9	; 201
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <uart_writehex8+0x2c>
 6be:	80 5d       	subi	r24, 0xD0	; 208
 6c0:	cf 91       	pop	r28
 6c2:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <serial_writechar>

000006c6 <uart_writehex16>:
 6c6:	cf 93       	push	r28
 6c8:	c8 2f       	mov	r28, r24
 6ca:	89 2f       	mov	r24, r25
 6cc:	0e 94 4a 03 	call	0x694	; 0x694 <uart_writehex8>
 6d0:	8c 2f       	mov	r24, r28
 6d2:	cf 91       	pop	r28
 6d4:	0c 94 4a 03 	jmp	0x694	; 0x694 <uart_writehex8>

000006d8 <uart_writedec32>:
 6d8:	2f 92       	push	r2
 6da:	3f 92       	push	r3
 6dc:	4f 92       	push	r4
 6de:	5f 92       	push	r5
 6e0:	6f 92       	push	r6
 6e2:	7f 92       	push	r7
 6e4:	8f 92       	push	r8
 6e6:	9f 92       	push	r9
 6e8:	af 92       	push	r10
 6ea:	bf 92       	push	r11
 6ec:	cf 92       	push	r12
 6ee:	df 92       	push	r13
 6f0:	ef 92       	push	r14
 6f2:	ff 92       	push	r15
 6f4:	0f 93       	push	r16
 6f6:	1f 93       	push	r17
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
 700:	63 97       	sbiw	r28, 0x13	; 19
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	6b 01       	movw	r12, r22
 70e:	7c 01       	movw	r14, r24
 710:	97 ff       	sbrs	r25, 7
 712:	0d c0       	rjmp	.+26     	; 0x72e <uart_writedec32+0x56>
 714:	f0 94       	com	r15
 716:	e0 94       	com	r14
 718:	d0 94       	com	r13
 71a:	c0 94       	com	r12
 71c:	c1 1c       	adc	r12, r1
 71e:	d1 1c       	adc	r13, r1
 720:	e1 1c       	adc	r14, r1
 722:	f1 1c       	adc	r15, r1
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	9b 8b       	std	Y+19, r25	; 0x13
 72a:	8a 8b       	std	Y+18, r24	; 0x12
 72c:	02 c0       	rjmp	.+4      	; 0x732 <uart_writedec32+0x5a>
 72e:	1b 8a       	std	Y+19, r1	; 0x13
 730:	1a 8a       	std	Y+18, r1	; 0x12
 732:	fe 01       	movw	r30, r28
 734:	31 96       	adiw	r30, 0x01	; 1
 736:	5f 01       	movw	r10, r30
 738:	8e 01       	movw	r16, r28
 73a:	05 5f       	subi	r16, 0xF5	; 245
 73c:	1f 4f       	sbci	r17, 0xFF	; 255
 73e:	f9 8b       	std	Y+17, r31	; 0x11
 740:	e8 8b       	std	Y+16, r30	; 0x10
 742:	66 24       	eor	r6, r6
 744:	63 94       	inc	r6
 746:	71 2c       	mov	r7, r1
 748:	81 2c       	mov	r8, r1
 74a:	91 2c       	mov	r9, r1
 74c:	aa e0       	ldi	r26, 0x0A	; 10
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	93 01       	movw	r18, r6
 752:	a4 01       	movw	r20, r8
 754:	0e 94 73 06 	call	0xce6	; 0xce6 <__muluhisi3>
 758:	1b 01       	movw	r2, r22
 75a:	2c 01       	movw	r4, r24
 75c:	c7 01       	movw	r24, r14
 75e:	b6 01       	movw	r22, r12
 760:	91 01       	movw	r18, r2
 762:	a2 01       	movw	r20, r4
 764:	0e 94 54 06 	call	0xca8	; 0xca8 <__divmodsi4>
 768:	93 01       	movw	r18, r6
 76a:	a4 01       	movw	r20, r8
 76c:	0e 94 54 06 	call	0xca8	; 0xca8 <__divmodsi4>
 770:	e8 89       	ldd	r30, Y+16	; 0x10
 772:	f9 89       	ldd	r31, Y+17	; 0x11
 774:	21 93       	st	Z+, r18
 776:	f9 8b       	std	Y+17, r31	; 0x11
 778:	e8 8b       	std	Y+16, r30	; 0x10
 77a:	82 2f       	mov	r24, r18
 77c:	22 0f       	add	r18, r18
 77e:	99 0b       	sbc	r25, r25
 780:	aa 0b       	sbc	r26, r26
 782:	bb 0b       	sbc	r27, r27
 784:	c8 1a       	sub	r12, r24
 786:	d9 0a       	sbc	r13, r25
 788:	ea 0a       	sbc	r14, r26
 78a:	fb 0a       	sbc	r15, r27
 78c:	31 01       	movw	r6, r2
 78e:	42 01       	movw	r8, r4
 790:	0e 17       	cp	r16, r30
 792:	1f 07       	cpc	r17, r31
 794:	d9 f6       	brne	.-74     	; 0x74c <uart_writedec32+0x74>
 796:	8a 89       	ldd	r24, Y+18	; 0x12
 798:	9b 89       	ldd	r25, Y+19	; 0x13
 79a:	89 2b       	or	r24, r25
 79c:	11 f0       	breq	.+4      	; 0x7a2 <uart_writedec32+0xca>
 79e:	8d e2       	ldi	r24, 0x2D	; 45
 7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <uart_writedec32+0xcc>
 7a2:	80 e2       	ldi	r24, 0x20	; 32
 7a4:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <serial_writechar>
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	f8 01       	movw	r30, r16
 7ae:	82 91       	ld	r24, -Z
 7b0:	8f 01       	movw	r16, r30
 7b2:	81 11       	cpse	r24, r1
 7b4:	06 c0       	rjmp	.+12     	; 0x7c2 <uart_writedec32+0xea>
 7b6:	21 15       	cp	r18, r1
 7b8:	31 05       	cpc	r19, r1
 7ba:	19 f4       	brne	.+6      	; 0x7c2 <uart_writedec32+0xea>
 7bc:	ea 15       	cp	r30, r10
 7be:	fb 05       	cpc	r31, r11
 7c0:	29 f4       	brne	.+10     	; 0x7cc <uart_writedec32+0xf4>
 7c2:	80 5d       	subi	r24, 0xD0	; 208
 7c4:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <serial_writechar>
 7c8:	21 e0       	ldi	r18, 0x01	; 1
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	0a 15       	cp	r16, r10
 7ce:	1b 05       	cpc	r17, r11
 7d0:	69 f7       	brne	.-38     	; 0x7ac <uart_writedec32+0xd4>
 7d2:	63 96       	adiw	r28, 0x13	; 19
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	ff 90       	pop	r15
 7e8:	ef 90       	pop	r14
 7ea:	df 90       	pop	r13
 7ec:	cf 90       	pop	r12
 7ee:	bf 90       	pop	r11
 7f0:	af 90       	pop	r10
 7f2:	9f 90       	pop	r9
 7f4:	8f 90       	pop	r8
 7f6:	7f 90       	pop	r7
 7f8:	6f 90       	pop	r6
 7fa:	5f 90       	pop	r5
 7fc:	4f 90       	pop	r4
 7fe:	3f 90       	pop	r3
 800:	2f 90       	pop	r2
 802:	08 95       	ret

00000804 <dump_eeprom>:
 804:	2f 92       	push	r2
 806:	3f 92       	push	r3
 808:	4f 92       	push	r4
 80a:	5f 92       	push	r5
 80c:	6f 92       	push	r6
 80e:	7f 92       	push	r7
 810:	8f 92       	push	r8
 812:	9f 92       	push	r9
 814:	af 92       	push	r10
 816:	bf 92       	push	r11
 818:	cf 92       	push	r12
 81a:	df 92       	push	r13
 81c:	ef 92       	push	r14
 81e:	ff 92       	push	r15
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
 82c:	64 97       	sbiw	r28, 0x14	; 20
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	f8 94       	cli
 832:	de bf       	out	0x3e, r29	; 62
 834:	0f be       	out	0x3f, r0	; 63
 836:	cd bf       	out	0x3d, r28	; 61
 838:	8c 01       	movw	r16, r24
 83a:	61 15       	cp	r22, r1
 83c:	71 05       	cpc	r23, r1
 83e:	09 f4       	brne	.+2      	; 0x842 <dump_eeprom+0x3e>
 840:	92 c0       	rjmp	.+292    	; 0x966 <__stack+0x67>
 842:	81 2c       	mov	r8, r1
 844:	91 2c       	mov	r9, r1
 846:	54 01       	movw	r10, r8
 848:	cb 01       	movw	r24, r22
 84a:	a0 e0       	ldi	r26, 0x00	; 0
 84c:	b0 e0       	ldi	r27, 0x00	; 0
 84e:	89 8b       	std	Y+17, r24	; 0x11
 850:	9a 8b       	std	Y+18, r25	; 0x12
 852:	ab 8b       	std	Y+19, r26	; 0x13
 854:	bc 8b       	std	Y+20, r27	; 0x14
 856:	de 01       	movw	r26, r28
 858:	11 96       	adiw	r26, 0x01	; 1
 85a:	1d 01       	movw	r2, r26
 85c:	89 89       	ldd	r24, Y+17	; 0x11
 85e:	9a 89       	ldd	r25, Y+18	; 0x12
 860:	ab 89       	ldd	r26, Y+19	; 0x13
 862:	bc 89       	ldd	r27, Y+20	; 0x14
 864:	88 16       	cp	r8, r24
 866:	99 06       	cpc	r9, r25
 868:	aa 06       	cpc	r10, r26
 86a:	bb 06       	cpc	r11, r27
 86c:	08 f0       	brcs	.+2      	; 0x870 <dump_eeprom+0x6c>
 86e:	7b c0       	rjmp	.+246    	; 0x966 <__stack+0x67>
 870:	81 2f       	mov	r24, r17
 872:	0e 94 4a 03 	call	0x694	; 0x694 <uart_writehex8>
 876:	80 2f       	mov	r24, r16
 878:	80 7f       	andi	r24, 0xF0	; 240
 87a:	0e 94 4a 03 	call	0x694	; 0x694 <uart_writehex8>
 87e:	80 e2       	ldi	r24, 0x20	; 32
 880:	0e 94 3c 03 	call	0x678	; 0x678 <uart_writechar>
 884:	61 01       	movw	r12, r2
 886:	78 01       	movw	r14, r16
 888:	41 2c       	mov	r4, r1
 88a:	51 2c       	mov	r5, r1
 88c:	32 01       	movw	r6, r4
 88e:	41 e0       	ldi	r20, 0x01	; 1
 890:	b6 01       	movw	r22, r12
 892:	c7 01       	movw	r24, r14
 894:	0e 94 0e 01 	call	0x21c	; 0x21c <eeprom_readbuf>
 898:	bf ef       	ldi	r27, 0xFF	; 255
 89a:	eb 1a       	sub	r14, r27
 89c:	fb 0a       	sbc	r15, r27
 89e:	ef ef       	ldi	r30, 0xFF	; 255
 8a0:	4e 1a       	sub	r4, r30
 8a2:	5e 0a       	sbc	r5, r30
 8a4:	6e 0a       	sbc	r6, r30
 8a6:	7e 0a       	sbc	r7, r30
 8a8:	ff ef       	ldi	r31, 0xFF	; 255
 8aa:	8f 1a       	sub	r8, r31
 8ac:	9f 0a       	sbc	r9, r31
 8ae:	af 0a       	sbc	r10, r31
 8b0:	bf 0a       	sbc	r11, r31
 8b2:	89 89       	ldd	r24, Y+17	; 0x11
 8b4:	9a 89       	ldd	r25, Y+18	; 0x12
 8b6:	ab 89       	ldd	r26, Y+19	; 0x13
 8b8:	bc 89       	ldd	r27, Y+20	; 0x14
 8ba:	88 16       	cp	r8, r24
 8bc:	99 06       	cpc	r9, r25
 8be:	aa 06       	cpc	r10, r26
 8c0:	bb 06       	cpc	r11, r27
 8c2:	50 f0       	brcs	.+20     	; 0x8d8 <dump_eeprom+0xd4>
 8c4:	68 01       	movw	r12, r16
 8c6:	9f e0       	ldi	r25, 0x0F	; 15
 8c8:	c9 22       	and	r12, r25
 8ca:	dd 24       	eor	r13, r13
 8cc:	00 e0       	ldi	r16, 0x00	; 0
 8ce:	10 e0       	ldi	r17, 0x00	; 0
 8d0:	32 01       	movw	r6, r4
 8d2:	6c 0c       	add	r6, r12
 8d4:	7d 1c       	adc	r7, r13
 8d6:	09 c0       	rjmp	.+18     	; 0x8ea <dump_eeprom+0xe6>
 8d8:	af ef       	ldi	r26, 0xFF	; 255
 8da:	ca 1a       	sub	r12, r26
 8dc:	da 0a       	sbc	r13, r26
 8de:	c7 01       	movw	r24, r14
 8e0:	8f 70       	andi	r24, 0x0F	; 15
 8e2:	99 27       	eor	r25, r25
 8e4:	89 2b       	or	r24, r25
 8e6:	99 f6       	brne	.-90     	; 0x88e <dump_eeprom+0x8a>
 8e8:	ed cf       	rjmp	.-38     	; 0x8c4 <dump_eeprom+0xc0>
 8ea:	0c 15       	cp	r16, r12
 8ec:	1d 05       	cpc	r17, r13
 8ee:	18 f0       	brcs	.+6      	; 0x8f6 <dump_eeprom+0xf2>
 8f0:	06 15       	cp	r16, r6
 8f2:	17 05       	cpc	r17, r7
 8f4:	28 f0       	brcs	.+10     	; 0x900 <__stack+0x1>
 8f6:	89 e7       	ldi	r24, 0x79	; 121
 8f8:	91 e0       	ldi	r25, 0x01	; 1
 8fa:	0e 94 3e 03 	call	0x67c	; 0x67c <uart_writestr>
 8fe:	0b c0       	rjmp	.+22     	; 0x916 <__stack+0x17>
 900:	f8 01       	movw	r30, r16
 902:	ec 19       	sub	r30, r12
 904:	fd 09       	sbc	r31, r13
 906:	e2 0d       	add	r30, r2
 908:	f3 1d       	adc	r31, r3
 90a:	80 81       	ld	r24, Z
 90c:	0e 94 4a 03 	call	0x694	; 0x694 <uart_writehex8>
 910:	80 e2       	ldi	r24, 0x20	; 32
 912:	0e 94 3c 03 	call	0x678	; 0x678 <uart_writechar>
 916:	0f 5f       	subi	r16, 0xFF	; 255
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	00 31       	cpi	r16, 0x10	; 16
 91c:	11 05       	cpc	r17, r1
 91e:	29 f7       	brne	.-54     	; 0x8ea <dump_eeprom+0xe6>
 920:	00 e0       	ldi	r16, 0x00	; 0
 922:	10 e0       	ldi	r17, 0x00	; 0
 924:	c0 16       	cp	r12, r16
 926:	d1 06       	cpc	r13, r17
 928:	31 f0       	breq	.+12     	; 0x936 <__stack+0x37>
 92a:	80 e2       	ldi	r24, 0x20	; 32
 92c:	0e 94 3c 03 	call	0x678	; 0x678 <uart_writechar>
 930:	0f 5f       	subi	r16, 0xFF	; 255
 932:	1f 4f       	sbci	r17, 0xFF	; 255
 934:	f7 cf       	rjmp	.-18     	; 0x924 <__stack+0x25>
 936:	81 01       	movw	r16, r2
 938:	c8 01       	movw	r24, r16
 93a:	82 19       	sub	r24, r2
 93c:	93 09       	sbc	r25, r3
 93e:	84 15       	cp	r24, r4
 940:	95 05       	cpc	r25, r5
 942:	58 f4       	brcc	.+22     	; 0x95a <__stack+0x5b>
 944:	f8 01       	movw	r30, r16
 946:	81 91       	ld	r24, Z+
 948:	8f 01       	movw	r16, r30
 94a:	90 ee       	ldi	r25, 0xE0	; 224
 94c:	98 0f       	add	r25, r24
 94e:	90 36       	cpi	r25, 0x60	; 96
 950:	08 f0       	brcs	.+2      	; 0x954 <__stack+0x55>
 952:	8e e2       	ldi	r24, 0x2E	; 46
 954:	0e 94 3c 03 	call	0x678	; 0x678 <uart_writechar>
 958:	ef cf       	rjmp	.-34     	; 0x938 <__stack+0x39>
 95a:	8d e7       	ldi	r24, 0x7D	; 125
 95c:	91 e0       	ldi	r25, 0x01	; 1
 95e:	0e 94 3e 03 	call	0x67c	; 0x67c <uart_writestr>
 962:	87 01       	movw	r16, r14
 964:	7b cf       	rjmp	.-266    	; 0x85c <dump_eeprom+0x58>
 966:	64 96       	adiw	r28, 0x14	; 20
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	f8 94       	cli
 96c:	de bf       	out	0x3e, r29	; 62
 96e:	0f be       	out	0x3f, r0	; 63
 970:	cd bf       	out	0x3d, r28	; 61
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	1f 91       	pop	r17
 978:	0f 91       	pop	r16
 97a:	ff 90       	pop	r15
 97c:	ef 90       	pop	r14
 97e:	df 90       	pop	r13
 980:	cf 90       	pop	r12
 982:	bf 90       	pop	r11
 984:	af 90       	pop	r10
 986:	9f 90       	pop	r9
 988:	8f 90       	pop	r8
 98a:	7f 90       	pop	r7
 98c:	6f 90       	pop	r6
 98e:	5f 90       	pop	r5
 990:	4f 90       	pop	r4
 992:	3f 90       	pop	r3
 994:	2f 90       	pop	r2
 996:	08 95       	ret

00000998 <__vector_14>:
 998:	1f 92       	push	r1
 99a:	0f 92       	push	r0
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	0f 92       	push	r0
 9a0:	11 24       	eor	r1, r1
 9a2:	2f 93       	push	r18
 9a4:	3f 93       	push	r19
 9a6:	8f 93       	push	r24
 9a8:	9f 93       	push	r25
 9aa:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <delay_count>
 9ae:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <delay_count+0x1>
 9b2:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <delay_limit>
 9b6:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <delay_limit+0x1>
 9ba:	28 17       	cp	r18, r24
 9bc:	39 07       	cpc	r19, r25
 9be:	49 f0       	breq	.+18     	; 0x9d2 <__vector_14+0x3a>
 9c0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <delay_count>
 9c4:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <delay_count+0x1>
 9c8:	01 96       	adiw	r24, 0x01	; 1
 9ca:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <delay_count+0x1>
 9ce:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <delay_count>
 9d2:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <delay_count+0x2>
 9d6:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <delay_count+0x3>
 9da:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <delay_limit+0x2>
 9de:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <delay_limit+0x3>
 9e2:	28 17       	cp	r18, r24
 9e4:	39 07       	cpc	r19, r25
 9e6:	49 f0       	breq	.+18     	; 0x9fa <__vector_14+0x62>
 9e8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <delay_count+0x2>
 9ec:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <delay_count+0x3>
 9f0:	01 96       	adiw	r24, 0x01	; 1
 9f2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <delay_count+0x3>
 9f6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <delay_count+0x2>
 9fa:	9f 91       	pop	r25
 9fc:	8f 91       	pop	r24
 9fe:	3f 91       	pop	r19
 a00:	2f 91       	pop	r18
 a02:	0f 90       	pop	r0
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	0f 90       	pop	r0
 a08:	1f 90       	pop	r1
 a0a:	18 95       	reti

00000a0c <delay_init>:
 a0c:	89 ef       	ldi	r24, 0xF9	; 249
 a0e:	87 bd       	out	0x27, r24	; 39
 a10:	82 e0       	ldi	r24, 0x02	; 2
 a12:	84 bd       	out	0x24, r24	; 36
 a14:	93 e0       	ldi	r25, 0x03	; 3
 a16:	95 bd       	out	0x25, r25	; 37
 a18:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 a1c:	08 95       	ret

00000a1e <delay_get>:
 a1e:	82 30       	cpi	r24, 0x02	; 2
 a20:	91 05       	cpc	r25, r1
 a22:	50 f4       	brcc	.+20     	; 0xa38 <delay_get+0x1a>
 a24:	f8 94       	cli
 a26:	88 0f       	add	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	fc 01       	movw	r30, r24
 a2c:	e4 57       	subi	r30, 0x74	; 116
 a2e:	fe 4f       	sbci	r31, 0xFE	; 254
 a30:	80 81       	ld	r24, Z
 a32:	91 81       	ldd	r25, Z+1	; 0x01
 a34:	78 94       	sei
 a36:	08 95       	ret
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	08 95       	ret

00000a3e <delay_isdone>:
 a3e:	82 30       	cpi	r24, 0x02	; 2
 a40:	91 05       	cpc	r25, r1
 a42:	98 f4       	brcc	.+38     	; 0xa6a <delay_isdone+0x2c>
 a44:	88 0f       	add	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	fc 01       	movw	r30, r24
 a4a:	e4 57       	subi	r30, 0x74	; 116
 a4c:	fe 4f       	sbci	r31, 0xFE	; 254
 a4e:	20 81       	ld	r18, Z
 a50:	31 81       	ldd	r19, Z+1	; 0x01
 a52:	fc 01       	movw	r30, r24
 a54:	e8 57       	subi	r30, 0x78	; 120
 a56:	fe 4f       	sbci	r31, 0xFE	; 254
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	40 81       	ld	r20, Z
 a5e:	51 81       	ldd	r21, Z+1	; 0x01
 a60:	42 17       	cp	r20, r18
 a62:	53 07       	cpc	r21, r19
 a64:	21 f0       	breq	.+8      	; 0xa6e <delay_isdone+0x30>
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	08 95       	ret
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	08 95       	ret

00000a70 <delay_set>:
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	ec 01       	movw	r28, r24
 a7a:	8b 01       	movw	r16, r22
 a7c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <initialized.1590>
 a80:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <initialized.1590+0x1>
 a84:	89 2b       	or	r24, r25
 a86:	41 f4       	brne	.+16     	; 0xa98 <delay_set+0x28>
 a88:	0e 94 06 05 	call	0xa0c	; 0xa0c <delay_init>
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <initialized.1590+0x1>
 a94:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <initialized.1590>
 a98:	c2 30       	cpi	r28, 0x02	; 2
 a9a:	d1 05       	cpc	r29, r1
 a9c:	70 f4       	brcc	.+28     	; 0xaba <delay_set+0x4a>
 a9e:	8f b7       	in	r24, 0x3f	; 63
 aa0:	f8 94       	cli
 aa2:	cc 0f       	add	r28, r28
 aa4:	dd 1f       	adc	r29, r29
 aa6:	fe 01       	movw	r30, r28
 aa8:	e8 57       	subi	r30, 0x78	; 120
 aaa:	fe 4f       	sbci	r31, 0xFE	; 254
 aac:	11 83       	std	Z+1, r17	; 0x01
 aae:	00 83       	st	Z, r16
 ab0:	c4 57       	subi	r28, 0x74	; 116
 ab2:	de 4f       	sbci	r29, 0xFE	; 254
 ab4:	19 82       	std	Y+1, r1	; 0x01
 ab6:	18 82       	st	Y, r1
 ab8:	8f bf       	out	0x3f, r24	; 63
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	1f 91       	pop	r17
 ac0:	0f 91       	pop	r16
 ac2:	08 95       	ret

00000ac4 <serial_init>:
 ac4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 ac8:	87 e6       	ldi	r24, 0x67	; 103
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 ad0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 ad4:	e1 ec       	ldi	r30, 0xC1	; 193
 ad6:	f0 e0       	ldi	r31, 0x00	; 0
 ad8:	88 e1       	ldi	r24, 0x18	; 24
 ada:	80 83       	st	Z, r24
 adc:	86 e0       	ldi	r24, 0x06	; 6
 ade:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 ae2:	80 81       	ld	r24, Z
 ae4:	80 6a       	ori	r24, 0xA0	; 160
 ae6:	80 83       	st	Z, r24
 ae8:	08 95       	ret

00000aea <__vector_18>:
 aea:	1f 92       	push	r1
 aec:	0f 92       	push	r0
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	0f 92       	push	r0
 af2:	11 24       	eor	r1, r1
 af4:	2f 93       	push	r18
 af6:	8f 93       	push	r24
 af8:	9f 93       	push	r25
 afa:	ef 93       	push	r30
 afc:	ff 93       	push	r31
 afe:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <rxtail>
 b02:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <rxhead>
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	82 1b       	sub	r24, r18
 b0a:	91 09       	sbc	r25, r1
 b0c:	01 97       	sbiw	r24, 0x01	; 1
 b0e:	8f 73       	andi	r24, 0x3F	; 63
 b10:	99 27       	eor	r25, r25
 b12:	89 2b       	or	r24, r25
 b14:	79 f0       	breq	.+30     	; 0xb34 <__vector_18+0x4a>
 b16:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <rxhead>
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 b20:	ee 51       	subi	r30, 0x1E	; 30
 b22:	fc 4f       	sbci	r31, 0xFC	; 252
 b24:	80 83       	st	Z, r24
 b26:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <rxhead>
 b2a:	8f 5f       	subi	r24, 0xFF	; 255
 b2c:	8f 73       	andi	r24, 0x3F	; 63
 b2e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <rxhead>
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <__vector_18+0x4e>
 b34:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 b38:	ff 91       	pop	r31
 b3a:	ef 91       	pop	r30
 b3c:	9f 91       	pop	r25
 b3e:	8f 91       	pop	r24
 b40:	2f 91       	pop	r18
 b42:	0f 90       	pop	r0
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	0f 90       	pop	r0
 b48:	1f 90       	pop	r1
 b4a:	18 95       	reti

00000b4c <__vector_19>:
 b4c:	1f 92       	push	r1
 b4e:	0f 92       	push	r0
 b50:	0f b6       	in	r0, 0x3f	; 63
 b52:	0f 92       	push	r0
 b54:	11 24       	eor	r1, r1
 b56:	2f 93       	push	r18
 b58:	8f 93       	push	r24
 b5a:	9f 93       	push	r25
 b5c:	ef 93       	push	r30
 b5e:	ff 93       	push	r31
 b60:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <txhead>
 b64:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <txtail>
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	82 1b       	sub	r24, r18
 b6c:	91 09       	sbc	r25, r1
 b6e:	8f 73       	andi	r24, 0x3F	; 63
 b70:	99 27       	eor	r25, r25
 b72:	89 2b       	or	r24, r25
 b74:	79 f0       	breq	.+30     	; 0xb94 <__vector_19+0x48>
 b76:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <txtail>
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	ee 5d       	subi	r30, 0xDE	; 222
 b7e:	fb 4f       	sbci	r31, 0xFB	; 251
 b80:	80 81       	ld	r24, Z
 b82:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 b86:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <txtail>
 b8a:	8f 5f       	subi	r24, 0xFF	; 255
 b8c:	8f 73       	andi	r24, 0x3F	; 63
 b8e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <txtail>
 b92:	05 c0       	rjmp	.+10     	; 0xb9e <__vector_19+0x52>
 b94:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 b98:	8f 7d       	andi	r24, 0xDF	; 223
 b9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 b9e:	ff 91       	pop	r31
 ba0:	ef 91       	pop	r30
 ba2:	9f 91       	pop	r25
 ba4:	8f 91       	pop	r24
 ba6:	2f 91       	pop	r18
 ba8:	0f 90       	pop	r0
 baa:	0f be       	out	0x3f, r0	; 63
 bac:	0f 90       	pop	r0
 bae:	1f 90       	pop	r1
 bb0:	18 95       	reti

00000bb2 <serial_rxchars>:
 bb2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <rxhead>
 bb6:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <rxtail>
 bba:	89 1b       	sub	r24, r25
 bbc:	8f 73       	andi	r24, 0x3F	; 63
 bbe:	08 95       	ret

00000bc0 <serial_popchar>:
 bc0:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <rxhead>
 bc4:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <rxtail>
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	82 1b       	sub	r24, r18
 bcc:	91 09       	sbc	r25, r1
 bce:	8f 73       	andi	r24, 0x3F	; 63
 bd0:	99 27       	eor	r25, r25
 bd2:	89 2b       	or	r24, r25
 bd4:	69 f0       	breq	.+26     	; 0xbf0 <serial_popchar+0x30>
 bd6:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <rxtail>
 bda:	f0 e0       	ldi	r31, 0x00	; 0
 bdc:	ee 51       	subi	r30, 0x1E	; 30
 bde:	fc 4f       	sbci	r31, 0xFC	; 252
 be0:	80 81       	ld	r24, Z
 be2:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <rxtail>
 be6:	9f 5f       	subi	r25, 0xFF	; 255
 be8:	9f 73       	andi	r25, 0x3F	; 63
 bea:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <rxtail>
 bee:	08 95       	ret
 bf0:	80 e0       	ldi	r24, 0x00	; 0
 bf2:	08 95       	ret

00000bf4 <serial_writechar>:
 bf4:	0f b6       	in	r0, 0x3f	; 63
 bf6:	07 fe       	sbrs	r0, 7
 bf8:	0e c0       	rjmp	.+28     	; 0xc16 <serial_writechar+0x22>
 bfa:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <txtail>
 bfe:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <txhead>
 c02:	30 e0       	ldi	r19, 0x00	; 0
 c04:	29 1b       	sub	r18, r25
 c06:	31 09       	sbc	r19, r1
 c08:	21 50       	subi	r18, 0x01	; 1
 c0a:	31 09       	sbc	r19, r1
 c0c:	2f 73       	andi	r18, 0x3F	; 63
 c0e:	33 27       	eor	r19, r19
 c10:	23 2b       	or	r18, r19
 c12:	99 f3       	breq	.-26     	; 0xbfa <serial_writechar+0x6>
 c14:	0d c0       	rjmp	.+26     	; 0xc30 <serial_writechar+0x3c>
 c16:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <txtail>
 c1a:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <txhead>
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	29 1b       	sub	r18, r25
 c22:	31 09       	sbc	r19, r1
 c24:	21 50       	subi	r18, 0x01	; 1
 c26:	31 09       	sbc	r19, r1
 c28:	2f 73       	andi	r18, 0x3F	; 63
 c2a:	33 27       	eor	r19, r19
 c2c:	23 2b       	or	r18, r19
 c2e:	61 f0       	breq	.+24     	; 0xc48 <serial_writechar+0x54>
 c30:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <txhead>
 c34:	f0 e0       	ldi	r31, 0x00	; 0
 c36:	ee 5d       	subi	r30, 0xDE	; 222
 c38:	fb 4f       	sbci	r31, 0xFB	; 251
 c3a:	80 83       	st	Z, r24
 c3c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <txhead>
 c40:	8f 5f       	subi	r24, 0xFF	; 255
 c42:	8f 73       	andi	r24, 0x3F	; 63
 c44:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <txhead>
 c48:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 c4c:	80 62       	ori	r24, 0x20	; 32
 c4e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 c52:	08 95       	ret

00000c54 <serial_writestr>:
 c54:	1f 93       	push	r17
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	ec 01       	movw	r28, r24
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	11 e0       	ldi	r17, 0x01	; 1
 c60:	18 0f       	add	r17, r24
 c62:	fe 01       	movw	r30, r28
 c64:	e8 0f       	add	r30, r24
 c66:	f1 1d       	adc	r31, r1
 c68:	80 81       	ld	r24, Z
 c6a:	88 23       	and	r24, r24
 c6c:	21 f0       	breq	.+8      	; 0xc76 <serial_writestr+0x22>
 c6e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <serial_writechar>
 c72:	81 2f       	mov	r24, r17
 c74:	f4 cf       	rjmp	.-24     	; 0xc5e <serial_writestr+0xa>
 c76:	df 91       	pop	r29
 c78:	cf 91       	pop	r28
 c7a:	1f 91       	pop	r17
 c7c:	08 95       	ret

00000c7e <serial_writestr_P>:
 c7e:	1f 93       	push	r17
 c80:	cf 93       	push	r28
 c82:	df 93       	push	r29
 c84:	ec 01       	movw	r28, r24
 c86:	80 e0       	ldi	r24, 0x00	; 0
 c88:	11 e0       	ldi	r17, 0x01	; 1
 c8a:	18 0f       	add	r17, r24
 c8c:	fe 01       	movw	r30, r28
 c8e:	e8 0f       	add	r30, r24
 c90:	f1 1d       	adc	r31, r1
 c92:	84 91       	lpm	r24, Z
 c94:	88 23       	and	r24, r24
 c96:	21 f0       	breq	.+8      	; 0xca0 <serial_writestr_P+0x22>
 c98:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <serial_writechar>
 c9c:	81 2f       	mov	r24, r17
 c9e:	f4 cf       	rjmp	.-24     	; 0xc88 <serial_writestr_P+0xa>
 ca0:	df 91       	pop	r29
 ca2:	cf 91       	pop	r28
 ca4:	1f 91       	pop	r17
 ca6:	08 95       	ret

00000ca8 <__divmodsi4>:
 ca8:	05 2e       	mov	r0, r21
 caa:	97 fb       	bst	r25, 7
 cac:	1e f4       	brtc	.+6      	; 0xcb4 <__divmodsi4+0xc>
 cae:	00 94       	com	r0
 cb0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__negsi2>
 cb4:	57 fd       	sbrc	r21, 7
 cb6:	07 d0       	rcall	.+14     	; 0xcc6 <__divmodsi4_neg2>
 cb8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__udivmodsi4>
 cbc:	07 fc       	sbrc	r0, 7
 cbe:	03 d0       	rcall	.+6      	; 0xcc6 <__divmodsi4_neg2>
 cc0:	4e f4       	brtc	.+18     	; 0xcd4 <__divmodsi4_exit>
 cc2:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__negsi2>

00000cc6 <__divmodsi4_neg2>:
 cc6:	50 95       	com	r21
 cc8:	40 95       	com	r20
 cca:	30 95       	com	r19
 ccc:	21 95       	neg	r18
 cce:	3f 4f       	sbci	r19, 0xFF	; 255
 cd0:	4f 4f       	sbci	r20, 0xFF	; 255
 cd2:	5f 4f       	sbci	r21, 0xFF	; 255

00000cd4 <__divmodsi4_exit>:
 cd4:	08 95       	ret

00000cd6 <__negsi2>:
 cd6:	90 95       	com	r25
 cd8:	80 95       	com	r24
 cda:	70 95       	com	r23
 cdc:	61 95       	neg	r22
 cde:	7f 4f       	sbci	r23, 0xFF	; 255
 ce0:	8f 4f       	sbci	r24, 0xFF	; 255
 ce2:	9f 4f       	sbci	r25, 0xFF	; 255
 ce4:	08 95       	ret

00000ce6 <__muluhisi3>:
 ce6:	0e 94 a0 06 	call	0xd40	; 0xd40 <__umulhisi3>
 cea:	a5 9f       	mul	r26, r21
 cec:	90 0d       	add	r25, r0
 cee:	b4 9f       	mul	r27, r20
 cf0:	90 0d       	add	r25, r0
 cf2:	a4 9f       	mul	r26, r20
 cf4:	80 0d       	add	r24, r0
 cf6:	91 1d       	adc	r25, r1
 cf8:	11 24       	eor	r1, r1
 cfa:	08 95       	ret

00000cfc <__udivmodsi4>:
 cfc:	a1 e2       	ldi	r26, 0x21	; 33
 cfe:	1a 2e       	mov	r1, r26
 d00:	aa 1b       	sub	r26, r26
 d02:	bb 1b       	sub	r27, r27
 d04:	fd 01       	movw	r30, r26
 d06:	0d c0       	rjmp	.+26     	; 0xd22 <__udivmodsi4_ep>

00000d08 <__udivmodsi4_loop>:
 d08:	aa 1f       	adc	r26, r26
 d0a:	bb 1f       	adc	r27, r27
 d0c:	ee 1f       	adc	r30, r30
 d0e:	ff 1f       	adc	r31, r31
 d10:	a2 17       	cp	r26, r18
 d12:	b3 07       	cpc	r27, r19
 d14:	e4 07       	cpc	r30, r20
 d16:	f5 07       	cpc	r31, r21
 d18:	20 f0       	brcs	.+8      	; 0xd22 <__udivmodsi4_ep>
 d1a:	a2 1b       	sub	r26, r18
 d1c:	b3 0b       	sbc	r27, r19
 d1e:	e4 0b       	sbc	r30, r20
 d20:	f5 0b       	sbc	r31, r21

00000d22 <__udivmodsi4_ep>:
 d22:	66 1f       	adc	r22, r22
 d24:	77 1f       	adc	r23, r23
 d26:	88 1f       	adc	r24, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	1a 94       	dec	r1
 d2c:	69 f7       	brne	.-38     	; 0xd08 <__udivmodsi4_loop>
 d2e:	60 95       	com	r22
 d30:	70 95       	com	r23
 d32:	80 95       	com	r24
 d34:	90 95       	com	r25
 d36:	9b 01       	movw	r18, r22
 d38:	ac 01       	movw	r20, r24
 d3a:	bd 01       	movw	r22, r26
 d3c:	cf 01       	movw	r24, r30
 d3e:	08 95       	ret

00000d40 <__umulhisi3>:
 d40:	a2 9f       	mul	r26, r18
 d42:	b0 01       	movw	r22, r0
 d44:	b3 9f       	mul	r27, r19
 d46:	c0 01       	movw	r24, r0
 d48:	a3 9f       	mul	r26, r19
 d4a:	70 0d       	add	r23, r0
 d4c:	81 1d       	adc	r24, r1
 d4e:	11 24       	eor	r1, r1
 d50:	91 1d       	adc	r25, r1
 d52:	b2 9f       	mul	r27, r18
 d54:	70 0d       	add	r23, r0
 d56:	81 1d       	adc	r24, r1
 d58:	11 24       	eor	r1, r1
 d5a:	91 1d       	adc	r25, r1
 d5c:	08 95       	ret

00000d5e <_exit>:
 d5e:	f8 94       	cli

00000d60 <__stop_program>:
 d60:	ff cf       	rjmp	.-2      	; 0xd60 <__stop_program>
