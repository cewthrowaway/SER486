
bin/Debug/Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00001abc  00001b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00001a94  00001a94  00001b28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000036d  008001b4  008001b4  00001c04  2**0
                  ALLOC
  4 .stab         00001cec  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000013ec  00000000  00000000  000038f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  00004cdc  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d00  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00004d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00005334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000058d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  000058f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_18>
      4c:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec eb       	ldi	r30, 0xBC	; 188
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3b       	cpi	r26, 0xB4	; 180
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a4 eb       	ldi	r26, 0xB4	; 180
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 32       	cpi	r26, 0x21	; 33
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 49 02 	call	0x492	; 0x492 <main>
      9e:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
/*********** Private declarations ***********/
int is_data_valid();
void write_defaults();

/*********** Public definitions ***********/
void config_init() {
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
  /* while the data is not valid */

  /* write defaults */
  /* init config with defaults */
  /* clear the modified flag */
}
      ae:	00 00       	nop
      b0:	df 91       	pop	r29
      b2:	cf 91       	pop	r28
      b4:	08 95       	ret

000000b6 <config_update>:
void config_update() {
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
  /* if eeprom is busy or !modified just return */

  /* update the checksum */
  /* write config to eeprom */
  /* clear the modified flag */
}
      be:	00 00       	nop
      c0:	df 91       	pop	r29
      c2:	cf 91       	pop	r28
      c4:	08 95       	ret

000000c6 <config_set_modified>:
void config_set_modified() {
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
  config_modified = 1;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
}
      d4:	00 00       	nop
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <is_data_valid>:


/*********** Private definitions ***********/
int is_data_valid() {
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
  // todo 
  return 0;
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	90 e0       	ldi	r25, 0x00	; 0
}
      e8:	df 91       	pop	r29
      ea:	cf 91       	pop	r28
      ec:	08 95       	ret

000000ee <write_defaults>:
void write_defaults() {
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
  /* upate_checksum() for defaults*/

  /* write defaults to eeprom */
      f6:	00 00       	nop
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <eeprom_unlock>:
 * Returns ...
 * Changes ...
 */
void eeprom_unlock() {
  /* Write logical one to EEMPE */
  EECR |= (1 << EEMPE);
      fe:	fa 9a       	sbi	0x1f, 2	; 31
  /* Start eeprom write by setting EEPE */
  EECR |= (1 << EEPE);
     100:	f9 9a       	sbi	0x1f, 1	; 31
}
     102:	08 95       	ret

00000104 <__vector_22>:

/* Enabled when writebuf() places new data in the write buffer, this ISR sends
 * one byte at a time to the EEPROM. When the last byte is sent, it disables
 * futher EERPOM interrupts */
/* should this bee vector 22 or 23?? Documents say 23 for EE ready */
void __vector_22() {
     104:	1f 92       	push	r1
     106:	0f 92       	push	r0
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	0f 92       	push	r0
     10c:	11 24       	eor	r1, r1
     10e:	2f 93       	push	r18
     110:	3f 93       	push	r19
     112:	4f 93       	push	r20
     114:	5f 93       	push	r21
     116:	6f 93       	push	r22
     118:	7f 93       	push	r23
     11a:	8f 93       	push	r24
     11c:	9f 93       	push	r25
     11e:	af 93       	push	r26
     120:	bf 93       	push	r27
     122:	ef 93       	push	r30
     124:	ff 93       	push	r31
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62


  /* if you haven't written all characters in then keep writing */
  /* should we check to see if it is ready to write? */
  if (bufidx < writesize) {
     12e:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <bufidx>
     132:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <writesize>
     136:	98 17       	cp	r25, r24
     138:	78 f5       	brcc	.+94     	; 0x198 <__vector_22+0x94>
      /* set high byte */
    EEARH = (writeaddr >> 8) & 0xFF;
     13a:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <writeaddr>
     13e:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <writeaddr+0x1>
     142:	29 2f       	mov	r18, r25
     144:	33 27       	eor	r19, r19
     146:	82 e4       	ldi	r24, 0x42	; 66
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
    /* set low byte */
    EEARL = writeaddr & 0xFF;
     14e:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <writeaddr>
     152:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <writeaddr+0x1>
     156:	81 e4       	ldi	r24, 0x41	; 65
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	20 83       	st	Z, r18
    // EEARL = writeaddr;

    EEDR = writebuf[bufidx];
     15e:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <bufidx>
     162:	28 2f       	mov	r18, r24
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	80 e4       	ldi	r24, 0x40	; 64
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	2b 59       	subi	r18, 0x9B	; 155
     16c:	3d 4f       	sbci	r19, 0xFD	; 253
     16e:	f9 01       	movw	r30, r18
     170:	20 81       	ld	r18, Z
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
    eeprom_unlock();
     176:	0e 94 7f 00 	call	0xfe	; 0xfe <eeprom_unlock>
    // Debug print
    // printf("%d: %X %X EEDR: %c\n\r", bufidx, EEARL, EEARH, EEDR);
    bufidx++;
     17a:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <bufidx>
     17e:	8f 5f       	subi	r24, 0xFF	; 255
     180:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <bufidx>
    writeaddr++;
     184:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <writeaddr>
     188:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <writeaddr+0x1>
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <writeaddr+0x1>
     192:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <writeaddr>
    /* disable interrupts */
    disable_interrupt();
    /* make ready to write another */
    write_busy = 0;
  }
}
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <__vector_22+0x9c>
    bufidx++;
    writeaddr++;
  } else {

    /* disable interrupts */
    disable_interrupt();
     198:	0e 94 a9 01 	call	0x352	; 0x352 <disable_interrupt>
    /* make ready to write another */
    write_busy = 0;
     19c:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <write_busy>
  }
}
     1a0:	00 00       	nop
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	ff 91       	pop	r31
     1a8:	ef 91       	pop	r30
     1aa:	bf 91       	pop	r27
     1ac:	af 91       	pop	r26
     1ae:	9f 91       	pop	r25
     1b0:	8f 91       	pop	r24
     1b2:	7f 91       	pop	r23
     1b4:	6f 91       	pop	r22
     1b6:	5f 91       	pop	r21
     1b8:	4f 91       	pop	r20
     1ba:	3f 91       	pop	r19
     1bc:	2f 91       	pop	r18
     1be:	0f 90       	pop	r0
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	0f 90       	pop	r0
     1c4:	1f 90       	pop	r1
     1c6:	18 95       	reti

000001c8 <eeprom_writebuf>:
/* this function places the data (specified buf and size) into the write buffer
 * for later writing to the EEPROM. The addr parameter specifies the location to
 * write the data to. */
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf,
                     unsigned char size) {
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <eeprom_writebuf+0x6>
     1ce:	00 d0       	rcall	.+0      	; 0x1d0 <eeprom_writebuf+0x8>
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <eeprom_writebuf+0xa>
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	9b 83       	std	Y+3, r25	; 0x03
     1d8:	8a 83       	std	Y+2, r24	; 0x02
     1da:	7d 83       	std	Y+5, r23	; 0x05
     1dc:	6c 83       	std	Y+4, r22	; 0x04
     1de:	4e 83       	std	Y+6, r20	; 0x06
  // check that write_busy is 0
  if (write_busy > 0) {
     1e0:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <write_busy>
     1e4:	88 23       	and	r24, r24
     1e6:	b9 f5       	brne	.+110    	; 0x256 <eeprom_writebuf+0x8e>
    return;
  }
  if (size > 64) {
     1e8:	8e 81       	ldd	r24, Y+6	; 0x06
     1ea:	81 34       	cpi	r24, 0x41	; 65
     1ec:	b0 f5       	brcc	.+108    	; 0x25a <eeprom_writebuf+0x92>
    return;
  }
  if ((addr + size) > 0x3FF) {
     1ee:	8e 81       	ldd	r24, Y+6	; 0x06
     1f0:	28 2f       	mov	r18, r24
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	8a 81       	ldd	r24, Y+2	; 0x02
     1f6:	9b 81       	ldd	r25, Y+3	; 0x03
     1f8:	82 0f       	add	r24, r18
     1fa:	93 1f       	adc	r25, r19
     1fc:	81 15       	cp	r24, r1
     1fe:	94 40       	sbci	r25, 0x04	; 4
     200:	70 f5       	brcc	.+92     	; 0x25e <eeprom_writebuf+0x96>
    return;
  }
  /* the EEPROM is now writing */
  write_busy = 1;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <write_busy>
  /* change the write address */
  writeaddr = addr;
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	9b 81       	ldd	r25, Y+3	; 0x03
     20c:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <writeaddr+0x1>
     210:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <writeaddr>
  /* start reading from the beginning of the buffer */
  bufidx = 0;
     214:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <bufidx>

  /* copy buf to writebuf and configure writesize */
  for (unsigned char i = 0; i < size; i++) {
     218:	19 82       	std	Y+1, r1	; 0x01
     21a:	13 c0       	rjmp	.+38     	; 0x242 <eeprom_writebuf+0x7a>
    writebuf[i] = buf[i];
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	88 2f       	mov	r24, r24
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	2c 81       	ldd	r18, Y+4	; 0x04
     224:	3d 81       	ldd	r19, Y+5	; 0x05
     226:	28 0f       	add	r18, r24
     228:	39 1f       	adc	r19, r25
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	f9 01       	movw	r30, r18
     232:	20 81       	ld	r18, Z
     234:	8b 59       	subi	r24, 0x9B	; 155
     236:	9d 4f       	sbci	r25, 0xFD	; 253
     238:	fc 01       	movw	r30, r24
     23a:	20 83       	st	Z, r18
  writeaddr = addr;
  /* start reading from the beginning of the buffer */
  bufidx = 0;

  /* copy buf to writebuf and configure writesize */
  for (unsigned char i = 0; i < size; i++) {
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	8f 5f       	subi	r24, 0xFF	; 255
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	99 81       	ldd	r25, Y+1	; 0x01
     244:	8e 81       	ldd	r24, Y+6	; 0x06
     246:	98 17       	cp	r25, r24
     248:	48 f3       	brcs	.-46     	; 0x21c <eeprom_writebuf+0x54>
    writebuf[i] = buf[i];
  }

  writesize = size;
     24a:	8e 81       	ldd	r24, Y+6	; 0x06
     24c:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <writesize>

  /* enable the EEPROM ready interrupts */
  enable_interrupt();
     250:	0e 94 98 01 	call	0x330	; 0x330 <enable_interrupt>
     254:	05 c0       	rjmp	.+10     	; 0x260 <eeprom_writebuf+0x98>
/* This function should not be called when another write is in progress. */
void eeprom_writebuf(unsigned int addr, unsigned char *buf,
                     unsigned char size) {
  // check that write_busy is 0
  if (write_busy > 0) {
    return;
     256:	00 00       	nop
     258:	03 c0       	rjmp	.+6      	; 0x260 <eeprom_writebuf+0x98>
  }
  if (size > 64) {
    return;
     25a:	00 00       	nop
     25c:	01 c0       	rjmp	.+2      	; 0x260 <eeprom_writebuf+0x98>
  }
  if ((addr + size) > 0x3FF) {
    return;
     25e:	00 00       	nop

  writesize = size;

  /* enable the EEPROM ready interrupts */
  enable_interrupt();
}
     260:	26 96       	adiw	r28, 0x06	; 6
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <eeprom_readbuf>:

/* this function reads a specified amount of data(size) from the EEPROM starting
 * at a specified address(addr) and places it in the specified buffer(buf) */
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	00 d0       	rcall	.+0      	; 0x278 <eeprom_readbuf+0x6>
     278:	00 d0       	rcall	.+0      	; 0x27a <eeprom_readbuf+0x8>
     27a:	00 d0       	rcall	.+0      	; 0x27c <eeprom_readbuf+0xa>
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	9b 83       	std	Y+3, r25	; 0x03
     282:	8a 83       	std	Y+2, r24	; 0x02
     284:	7d 83       	std	Y+5, r23	; 0x05
     286:	6c 83       	std	Y+4, r22	; 0x04
     288:	4e 83       	std	Y+6, r20	; 0x06

  if (size > 64) {
     28a:	8e 81       	ldd	r24, Y+6	; 0x06
     28c:	81 34       	cpi	r24, 0x41	; 65
     28e:	b8 f5       	brcc	.+110    	; 0x2fe <eeprom_readbuf+0x8c>
    /* write error. buffer is too big */
    return;
  }
  while (eeprom_isbusy());
     290:	00 00       	nop
     292:	0e 94 89 01 	call	0x312	; 0x312 <eeprom_isbusy>
     296:	89 2b       	or	r24, r25
     298:	e1 f7       	brne	.-8      	; 0x292 <eeprom_readbuf+0x20>

  for (unsigned char i = 0; i < size; i++) {
     29a:	19 82       	std	Y+1, r1	; 0x01
     29c:	2b c0       	rjmp	.+86     	; 0x2f4 <eeprom_readbuf+0x82>


      /* set high byte */
    EEARH = (addr >> 8) & 0xFF;
     29e:	8a 81       	ldd	r24, Y+2	; 0x02
     2a0:	9b 81       	ldd	r25, Y+3	; 0x03
     2a2:	29 2f       	mov	r18, r25
     2a4:	33 27       	eor	r19, r19
     2a6:	82 e4       	ldi	r24, 0x42	; 66
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
    /* set low byte */
    EEARL = addr & 0xFF;
     2ae:	81 e4       	ldi	r24, 0x41	; 65
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	2a 81       	ldd	r18, Y+2	; 0x02
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 83       	st	Z, r18

    // EEARL = addr;

    /* set mode to read */
    EECR |= (1 << EERE);
     2b8:	8f e3       	ldi	r24, 0x3F	; 63
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fc 01       	movw	r30, r24
     2be:	20 81       	ld	r18, Z
     2c0:	8f e3       	ldi	r24, 0x3F	; 63
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	21 60       	ori	r18, 0x01	; 1
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18


    /* write from register to buffer */
    buf[i] = EEDR;
     2ca:	20 e4       	ldi	r18, 0x40	; 64
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	88 2f       	mov	r24, r24
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	4c 81       	ldd	r20, Y+4	; 0x04
     2d6:	5d 81       	ldd	r21, Y+5	; 0x05
     2d8:	84 0f       	add	r24, r20
     2da:	95 1f       	adc	r25, r21
     2dc:	f9 01       	movw	r30, r18
     2de:	20 81       	ld	r18, Z
     2e0:	fc 01       	movw	r30, r24
     2e2:	20 83       	st	Z, r18
    addr++;
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	9b 81       	ldd	r25, Y+3	; 0x03
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	9b 83       	std	Y+3, r25	; 0x03
     2ec:	8a 83       	std	Y+2, r24	; 0x02
    /* write error. buffer is too big */
    return;
  }
  while (eeprom_isbusy());

  for (unsigned char i = 0; i < size; i++) {
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	8f 5f       	subi	r24, 0xFF	; 255
     2f2:	89 83       	std	Y+1, r24	; 0x01
     2f4:	99 81       	ldd	r25, Y+1	; 0x01
     2f6:	8e 81       	ldd	r24, Y+6	; 0x06
     2f8:	98 17       	cp	r25, r24
     2fa:	88 f2       	brcs	.-94     	; 0x29e <eeprom_readbuf+0x2c>
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <eeprom_readbuf+0x8e>
 * at a specified address(addr) and places it in the specified buffer(buf) */
void eeprom_readbuf(unsigned int addr, unsigned char *buf, unsigned char size) {

  if (size > 64) {
    /* write error. buffer is too big */
    return;
     2fe:	00 00       	nop

    /* write from register to buffer */
    buf[i] = EEDR;
    addr++;
  }
}
     300:	26 96       	adiw	r28, 0x06	; 6
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <eeprom_isbusy>:

/* this functiosn returns 0 if write_busy is 0, otherwise, returns 1 */
int eeprom_isbusy() {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62


  return  write_busy == 1;
     31a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <write_busy>
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	91 30       	cpi	r25, 0x01	; 1
     322:	09 f0       	breq	.+2      	; 0x326 <eeprom_isbusy+0x14>
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	88 2f       	mov	r24, r24
     328:	90 e0       	ldi	r25, 0x00	; 0
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <enable_interrupt>:

void enable_interrupt() { 
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
  EECR |= (1 << EERIE); 
     338:	8f e3       	ldi	r24, 0x3F	; 63
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	fc 01       	movw	r30, r24
     33e:	20 81       	ld	r18, Z
     340:	8f e3       	ldi	r24, 0x3F	; 63
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	28 60       	ori	r18, 0x08	; 8
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18

}
     34a:	00 00       	nop
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <disable_interrupt>:

void disable_interrupt() { EECR &= ~(1 << EERIE); }
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	8f e3       	ldi	r24, 0x3F	; 63
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	fc 01       	movw	r30, r24
     360:	20 81       	ld	r18, Z
     362:	8f e3       	ldi	r24, 0x3F	; 63
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	27 7f       	andi	r18, 0xF7	; 247
     368:	fc 01       	movw	r30, r24
     36a:	20 83       	st	Z, r18
     36c:	00 00       	nop
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <test_eeprom_uart>:
#include "led.h"
#include "log.h"
#include "util.h"


void test_eeprom_uart() {
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	c5 54       	subi	r28, 0x45	; 69
     37e:	d1 09       	sbc	r29, r1
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
    // Define test data
    const char *test_string = "Hello, EEPROM!";
     38a:	8d e5       	ldi	r24, 0x5D	; 93
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	9b 83       	std	Y+3, r25	; 0x03
     390:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char write_buffer[32];  // Use a buffer sized for the actual test string
    unsigned char read_buffer[32];   // Separate buffer for reading
    unsigned int test_address = 0x0010; // Example EEPROM start address
     392:	80 e1       	ldi	r24, 0x10	; 16
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	9d 83       	std	Y+5, r25	; 0x05
     398:	8c 83       	std	Y+4, r24	; 0x04
    unsigned char test_size = 0;
     39a:	19 82       	std	Y+1, r1	; 0x01

    // Manually copy test_string into write_buffer
    for (test_size = 0; test_string[test_size] != '\0'; test_size++) {
     39c:	19 82       	std	Y+1, r1	; 0x01
     39e:	17 c0       	rjmp	.+46     	; 0x3ce <test_eeprom_uart+0x5a>
        write_buffer[test_size] = test_string[test_size];
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	88 2f       	mov	r24, r24
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	2a 81       	ldd	r18, Y+2	; 0x02
     3a8:	3b 81       	ldd	r19, Y+3	; 0x03
     3aa:	82 0f       	add	r24, r18
     3ac:	93 1f       	adc	r25, r19
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 81       	ld	r18, Z
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	88 2f       	mov	r24, r24
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	42 2f       	mov	r20, r18
     3ba:	9e 01       	movw	r18, r28
     3bc:	2a 5f       	subi	r18, 0xFA	; 250
     3be:	3f 4f       	sbci	r19, 0xFF	; 255
     3c0:	82 0f       	add	r24, r18
     3c2:	93 1f       	adc	r25, r19
     3c4:	fc 01       	movw	r30, r24
     3c6:	40 83       	st	Z, r20
    unsigned char read_buffer[32];   // Separate buffer for reading
    unsigned int test_address = 0x0010; // Example EEPROM start address
    unsigned char test_size = 0;

    // Manually copy test_string into write_buffer
    for (test_size = 0; test_string[test_size] != '\0'; test_size++) {
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	8f 5f       	subi	r24, 0xFF	; 255
     3cc:	89 83       	std	Y+1, r24	; 0x01
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	88 2f       	mov	r24, r24
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	2a 81       	ldd	r18, Y+2	; 0x02
     3d6:	3b 81       	ldd	r19, Y+3	; 0x03
     3d8:	82 0f       	add	r24, r18
     3da:	93 1f       	adc	r25, r19
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	88 23       	and	r24, r24
     3e2:	f1 f6       	brne	.-68     	; 0x3a0 <test_eeprom_uart+0x2c>
        write_buffer[test_size] = test_string[test_size];
    }
    write_buffer[test_size] = '\0';  // Include null terminator
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	88 2f       	mov	r24, r24
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9e 01       	movw	r18, r28
     3ec:	2a 5f       	subi	r18, 0xFA	; 250
     3ee:	3f 4f       	sbci	r19, 0xFF	; 255
     3f0:	82 0f       	add	r24, r18
     3f2:	93 1f       	adc	r25, r19
     3f4:	fc 01       	movw	r30, r24
     3f6:	10 82       	st	Z, r1
    test_size++;  // Add 1 for the null terminator
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	8f 5f       	subi	r24, 0xFF	; 255
     3fc:	89 83       	std	Y+1, r24	; 0x01

    // Write test data to EEPROM
    eeprom_writebuf(test_address, write_buffer, test_size);
     3fe:	9e 01       	movw	r18, r28
     400:	2a 5f       	subi	r18, 0xFA	; 250
     402:	3f 4f       	sbci	r19, 0xFF	; 255
     404:	8c 81       	ldd	r24, Y+4	; 0x04
     406:	9d 81       	ldd	r25, Y+5	; 0x05
     408:	49 81       	ldd	r20, Y+1	; 0x01
     40a:	b9 01       	movw	r22, r18
     40c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <eeprom_writebuf>

    // Simulate EEPROM write completion
    while (eeprom_isbusy()) {
     410:	00 00       	nop
     412:	0e 94 89 01 	call	0x312	; 0x312 <eeprom_isbusy>
     416:	89 2b       	or	r24, r25
     418:	e1 f7       	brne	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
        // Simulated EEPROM ISR writes data
    }

    // Read data back from EEPROM
    eeprom_readbuf(test_address, read_buffer, test_size);
     41a:	9e 01       	movw	r18, r28
     41c:	2a 5d       	subi	r18, 0xDA	; 218
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	8c 81       	ldd	r24, Y+4	; 0x04
     422:	9d 81       	ldd	r25, Y+5	; 0x05
     424:	49 81       	ldd	r20, Y+1	; 0x01
     426:	b9 01       	movw	r22, r18
     428:	0e 94 39 01 	call	0x272	; 0x272 <eeprom_readbuf>

    // Null-terminate the read buffer for safety
    read_buffer[test_size - 1] = '\0';
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	88 2f       	mov	r24, r24
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	9e 01       	movw	r18, r28
     436:	2a 5d       	subi	r18, 0xDA	; 218
     438:	3f 4f       	sbci	r19, 0xFF	; 255
     43a:	82 0f       	add	r24, r18
     43c:	93 1f       	adc	r25, r19
     43e:	fc 01       	movw	r30, r24
     440:	10 82       	st	Z, r1

    // Output the read data via UART
    uart_writestr("Read from EEPROM: ");
     442:	8c e6       	ldi	r24, 0x6C	; 108
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	0e 94 9f 09 	call	0x133e	; 0x133e <uart_writestr>
    uart_writestr((char *)read_buffer);
     44a:	ce 01       	movw	r24, r28
     44c:	86 96       	adiw	r24, 0x26	; 38
     44e:	0e 94 9f 09 	call	0x133e	; 0x133e <uart_writestr>
    uart_writestr("\n");
     452:	8f e7       	ldi	r24, 0x7F	; 127
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 9f 09 	call	0x133e	; 0x133e <uart_writestr>
}
     45a:	00 00       	nop
     45c:	cb 5b       	subi	r28, 0xBB	; 187
     45e:	df 4f       	sbci	r29, 0xFF	; 255
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <enable_global_interrupts>:

#define SREG (*(volatile unsigned char *)0x5F)
#define I_BIT 7

void enable_global_interrupts() {
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
    SREG |= (1 << I_BIT);  // Set the I bit to enable interrupts
     478:	8f e5       	ldi	r24, 0x5F	; 95
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	fc 01       	movw	r30, r24
     47e:	20 81       	ld	r18, Z
     480:	8f e5       	ldi	r24, 0x5F	; 95
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	20 68       	ori	r18, 0x80	; 128
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
}
     48a:	00 00       	nop
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <main>:

int main() {
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	00 d0       	rcall	.+0      	; 0x498 <main+0x6>
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
  enable_global_interrupts();
     49c:	0e 94 38 02 	call	0x470	; 0x470 <enable_global_interrupts>
  // variable to track if the eeprom has been dumped
  int dumped = 0;
     4a0:	1a 82       	std	Y+2, r1	; 0x02
     4a2:	19 82       	std	Y+1, r1	; 0x01
  test_eeprom_uart();
     4a4:	0e 94 ba 01 	call	0x374	; 0x374 <test_eeprom_uart>
  // init uart
  uart_init();
     4a8:	0e 94 99 09 	call	0x1332	; 0x1332 <uart_init>
  // init conig
  // init led
  led_init();
     4ac:	0e 94 f6 03 	call	0x7ec	; 0x7ec <led_init>
  // init log
  log_init();
     4b0:	0e 94 28 04 	call	0x850	; 0x850 <log_init>
  // init rtc
  // init vpd

  // led blink pattern "--- -.-"
  led_set_blink("--- -.-"); 
     4b4:	81 e8       	ldi	r24, 0x81	; 129
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 8a 03 	call	0x714	; 0x714 <led_set_blink>
  // read/write the token to uart \n

  // set the config_use_static_ip to 1
  // set the config modified state
  // clear the event log
  log_clear();
     4bc:	0e 94 74 05 	call	0xae8	; 0xae8 <log_clear>
  log_add_record(0xaa);
     4c0:	8a ea       	ldi	r24, 0xAA	; 170
     4c2:	0e 94 23 05 	call	0xa46	; 0xa46 <log_add_record>
  log_add_record(0xbb);
     4c6:	8b eb       	ldi	r24, 0xBB	; 187
     4c8:	0e 94 23 05 	call	0xa46	; 0xa46 <log_add_record>
  log_add_record(0xc);
     4cc:	8c e0       	ldi	r24, 0x0C	; 12
     4ce:	0e 94 23 05 	call	0xa46	; 0xa46 <log_add_record>

  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc
  uart_writechar(log_get_num_entries());
     4d2:	0e 94 91 05 	call	0xb22	; 0xb22 <log_get_num_entries>
     4d6:	0e 94 9d 09 	call	0x133a	; 0x133a <uart_writechar>

  while(1) {
    // update the blink fsm every
    led_update();
     4da:	0e 94 9c 03 	call	0x738	; 0x738 <led_update>
      // update the log in EEPROM

    // if (config has changed && eeprom is not busy)
      // update config in EEPROM

    if ((!eeprom_isbusy()) && (!dumped)) {
     4de:	0e 94 89 01 	call	0x312	; 0x312 <eeprom_isbusy>
     4e2:	89 2b       	or	r24, r25
     4e4:	d1 f7       	brne	.-12     	; 0x4da <main+0x48>
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	89 2b       	or	r24, r25
     4ec:	b1 f7       	brne	.-20     	; 0x4da <main+0x48>
          dump_eeprom(0,0x100);
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	71 e0       	ldi	r23, 0x01	; 1
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <dump_eeprom>
          dumped=1;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
  // add 3 recods to event log values: 0xaa, 0xbb, and 0xc
  uart_writechar(log_get_num_entries());

  while(1) {
    // update the blink fsm every
    led_update();
     502:	eb cf       	rjmp	.-42     	; 0x4da <main+0x48>

00000504 <update_checksum>:
#include "util.h"

void update_checksum(unsigned char* data, unsigned int size) {
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	28 97       	sbiw	r28, 0x08	; 8
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61
     518:	9e 83       	std	Y+6, r25	; 0x06
     51a:	8d 83       	std	Y+5, r24	; 0x05
     51c:	78 87       	std	Y+8, r23	; 0x08
     51e:	6f 83       	std	Y+7, r22	; 0x07
    if (size == 0) return; // Handle empty data structure
     520:	8f 81       	ldd	r24, Y+7	; 0x07
     522:	98 85       	ldd	r25, Y+8	; 0x08
     524:	89 2b       	or	r24, r25
     526:	79 f1       	breq	.+94     	; 0x586 <update_checksum+0x82>

    unsigned int sum = 0;
     528:	1a 82       	std	Y+2, r1	; 0x02
     52a:	19 82       	std	Y+1, r1	; 0x01

    // Calculate the sum of all bytes except the last one
    for (unsigned int i = 0; i < size - 1; i++) {
     52c:	1c 82       	std	Y+4, r1	; 0x04
     52e:	1b 82       	std	Y+3, r1	; 0x03
     530:	15 c0       	rjmp	.+42     	; 0x55c <update_checksum+0x58>
        sum += (unsigned char)data[i];
     532:	2d 81       	ldd	r18, Y+5	; 0x05
     534:	3e 81       	ldd	r19, Y+6	; 0x06
     536:	8b 81       	ldd	r24, Y+3	; 0x03
     538:	9c 81       	ldd	r25, Y+4	; 0x04
     53a:	82 0f       	add	r24, r18
     53c:	93 1f       	adc	r25, r19
     53e:	fc 01       	movw	r30, r24
     540:	80 81       	ld	r24, Z
     542:	88 2f       	mov	r24, r24
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	29 81       	ldd	r18, Y+1	; 0x01
     548:	3a 81       	ldd	r19, Y+2	; 0x02
     54a:	82 0f       	add	r24, r18
     54c:	93 1f       	adc	r25, r19
     54e:	9a 83       	std	Y+2, r25	; 0x02
     550:	89 83       	std	Y+1, r24	; 0x01
    if (size == 0) return; // Handle empty data structure

    unsigned int sum = 0;

    // Calculate the sum of all bytes except the last one
    for (unsigned int i = 0; i < size - 1; i++) {
     552:	8b 81       	ldd	r24, Y+3	; 0x03
     554:	9c 81       	ldd	r25, Y+4	; 0x04
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	9c 83       	std	Y+4, r25	; 0x04
     55a:	8b 83       	std	Y+3, r24	; 0x03
     55c:	8f 81       	ldd	r24, Y+7	; 0x07
     55e:	98 85       	ldd	r25, Y+8	; 0x08
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	2b 81       	ldd	r18, Y+3	; 0x03
     564:	3c 81       	ldd	r19, Y+4	; 0x04
     566:	28 17       	cp	r18, r24
     568:	39 07       	cpc	r19, r25
     56a:	18 f3       	brcs	.-58     	; 0x532 <update_checksum+0x2e>
        sum += (unsigned char)data[i];
    }

    // Calculate the checksum value for the last byte
    data[size - 1] = (char)(-sum & 0xFF); // Ensure it wraps within one byte
     56c:	49 81       	ldd	r20, Y+1	; 0x01
     56e:	8f 81       	ldd	r24, Y+7	; 0x07
     570:	98 85       	ldd	r25, Y+8	; 0x08
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	2d 81       	ldd	r18, Y+5	; 0x05
     576:	3e 81       	ldd	r19, Y+6	; 0x06
     578:	82 0f       	add	r24, r18
     57a:	93 1f       	adc	r25, r19
     57c:	24 2f       	mov	r18, r20
     57e:	21 95       	neg	r18
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
     584:	01 c0       	rjmp	.+2      	; 0x588 <update_checksum+0x84>
#include "util.h"

void update_checksum(unsigned char* data, unsigned int size) {
    if (size == 0) return; // Handle empty data structure
     586:	00 00       	nop
        sum += (unsigned char)data[i];
    }

    // Calculate the checksum value for the last byte
    data[size - 1] = (char)(-sum & 0xFF); // Ensure it wraps within one byte
}
     588:	28 96       	adiw	r28, 0x08	; 8
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	de bf       	out	0x3e, r29	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	cd bf       	out	0x3d, r28	; 61
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <is_checksum_valid>:


int is_checksum_valid(unsigned char* data, unsigned int size) {
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	28 97       	sbiw	r28, 0x08	; 8
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	de bf       	out	0x3e, r29	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	9e 83       	std	Y+6, r25	; 0x06
     5b0:	8d 83       	std	Y+5, r24	; 0x05
     5b2:	78 87       	std	Y+8, r23	; 0x08
     5b4:	6f 83       	std	Y+7, r22	; 0x07
    if (size == 0) return 0; // Invalid for empty data structure
     5b6:	8f 81       	ldd	r24, Y+7	; 0x07
     5b8:	98 85       	ldd	r25, Y+8	; 0x08
     5ba:	89 2b       	or	r24, r25
     5bc:	19 f4       	brne	.+6      	; 0x5c4 <is_checksum_valid+0x2a>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	2a c0       	rjmp	.+84     	; 0x618 <is_checksum_valid+0x7e>

    unsigned int sum = 0;
     5c4:	1a 82       	std	Y+2, r1	; 0x02
     5c6:	19 82       	std	Y+1, r1	; 0x01

    // Calculate the sum of all bytes
    for (unsigned int i = 0; i < size; i++) {
     5c8:	1c 82       	std	Y+4, r1	; 0x04
     5ca:	1b 82       	std	Y+3, r1	; 0x03
     5cc:	15 c0       	rjmp	.+42     	; 0x5f8 <is_checksum_valid+0x5e>
        sum += (unsigned char)data[i];
     5ce:	2d 81       	ldd	r18, Y+5	; 0x05
     5d0:	3e 81       	ldd	r19, Y+6	; 0x06
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	9c 81       	ldd	r25, Y+4	; 0x04
     5d6:	82 0f       	add	r24, r18
     5d8:	93 1f       	adc	r25, r19
     5da:	fc 01       	movw	r30, r24
     5dc:	80 81       	ld	r24, Z
     5de:	88 2f       	mov	r24, r24
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	29 81       	ldd	r18, Y+1	; 0x01
     5e4:	3a 81       	ldd	r19, Y+2	; 0x02
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	9a 83       	std	Y+2, r25	; 0x02
     5ec:	89 83       	std	Y+1, r24	; 0x01
    if (size == 0) return 0; // Invalid for empty data structure

    unsigned int sum = 0;

    // Calculate the sum of all bytes
    for (unsigned int i = 0; i < size; i++) {
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	9c 81       	ldd	r25, Y+4	; 0x04
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	9c 83       	std	Y+4, r25	; 0x04
     5f6:	8b 83       	std	Y+3, r24	; 0x03
     5f8:	2b 81       	ldd	r18, Y+3	; 0x03
     5fa:	3c 81       	ldd	r19, Y+4	; 0x04
     5fc:	8f 81       	ldd	r24, Y+7	; 0x07
     5fe:	98 85       	ldd	r25, Y+8	; 0x08
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	20 f3       	brcs	.-56     	; 0x5ce <is_checksum_valid+0x34>
        sum += (unsigned char)data[i];
    }

    // Return 1 if the sum is zero, otherwise 0
    return (sum & 0xFF) == 0;
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	9a 81       	ldd	r25, Y+2	; 0x02
     60a:	99 27       	eor	r25, r25
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	89 2b       	or	r24, r25
     610:	09 f0       	breq	.+2      	; 0x614 <is_checksum_valid+0x7a>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	82 2f       	mov	r24, r18
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	28 96       	adiw	r28, 0x08	; 8
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <read_vpd>:
struct vpd_struct vpd;
struct vpd_struct defaults = {"SER", "DaVonte", "Carter", "super1337", 0, {'D'&0xFE,'a','V','C','a','r'}, "USA", 0};

/********** private declarations **********/
/* read manufacturer data from eeprom */
void read_vpd() {
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
}
     632:	00 00       	nop
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <vpd_init>:

int cmp_str(const char *str1, const char *str2) ;


/********** public definitions **********/
void vpd_init() {
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
  // wait for the eeprom to free up
  while(eeprom_isbusy());
     642:	00 00       	nop
     644:	0e 94 89 01 	call	0x312	; 0x312 <eeprom_isbusy>
     648:	89 2b       	or	r24, r25
     64a:	e1 f7       	brne	.-8      	; 0x644 <vpd_init+0xa>
  
  /* read all data from the EEPROM at address 0x000 */

  /* if the data was invalid then write defaults and try to reinitialize */
  while(!vpd_is_data_valid()) {
     64c:	00 00       	nop
     64e:	0e 94 37 03 	call	0x66e	; 0x66e <vpd_is_data_valid>
     652:	89 2b       	or	r24, r25
     654:	e1 f3       	breq	.-8      	; 0x64e <vpd_init+0x14>
    // initialize data from defaults
    // read defaults
  }
}
     656:	00 00       	nop
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <vpd_write_defaults>:

void vpd_write_defaults() {
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
  /* update checksum for defaults */
  
  /* write the defaults */


}
     666:	00 00       	nop
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <vpd_is_data_valid>:

int vpd_is_data_valid() {
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
  return cmp_str(vpd.token, "SER");
     676:	69 e8       	ldi	r22, 0x89	; 137
     678:	71 e0       	ldi	r23, 0x01	; 1
     67a:	86 e6       	ldi	r24, 0x66	; 102
     67c:	94 e0       	ldi	r25, 0x04	; 4
     67e:	0e 94 44 03 	call	0x688	; 0x688 <cmp_str>
    // return (vpd.token == "SER") && is_checksum_valid();

}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <cmp_str>:

/********** private definitions **********/

int cmp_str(const char *str1, const char *str2) {
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	00 d0       	rcall	.+0      	; 0x68e <cmp_str+0x6>
     68e:	00 d0       	rcall	.+0      	; 0x690 <cmp_str+0x8>
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	9a 83       	std	Y+2, r25	; 0x02
     696:	89 83       	std	Y+1, r24	; 0x01
     698:	7c 83       	std	Y+4, r23	; 0x04
     69a:	6b 83       	std	Y+3, r22	; 0x03
  while (*str1 && *str2) {
     69c:	17 c0       	rjmp	.+46     	; 0x6cc <cmp_str+0x44>
    if (*str1 != *str2) {
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 81       	ld	r18, Z
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03
     6a8:	9c 81       	ldd	r25, Y+4	; 0x04
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	28 17       	cp	r18, r24
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <cmp_str+0x30>
      return 0;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	27 c0       	rjmp	.+78     	; 0x706 <cmp_str+0x7e>
    }
    str1++;
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
    str2++;
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
     6c4:	9c 81       	ldd	r25, Y+4	; 0x04
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	9c 83       	std	Y+4, r25	; 0x04
     6ca:	8b 83       	std	Y+3, r24	; 0x03
}

/********** private definitions **********/

int cmp_str(const char *str1, const char *str2) {
  while (*str1 && *str2) {
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	fc 01       	movw	r30, r24
     6d2:	80 81       	ld	r24, Z
     6d4:	88 23       	and	r24, r24
     6d6:	31 f0       	breq	.+12     	; 0x6e4 <cmp_str+0x5c>
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	fc 01       	movw	r30, r24
     6de:	80 81       	ld	r24, Z
     6e0:	88 23       	and	r24, r24
     6e2:	e9 f6       	brne	.-70     	; 0x69e <cmp_str+0x16>
      return 0;
    }
    str1++;
    str2++;
  }
  return *str1 == '\0' && *str2 == '\0';
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	fc 01       	movw	r30, r24
     6ea:	80 81       	ld	r24, Z
     6ec:	88 23       	and	r24, r24
     6ee:	49 f4       	brne	.+18     	; 0x702 <cmp_str+0x7a>
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	fc 01       	movw	r30, r24
     6f6:	80 81       	ld	r24, Z
     6f8:	88 23       	and	r24, r24
     6fa:	19 f4       	brne	.+6      	; 0x702 <cmp_str+0x7a>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <cmp_str+0x7e>
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <led_set_blink>:
     714:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <blink_msg+0x1>
     718:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <blink_msg>
     71c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <blink_pos+0x1>
     720:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <blink_pos>
     724:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <blink_state>
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 99 0b 	call	0x1732	; 0x1732 <delay_set>
     734:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <led_off>

00000738 <led_update>:
     738:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <blink_msg>
     73c:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <blink_msg+0x1>
     740:	89 2b       	or	r24, r25
     742:	09 f4       	brne	.+2      	; 0x746 <led_update+0xe>
     744:	52 c0       	rjmp	.+164    	; 0x7ea <led_update+0xb2>
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 80 0b 	call	0x1700	; 0x1700 <delay_isdone>
     74e:	89 2b       	or	r24, r25
     750:	09 f4       	brne	.+2      	; 0x754 <led_update+0x1c>
     752:	4b c0       	rjmp	.+150    	; 0x7ea <led_update+0xb2>
     754:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <blink_state>
     758:	81 11       	cpse	r24, r1
     75a:	34 c0       	rjmp	.+104    	; 0x7c4 <led_update+0x8c>
     75c:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <blink_pos>
     760:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <blink_pos+0x1>
     764:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <blink_msg>
     768:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <blink_msg+0x1>
     76c:	e2 0f       	add	r30, r18
     76e:	f3 1f       	adc	r31, r19
     770:	80 81       	ld	r24, Z
     772:	80 32       	cpi	r24, 0x20	; 32
     774:	e9 f0       	breq	.+58     	; 0x7b0 <led_update+0x78>
     776:	3c f4       	brge	.+14     	; 0x786 <led_update+0x4e>
     778:	81 11       	cpse	r24, r1
     77a:	1d c0       	rjmp	.+58     	; 0x7b6 <led_update+0x7e>
     77c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <blink_pos+0x1>
     780:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <blink_pos>
     784:	08 95       	ret
     786:	8d 32       	cpi	r24, 0x2D	; 45
     788:	39 f0       	breq	.+14     	; 0x798 <led_update+0x60>
     78a:	8e 32       	cpi	r24, 0x2E	; 46
     78c:	a1 f4       	brne	.+40     	; 0x7b6 <led_update+0x7e>
     78e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <led_on>
     792:	6a ef       	ldi	r22, 0xFA	; 250
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	04 c0       	rjmp	.+8      	; 0x7a0 <led_update+0x68>
     798:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <led_on>
     79c:	6e ee       	ldi	r22, 0xEE	; 238
     79e:	72 e0       	ldi	r23, 0x02	; 2
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 99 0b 	call	0x1732	; 0x1732 <delay_set>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <blink_state>
     7ae:	08 95       	ret
     7b0:	68 ee       	ldi	r22, 0xE8	; 232
     7b2:	73 e0       	ldi	r23, 0x03	; 3
     7b4:	0b c0       	rjmp	.+22     	; 0x7cc <led_update+0x94>
     7b6:	2f 5f       	subi	r18, 0xFF	; 255
     7b8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ba:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <blink_pos+0x1>
     7be:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <blink_pos>
     7c2:	08 95       	ret
     7c4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <led_off>
     7c8:	64 e6       	ldi	r22, 0x64	; 100
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 99 0b 	call	0x1732	; 0x1732 <delay_set>
     7d4:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <blink_state>
     7d8:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <blink_pos>
     7dc:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <blink_pos+0x1>
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <blink_pos+0x1>
     7e6:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <blink_pos>
     7ea:	08 95       	ret

000007ec <led_init>:
     7ec:	21 9a       	sbi	0x04, 1	; 4
     7ee:	29 98       	cbi	0x05, 1	; 5
     7f0:	08 95       	ret

000007f2 <led_on>:
     7f2:	29 9a       	sbi	0x05, 1	; 5
     7f4:	08 95       	ret

000007f6 <led_off>:
     7f6:	29 98       	cbi	0x05, 1	; 5
     7f8:	08 95       	ret

000007fa <led_is_on>:
     7fa:	85 b1       	in	r24, 0x05	; 5
     7fc:	86 95       	lsr	r24
     7fe:	81 70       	andi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	08 95       	ret

00000804 <log_is_data_valid>:
     804:	80 31       	cpi	r24, 0x10	; 16
     806:	91 05       	cpc	r25, r1
     808:	04 f5       	brge	.+64     	; 0x84a <log_is_data_valid+0x46>
     80a:	27 e0       	ldi	r18, 0x07	; 7
     80c:	28 9f       	mul	r18, r24
     80e:	a0 01       	movw	r20, r0
     810:	29 9f       	mul	r18, r25
     812:	50 0d       	add	r21, r0
     814:	11 24       	eor	r1, r1
     816:	fa 01       	movw	r30, r20
     818:	e3 54       	subi	r30, 0x43	; 67
     81a:	fe 4f       	sbci	r31, 0xFE	; 254
     81c:	80 81       	ld	r24, Z
     81e:	81 32       	cpi	r24, 0x21	; 33
     820:	a0 f4       	brcc	.+40     	; 0x84a <log_is_data_valid+0x46>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	fa 01       	movw	r30, r20
     82a:	e8 0f       	add	r30, r24
     82c:	f9 1f       	adc	r31, r25
     82e:	e3 54       	subi	r30, 0x43	; 67
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	30 81       	ld	r19, Z
     834:	23 0f       	add	r18, r19
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	87 30       	cpi	r24, 0x07	; 7
     83a:	91 05       	cpc	r25, r1
     83c:	a9 f7       	brne	.-22     	; 0x828 <log_is_data_valid+0x24>
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	22 23       	and	r18, r18
     844:	21 f0       	breq	.+8      	; 0x84e <log_is_data_valid+0x4a>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	08 95       	ret

00000850 <log_init>:
     850:	6f 92       	push	r6
     852:	7f 92       	push	r7
     854:	8f 92       	push	r8
     856:	9f 92       	push	r9
     858:	af 92       	push	r10
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	0e 94 89 01 	call	0x312	; 0x312 <eeprom_isbusy>
     870:	89 2b       	or	r24, r25
     872:	e1 f7       	brne	.-8      	; 0x86c <log_init+0x1c>
     874:	0d e2       	ldi	r16, 0x2D	; 45
     876:	12 e0       	ldi	r17, 0x02	; 2
     878:	c0 e8       	ldi	r28, 0x80	; 128
     87a:	d0 e0       	ldi	r29, 0x00	; 0
     87c:	be 01       	movw	r22, r28
     87e:	63 5c       	subi	r22, 0xC3	; 195
     880:	7e 4f       	sbci	r23, 0xFE	; 254
     882:	47 e0       	ldi	r20, 0x07	; 7
     884:	ce 01       	movw	r24, r28
     886:	0e 94 39 01 	call	0x272	; 0x272 <eeprom_readbuf>
     88a:	f8 01       	movw	r30, r16
     88c:	11 92       	st	Z+, r1
     88e:	8f 01       	movw	r16, r30
     890:	27 96       	adiw	r28, 0x07	; 7
     892:	c0 3f       	cpi	r28, 0xF0	; 240
     894:	d1 05       	cpc	r29, r1
     896:	91 f7       	brne	.-28     	; 0x87c <log_init+0x2c>
     898:	4d eb       	ldi	r20, 0xBD	; 189
     89a:	e4 2e       	mov	r14, r20
     89c:	41 e0       	ldi	r20, 0x01	; 1
     89e:	f4 2e       	mov	r15, r20
     8a0:	87 01       	movw	r16, r14
     8a2:	c0 e0       	ldi	r28, 0x00	; 0
     8a4:	d0 e0       	ldi	r29, 0x00	; 0
     8a6:	d1 2c       	mov	r13, r1
     8a8:	b1 2c       	mov	r11, r1
     8aa:	77 24       	eor	r7, r7
     8ac:	7a 94       	dec	r7
     8ae:	ce 01       	movw	r24, r28
     8b0:	0e 94 02 04 	call	0x804	; 0x804 <log_is_data_valid>
     8b4:	89 2b       	or	r24, r25
     8b6:	41 f0       	breq	.+16     	; 0x8c8 <log_init+0x78>
     8b8:	f8 01       	movw	r30, r16
     8ba:	80 81       	ld	r24, Z
     8bc:	87 15       	cp	r24, r7
     8be:	20 f4       	brcc	.+8      	; 0x8c8 <log_init+0x78>
     8c0:	bc 2e       	mov	r11, r28
     8c2:	78 2e       	mov	r7, r24
     8c4:	dd 24       	eor	r13, r13
     8c6:	d3 94       	inc	r13
     8c8:	21 96       	adiw	r28, 0x01	; 1
     8ca:	09 5f       	subi	r16, 0xF9	; 249
     8cc:	1f 4f       	sbci	r17, 0xFF	; 255
     8ce:	c0 31       	cpi	r28, 0x10	; 16
     8d0:	d1 05       	cpc	r29, r1
     8d2:	69 f7       	brne	.-38     	; 0x8ae <log_init+0x5e>
     8d4:	dd 20       	and	r13, r13
     8d6:	09 f4       	brne	.+2      	; 0x8da <log_init+0x8a>
     8d8:	6a c0       	rjmp	.+212    	; 0x9ae <__stack+0xaf>
     8da:	b0 92 bc 01 	sts	0x01BC, r11	; 0x8001bc <last_written>
     8de:	70 92 bb 01 	sts	0x01BB, r7	; 0x8001bb <last_transaction_written>
     8e2:	cb 2d       	mov	r28, r11
     8e4:	d0 e0       	ldi	r29, 0x00	; 0
     8e6:	8e 01       	movw	r16, r28
     8e8:	0f 5f       	subi	r16, 0xFF	; 255
     8ea:	1f 4f       	sbci	r17, 0xFF	; 255
     8ec:	87 2c       	mov	r8, r7
     8ee:	2f e0       	ldi	r18, 0x0F	; 15
     8f0:	a2 2e       	mov	r10, r18
     8f2:	37 e0       	ldi	r19, 0x07	; 7
     8f4:	93 2e       	mov	r9, r19
     8f6:	68 01       	movw	r12, r16
     8f8:	ff e0       	ldi	r31, 0x0F	; 15
     8fa:	cf 22       	and	r12, r31
     8fc:	dd 24       	eor	r13, r13
     8fe:	c6 01       	movw	r24, r12
     900:	0e 94 02 04 	call	0x804	; 0x804 <log_is_data_valid>
     904:	89 2b       	or	r24, r25
     906:	61 f4       	brne	.+24     	; 0x920 <__stack+0x21>
     908:	b0 92 ba 01 	sts	0x01BA, r11	; 0x8001ba <tail>
     90c:	8e 01       	movw	r16, r28
     90e:	01 50       	subi	r16, 0x01	; 1
     910:	11 09       	sbc	r17, r1
     912:	60 97       	sbiw	r28, 0x10	; 16
     914:	80 e1       	ldi	r24, 0x10	; 16
     916:	a8 2e       	mov	r10, r24
     918:	b1 2c       	mov	r11, r1
     91a:	97 e0       	ldi	r25, 0x07	; 7
     91c:	69 2e       	mov	r6, r25
     91e:	3a c0       	rjmp	.+116    	; 0x994 <__stack+0x95>
     920:	9c 9c       	mul	r9, r12
     922:	f0 01       	movw	r30, r0
     924:	9d 9c       	mul	r9, r13
     926:	f0 0d       	add	r31, r0
     928:	11 24       	eor	r1, r1
     92a:	e3 54       	subi	r30, 0x43	; 67
     92c:	fe 4f       	sbci	r31, 0xFE	; 254
     92e:	40 81       	ld	r20, Z
     930:	24 2f       	mov	r18, r20
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	88 2d       	mov	r24, r8
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	8f 71       	andi	r24, 0x1F	; 31
     93c:	99 27       	eor	r25, r25
     93e:	28 17       	cp	r18, r24
     940:	39 07       	cpc	r19, r25
     942:	11 f7       	brne	.-60     	; 0x908 <__stack+0x9>
     944:	c0 92 bc 01 	sts	0x01BC, r12	; 0x8001bc <last_written>
     948:	40 93 bb 01 	sts	0x01BB, r20	; 0x8001bb <last_transaction_written>
     94c:	aa 94       	dec	r10
     94e:	0f 5f       	subi	r16, 0xFF	; 255
     950:	1f 4f       	sbci	r17, 0xFF	; 255
     952:	aa 20       	and	r10, r10
     954:	c9 f2       	breq	.-78     	; 0x908 <__stack+0x9>
     956:	84 2e       	mov	r8, r20
     958:	ce cf       	rjmp	.-100    	; 0x8f6 <log_init+0xa6>
     95a:	f7 01       	movw	r30, r14
     95c:	20 81       	ld	r18, Z
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	87 2d       	mov	r24, r7
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	4f 96       	adiw	r24, 0x1f	; 31
     966:	8f 71       	andi	r24, 0x1F	; 31
     968:	99 27       	eor	r25, r25
     96a:	28 17       	cp	r18, r24
     96c:	39 07       	cpc	r19, r25
     96e:	31 f5       	brne	.+76     	; 0x9bc <__stack+0xbd>
     970:	c0 92 ba 01 	sts	0x01BA, r12	; 0x8001ba <tail>
     974:	68 9c       	mul	r6, r8
     976:	f0 01       	movw	r30, r0
     978:	69 9c       	mul	r6, r9
     97a:	f0 0d       	add	r31, r0
     97c:	11 24       	eor	r1, r1
     97e:	e3 54       	subi	r30, 0x43	; 67
     980:	fe 4f       	sbci	r31, 0xFE	; 254
     982:	70 80       	ld	r7, Z
     984:	01 50       	subi	r16, 0x01	; 1
     986:	11 09       	sbc	r17, r1
     988:	f7 e0       	ldi	r31, 0x07	; 7
     98a:	ef 0e       	add	r14, r31
     98c:	f1 1c       	adc	r15, r1
     98e:	0c 17       	cp	r16, r28
     990:	1d 07       	cpc	r17, r29
     992:	a1 f0       	breq	.+40     	; 0x9bc <__stack+0xbd>
     994:	c8 01       	movw	r24, r16
     996:	b5 01       	movw	r22, r10
     998:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divmodhi4>
     99c:	6c 01       	movw	r12, r24
     99e:	4c 01       	movw	r8, r24
     9a0:	99 24       	eor	r9, r9
     9a2:	c4 01       	movw	r24, r8
     9a4:	0e 94 02 04 	call	0x804	; 0x804 <log_is_data_valid>
     9a8:	89 2b       	or	r24, r25
     9aa:	b9 f6       	brne	.-82     	; 0x95a <__stack+0x5b>
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <__stack+0xbd>
     9ae:	8f e0       	ldi	r24, 0x0F	; 15
     9b0:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <last_written>
     9b4:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <last_transaction_written>
     9b8:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <tail>
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	cf 90       	pop	r12
     9cc:	bf 90       	pop	r11
     9ce:	af 90       	pop	r10
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	7f 90       	pop	r7
     9d6:	6f 90       	pop	r6
     9d8:	08 95       	ret

000009da <log_update>:
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	0e 94 89 01 	call	0x312	; 0x312 <eeprom_isbusy>
     9e8:	89 2b       	or	r24, r25
     9ea:	39 f5       	brne	.+78     	; 0xa3a <log_update+0x60>
     9ec:	ed e2       	ldi	r30, 0x2D	; 45
     9ee:	f2 e0       	ldi	r31, 0x02	; 2
     9f0:	c0 e0       	ldi	r28, 0x00	; 0
     9f2:	d0 e0       	ldi	r29, 0x00	; 0
     9f4:	81 91       	ld	r24, Z+
     9f6:	88 23       	and	r24, r24
     9f8:	e1 f0       	breq	.+56     	; 0xa32 <log_update+0x58>
     9fa:	17 e0       	ldi	r17, 0x07	; 7
     9fc:	1c 9f       	mul	r17, r28
     9fe:	c0 01       	movw	r24, r0
     a00:	1d 9f       	mul	r17, r29
     a02:	90 0d       	add	r25, r0
     a04:	11 24       	eor	r1, r1
     a06:	9c 01       	movw	r18, r24
     a08:	23 54       	subi	r18, 0x43	; 67
     a0a:	3e 4f       	sbci	r19, 0xFE	; 254
     a0c:	79 01       	movw	r14, r18
     a0e:	67 e0       	ldi	r22, 0x07	; 7
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	c9 01       	movw	r24, r18
     a14:	0e 94 82 02 	call	0x504	; 0x504 <update_checksum>
     a18:	c1 9f       	mul	r28, r17
     a1a:	c0 01       	movw	r24, r0
     a1c:	11 24       	eor	r1, r1
     a1e:	47 e0       	ldi	r20, 0x07	; 7
     a20:	b7 01       	movw	r22, r14
     a22:	80 58       	subi	r24, 0x80	; 128
     a24:	9f 4f       	sbci	r25, 0xFF	; 255
     a26:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <eeprom_writebuf>
     a2a:	c3 5d       	subi	r28, 0xD3	; 211
     a2c:	dd 4f       	sbci	r29, 0xFD	; 253
     a2e:	18 82       	st	Y, r1
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <log_update+0x60>
     a32:	21 96       	adiw	r28, 0x01	; 1
     a34:	c0 31       	cpi	r28, 0x10	; 16
     a36:	d1 05       	cpc	r29, r1
     a38:	e9 f6       	brne	.-70     	; 0x9f4 <log_update+0x1a>
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <log_add_record>:
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	e8 2e       	mov	r14, r24
     a54:	c0 91 bc 01 	lds	r28, 0x01BC	; 0x8001bc <last_written>
     a58:	d0 e0       	ldi	r29, 0x00	; 0
     a5a:	21 96       	adiw	r28, 0x01	; 1
     a5c:	cf 70       	andi	r28, 0x0F	; 15
     a5e:	dd 27       	eor	r29, r29
     a60:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <tail>
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 02 04 	call	0x804	; 0x804 <log_is_data_valid>
     a6a:	f8 2e       	mov	r15, r24
     a6c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <last_transaction_written>
     a70:	8f 5f       	subi	r24, 0xFF	; 255
     a72:	81 32       	cpi	r24, 0x21	; 33
     a74:	18 f4       	brcc	.+6      	; 0xa7c <log_add_record+0x36>
     a76:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <last_transaction_written>
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <log_add_record+0x3a>
     a7c:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <last_transaction_written>
     a80:	87 e0       	ldi	r24, 0x07	; 7
     a82:	8c 9f       	mul	r24, r28
     a84:	80 01       	movw	r16, r0
     a86:	8d 9f       	mul	r24, r29
     a88:	10 0d       	add	r17, r0
     a8a:	11 24       	eor	r1, r1
     a8c:	03 54       	subi	r16, 0x43	; 67
     a8e:	1e 4f       	sbci	r17, 0xFE	; 254
     a90:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <last_transaction_written>
     a94:	f8 01       	movw	r30, r16
     a96:	80 83       	st	Z, r24
     a98:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <rtc_get_date>
     a9c:	f8 01       	movw	r30, r16
     a9e:	61 83       	std	Z+1, r22	; 0x01
     aa0:	72 83       	std	Z+2, r23	; 0x02
     aa2:	83 83       	std	Z+3, r24	; 0x03
     aa4:	94 83       	std	Z+4, r25	; 0x04
     aa6:	e5 82       	std	Z+5, r14	; 0x05
     aa8:	c0 93 bc 01 	sts	0x01BC, r28	; 0x8001bc <last_written>
     aac:	67 e0       	ldi	r22, 0x07	; 7
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	c8 01       	movw	r24, r16
     ab2:	0e 94 82 02 	call	0x504	; 0x504 <update_checksum>
     ab6:	c3 5d       	subi	r28, 0xD3	; 211
     ab8:	dd 4f       	sbci	r29, 0xFD	; 253
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	88 83       	st	Y, r24
     abe:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <last_written>
     ac2:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <tail>
     ac6:	89 13       	cpse	r24, r25
     ac8:	08 c0       	rjmp	.+16     	; 0xada <log_add_record+0x94>
     aca:	ff 20       	and	r15, r15
     acc:	31 f0       	breq	.+12     	; 0xada <log_add_record+0x94>
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	8f 70       	andi	r24, 0x0F	; 15
     ad4:	99 27       	eor	r25, r25
     ad6:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <tail>
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	08 95       	ret

00000ae8 <log_clear>:
     ae8:	ed eb       	ldi	r30, 0xBD	; 189
     aea:	f1 e0       	ldi	r31, 0x01	; 1
     aec:	ad e2       	ldi	r26, 0x2D	; 45
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	4f ef       	ldi	r20, 0xFF	; 255
     af4:	5f ef       	ldi	r21, 0xFF	; 255
     af6:	ba 01       	movw	r22, r20
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	80 83       	st	Z, r24
     afc:	85 83       	std	Z+5, r24	; 0x05
     afe:	41 83       	std	Z+1, r20	; 0x01
     b00:	52 83       	std	Z+2, r21	; 0x02
     b02:	63 83       	std	Z+3, r22	; 0x03
     b04:	74 83       	std	Z+4, r23	; 0x04
     b06:	9d 93       	st	X+, r25
     b08:	37 96       	adiw	r30, 0x07	; 7
     b0a:	22 e0       	ldi	r18, 0x02	; 2
     b0c:	ed 32       	cpi	r30, 0x2D	; 45
     b0e:	f2 07       	cpc	r31, r18
     b10:	a1 f7       	brne	.-24     	; 0xafa <log_clear+0x12>
     b12:	8f e0       	ldi	r24, 0x0F	; 15
     b14:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <last_written>
     b18:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <tail>
     b1c:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <last_transaction_written>
     b20:	08 95       	ret

00000b22 <log_get_num_entries>:
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	00 91 ba 01 	lds	r16, 0x01BA	; 0x8001ba <tail>
     b2e:	c0 2f       	mov	r28, r16
     b30:	10 e0       	ldi	r17, 0x00	; 0
     b32:	d0 e0       	ldi	r29, 0x00	; 0
     b34:	ce 01       	movw	r24, r28
     b36:	0e 94 02 04 	call	0x804	; 0x804 <log_is_data_valid>
     b3a:	89 2b       	or	r24, r25
     b3c:	29 f0       	breq	.+10     	; 0xb48 <log_get_num_entries+0x26>
     b3e:	21 96       	adiw	r28, 0x01	; 1
     b40:	cf 70       	andi	r28, 0x0F	; 15
     b42:	1f 5f       	subi	r17, 0xFF	; 255
     b44:	0c 13       	cpse	r16, r28
     b46:	f5 cf       	rjmp	.-22     	; 0xb32 <log_get_num_entries+0x10>
     b48:	81 2f       	mov	r24, r17
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <log_get_record>:
     b54:	af 92       	push	r10
     b56:	bf 92       	push	r11
     b58:	cf 92       	push	r12
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	6b 01       	movw	r12, r22
     b6a:	7c 01       	movw	r14, r24
     b6c:	8a 01       	movw	r16, r20
     b6e:	59 01       	movw	r10, r18
     b70:	0e 94 91 05 	call	0xb22	; 0xb22 <log_get_num_entries>
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	c8 16       	cp	r12, r24
     b7c:	d9 06       	cpc	r13, r25
     b7e:	ea 06       	cpc	r14, r26
     b80:	fb 06       	cpc	r15, r27
     b82:	f8 f4       	brcc	.+62     	; 0xbc2 <log_get_record+0x6e>
     b84:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <tail>
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	c8 0e       	add	r12, r24
     b8c:	d9 1e       	adc	r13, r25
     b8e:	8f e0       	ldi	r24, 0x0F	; 15
     b90:	c8 22       	and	r12, r24
     b92:	dd 24       	eor	r13, r13
     b94:	87 e0       	ldi	r24, 0x07	; 7
     b96:	8c 9d       	mul	r24, r12
     b98:	f0 01       	movw	r30, r0
     b9a:	8d 9d       	mul	r24, r13
     b9c:	f0 0d       	add	r31, r0
     b9e:	11 24       	eor	r1, r1
     ba0:	e3 54       	subi	r30, 0x43	; 67
     ba2:	fe 4f       	sbci	r31, 0xFE	; 254
     ba4:	81 81       	ldd	r24, Z+1	; 0x01
     ba6:	92 81       	ldd	r25, Z+2	; 0x02
     ba8:	a3 81       	ldd	r26, Z+3	; 0x03
     baa:	b4 81       	ldd	r27, Z+4	; 0x04
     bac:	e8 01       	movw	r28, r16
     bae:	88 83       	st	Y, r24
     bb0:	99 83       	std	Y+1, r25	; 0x01
     bb2:	aa 83       	std	Y+2, r26	; 0x02
     bb4:	bb 83       	std	Y+3, r27	; 0x03
     bb6:	85 81       	ldd	r24, Z+5	; 0x05
     bb8:	f5 01       	movw	r30, r10
     bba:	80 83       	st	Z, r24
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <log_get_record+0x72>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	08 95       	ret

00000bdc <rtc_init>:
     bdc:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <timer1_init>

00000be0 <rtc_get_date>:
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	0e 94 81 09 	call	0x1302	; 0x1302 <timer1_get>
     be8:	00 91 9d 04 	lds	r16, 0x049D	; 0x80049d <rtc_base>
     bec:	10 91 9e 04 	lds	r17, 0x049E	; 0x80049e <rtc_base+0x1>
     bf0:	20 91 9f 04 	lds	r18, 0x049F	; 0x80049f <rtc_base+0x2>
     bf4:	30 91 a0 04 	lds	r19, 0x04A0	; 0x8004a0 <rtc_base+0x3>
     bf8:	60 0f       	add	r22, r16
     bfa:	71 1f       	adc	r23, r17
     bfc:	82 1f       	adc	r24, r18
     bfe:	93 1f       	adc	r25, r19
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	08 95       	ret

00000c06 <is_leapyear>:
     c06:	9c 01       	movw	r18, r24
     c08:	60 e9       	ldi	r22, 0x90	; 144
     c0a:	71 e0       	ldi	r23, 0x01	; 1
     c0c:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     c10:	89 2b       	or	r24, r25
     c12:	79 f0       	breq	.+30     	; 0xc32 <is_leapyear+0x2c>
     c14:	c9 01       	movw	r24, r18
     c16:	83 70       	andi	r24, 0x03	; 3
     c18:	99 27       	eor	r25, r25
     c1a:	89 2b       	or	r24, r25
     c1c:	61 f4       	brne	.+24     	; 0xc36 <is_leapyear+0x30>
     c1e:	c9 01       	movw	r24, r18
     c20:	64 e6       	ldi	r22, 0x64	; 100
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     c28:	9c 01       	movw	r18, r24
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	23 2b       	or	r18, r19
     c2e:	21 f4       	brne	.+8      	; 0xc38 <is_leapyear+0x32>
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <is_leapyear+0x30>
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	08 95       	ret
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	08 95       	ret

00000c3a <rtc_set_by_datestr>:
     c3a:	2f 92       	push	r2
     c3c:	3f 92       	push	r3
     c3e:	4f 92       	push	r4
     c40:	5f 92       	push	r5
     c42:	6f 92       	push	r6
     c44:	7f 92       	push	r7
     c46:	8f 92       	push	r8
     c48:	9f 92       	push	r9
     c4a:	af 92       	push	r10
     c4c:	bf 92       	push	r11
     c4e:	cf 92       	push	r12
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	67 97       	sbiw	r28, 0x17	; 23
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	2c e0       	ldi	r18, 0x0C	; 12
     c70:	ed e8       	ldi	r30, 0x8D	; 141
     c72:	f1 e0       	ldi	r31, 0x01	; 1
     c74:	ae 01       	movw	r20, r28
     c76:	4f 5f       	subi	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	1a 01       	movw	r2, r20
     c7c:	da 01       	movw	r26, r20
     c7e:	01 90       	ld	r0, Z+
     c80:	0d 92       	st	X+, r0
     c82:	2a 95       	dec	r18
     c84:	e1 f7       	brne	.-8      	; 0xc7e <rtc_set_by_datestr+0x44>
     c86:	dc 01       	movw	r26, r24
     c88:	2c 91       	ld	r18, X
     c8a:	22 0f       	add	r18, r18
     c8c:	20 56       	subi	r18, 0x60	; 96
     c8e:	32 2f       	mov	r19, r18
     c90:	33 0f       	add	r19, r19
     c92:	33 0f       	add	r19, r19
     c94:	23 0f       	add	r18, r19
     c96:	11 96       	adiw	r26, 0x01	; 1
     c98:	3c 91       	ld	r19, X
     c9a:	11 97       	sbiw	r26, 0x01	; 1
     c9c:	31 53       	subi	r19, 0x31	; 49
     c9e:	23 0f       	add	r18, r19
     ca0:	2d 87       	std	Y+13, r18	; 0x0d
     ca2:	13 96       	adiw	r26, 0x03	; 3
     ca4:	2c 91       	ld	r18, X
     ca6:	13 97       	sbiw	r26, 0x03	; 3
     ca8:	02 2e       	mov	r0, r18
     caa:	00 0c       	add	r0, r0
     cac:	33 0b       	sbc	r19, r19
     cae:	20 53       	subi	r18, 0x30	; 48
     cb0:	31 09       	sbc	r19, r1
     cb2:	6a e0       	ldi	r22, 0x0A	; 10
     cb4:	62 9f       	mul	r22, r18
     cb6:	a0 01       	movw	r20, r0
     cb8:	63 9f       	mul	r22, r19
     cba:	50 0d       	add	r21, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	14 96       	adiw	r26, 0x04	; 4
     cc0:	cc 90       	ld	r12, X
     cc2:	0c 2c       	mov	r0, r12
     cc4:	00 0c       	add	r0, r0
     cc6:	dd 08       	sbc	r13, r13
     cc8:	b0 e3       	ldi	r27, 0x30	; 48
     cca:	cb 1a       	sub	r12, r27
     ccc:	d1 08       	sbc	r13, r1
     cce:	c4 0e       	add	r12, r20
     cd0:	d5 1e       	adc	r13, r21
     cd2:	86 01       	movw	r16, r12
     cd4:	01 50       	subi	r16, 0x01	; 1
     cd6:	11 09       	sbc	r17, r1
     cd8:	fc 01       	movw	r30, r24
     cda:	26 81       	ldd	r18, Z+6	; 0x06
     cdc:	02 2e       	mov	r0, r18
     cde:	00 0c       	add	r0, r0
     ce0:	33 0b       	sbc	r19, r19
     ce2:	20 53       	subi	r18, 0x30	; 48
     ce4:	31 09       	sbc	r19, r1
     ce6:	e8 ee       	ldi	r30, 0xE8	; 232
     ce8:	f3 e0       	ldi	r31, 0x03	; 3
     cea:	2e 9f       	mul	r18, r30
     cec:	a0 01       	movw	r20, r0
     cee:	2f 9f       	mul	r18, r31
     cf0:	50 0d       	add	r21, r0
     cf2:	3e 9f       	mul	r19, r30
     cf4:	50 0d       	add	r21, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	dc 01       	movw	r26, r24
     cfa:	17 96       	adiw	r26, 0x07	; 7
     cfc:	2c 91       	ld	r18, X
     cfe:	17 97       	sbiw	r26, 0x07	; 7
     d00:	02 2e       	mov	r0, r18
     d02:	00 0c       	add	r0, r0
     d04:	33 0b       	sbc	r19, r19
     d06:	20 53       	subi	r18, 0x30	; 48
     d08:	31 09       	sbc	r19, r1
     d0a:	74 e6       	ldi	r23, 0x64	; 100
     d0c:	72 9f       	mul	r23, r18
     d0e:	70 01       	movw	r14, r0
     d10:	73 9f       	mul	r23, r19
     d12:	f0 0c       	add	r15, r0
     d14:	11 24       	eor	r1, r1
     d16:	e4 0e       	add	r14, r20
     d18:	f5 1e       	adc	r15, r21
     d1a:	18 96       	adiw	r26, 0x08	; 8
     d1c:	4c 91       	ld	r20, X
     d1e:	18 97       	sbiw	r26, 0x08	; 8
     d20:	04 2e       	mov	r0, r20
     d22:	00 0c       	add	r0, r0
     d24:	55 0b       	sbc	r21, r21
     d26:	40 53       	subi	r20, 0x30	; 48
     d28:	51 09       	sbc	r21, r1
     d2a:	64 9f       	mul	r22, r20
     d2c:	90 01       	movw	r18, r0
     d2e:	65 9f       	mul	r22, r21
     d30:	30 0d       	add	r19, r0
     d32:	11 24       	eor	r1, r1
     d34:	e2 0e       	add	r14, r18
     d36:	f3 1e       	adc	r15, r19
     d38:	19 96       	adiw	r26, 0x09	; 9
     d3a:	2c 91       	ld	r18, X
     d3c:	19 97       	sbiw	r26, 0x09	; 9
     d3e:	f7 01       	movw	r30, r14
     d40:	e2 0f       	add	r30, r18
     d42:	f1 1d       	adc	r31, r1
     d44:	27 fd       	sbrc	r18, 7
     d46:	fa 95       	dec	r31
     d48:	af 01       	movw	r20, r30
     d4a:	58 50       	subi	r21, 0x08	; 8
     d4c:	7a 01       	movw	r14, r20
     d4e:	1b 96       	adiw	r26, 0x0b	; 11
     d50:	2c 91       	ld	r18, X
     d52:	1b 97       	sbiw	r26, 0x0b	; 11
     d54:	22 0f       	add	r18, r18
     d56:	20 56       	subi	r18, 0x60	; 96
     d58:	32 2f       	mov	r19, r18
     d5a:	33 0f       	add	r19, r19
     d5c:	33 0f       	add	r19, r19
     d5e:	23 0f       	add	r18, r19
     d60:	1c 96       	adiw	r26, 0x0c	; 12
     d62:	3c 91       	ld	r19, X
     d64:	1c 97       	sbiw	r26, 0x0c	; 12
     d66:	30 53       	subi	r19, 0x30	; 48
     d68:	23 0f       	add	r18, r19
     d6a:	29 8b       	std	Y+17, r18	; 0x11
     d6c:	1e 96       	adiw	r26, 0x0e	; 14
     d6e:	2c 91       	ld	r18, X
     d70:	1e 97       	sbiw	r26, 0x0e	; 14
     d72:	22 0f       	add	r18, r18
     d74:	20 56       	subi	r18, 0x60	; 96
     d76:	32 2f       	mov	r19, r18
     d78:	33 0f       	add	r19, r19
     d7a:	33 0f       	add	r19, r19
     d7c:	23 0f       	add	r18, r19
     d7e:	1f 96       	adiw	r26, 0x0f	; 15
     d80:	3c 91       	ld	r19, X
     d82:	1f 97       	sbiw	r26, 0x0f	; 15
     d84:	30 53       	subi	r19, 0x30	; 48
     d86:	23 0f       	add	r18, r19
     d88:	2a 8b       	std	Y+18, r18	; 0x12
     d8a:	51 96       	adiw	r26, 0x11	; 17
     d8c:	2c 91       	ld	r18, X
     d8e:	51 97       	sbiw	r26, 0x11	; 17
     d90:	22 0f       	add	r18, r18
     d92:	20 56       	subi	r18, 0x60	; 96
     d94:	32 2f       	mov	r19, r18
     d96:	33 0f       	add	r19, r19
     d98:	33 0f       	add	r19, r19
     d9a:	23 0f       	add	r18, r19
     d9c:	52 96       	adiw	r26, 0x12	; 18
     d9e:	8c 91       	ld	r24, X
     da0:	80 53       	subi	r24, 0x30	; 48
     da2:	28 0f       	add	r18, r24
     da4:	2b 8b       	std	Y+19, r18	; 0x13
     da6:	ca 01       	movw	r24, r20
     da8:	0e 94 03 06 	call	0xc06	; 0xc06 <is_leapyear>
     dac:	88 23       	and	r24, r24
     dae:	21 f0       	breq	.+8      	; 0xdb8 <rtc_set_by_datestr+0x17e>
     db0:	5d 85       	ldd	r21, Y+13	; 0x0d
     db2:	52 30       	cpi	r21, 0x02	; 2
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <rtc_set_by_datestr+0x17e>
     db6:	86 01       	movw	r16, r12
     db8:	c7 01       	movw	r24, r14
     dba:	60 e9       	ldi	r22, 0x90	; 144
     dbc:	71 e0       	ldi	r23, 0x01	; 1
     dbe:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     dc2:	fc 01       	movw	r30, r24
     dc4:	db 01       	movw	r26, r22
     dc6:	20 e8       	ldi	r18, 0x80	; 128
     dc8:	39 e5       	ldi	r19, 0x59	; 89
     dca:	40 e6       	ldi	r20, 0x60	; 96
     dcc:	50 ef       	ldi	r21, 0xF0	; 240
     dce:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__muluhisi3>
     dd2:	2b 01       	movw	r4, r22
     dd4:	3c 01       	movw	r6, r24
     dd6:	cf 01       	movw	r24, r30
     dd8:	64 e6       	ldi	r22, 0x64	; 100
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     de0:	fc 01       	movw	r30, r24
     de2:	db 01       	movw	r26, r22
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	32 ec       	ldi	r19, 0xC2	; 194
     de8:	47 e1       	ldi	r20, 0x17	; 23
     dea:	5c eb       	ldi	r21, 0xBC	; 188
     dec:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__muluhisi3>
     df0:	4b 01       	movw	r8, r22
     df2:	5c 01       	movw	r10, r24
     df4:	df 01       	movw	r26, r30
     df6:	b6 95       	lsr	r27
     df8:	a7 95       	ror	r26
     dfa:	b6 95       	lsr	r27
     dfc:	a7 95       	ror	r26
     dfe:	20 e8       	ldi	r18, 0x80	; 128
     e00:	3f e1       	ldi	r19, 0x1F	; 31
     e02:	46 e8       	ldi	r20, 0x86	; 134
     e04:	57 e0       	ldi	r21, 0x07	; 7
     e06:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__muluhisi3>
     e0a:	6b 01       	movw	r12, r22
     e0c:	7c 01       	movw	r14, r24
     e0e:	df 01       	movw	r26, r30
     e10:	a3 70       	andi	r26, 0x03	; 3
     e12:	bb 27       	eor	r27, r27
     e14:	20 e8       	ldi	r18, 0x80	; 128
     e16:	33 e3       	ldi	r19, 0x33	; 51
     e18:	41 ee       	ldi	r20, 0xE1	; 225
     e1a:	51 e0       	ldi	r21, 0x01	; 1
     e1c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__muluhisi3>
     e20:	6c 8b       	std	Y+20, r22	; 0x14
     e22:	7d 8b       	std	Y+21, r23	; 0x15
     e24:	8e 8b       	std	Y+22, r24	; 0x16
     e26:	9f 8b       	std	Y+23, r25	; 0x17
     e28:	f1 01       	movw	r30, r2
     e2a:	8e 2f       	mov	r24, r30
     e2c:	82 19       	sub	r24, r2
     e2e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e30:	89 17       	cp	r24, r25
     e32:	20 f4       	brcc	.+8      	; 0xe3c <rtc_set_by_datestr+0x202>
     e34:	81 91       	ld	r24, Z+
     e36:	08 0f       	add	r16, r24
     e38:	11 1d       	adc	r17, r1
     e3a:	f7 cf       	rjmp	.-18     	; 0xe2a <rtc_set_by_datestr+0x1f0>
     e3c:	a9 89       	ldd	r26, Y+17	; 0x11
     e3e:	2a 2f       	mov	r18, r26
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	a0 e1       	ldi	r26, 0x10	; 16
     e44:	be e0       	ldi	r27, 0x0E	; 14
     e46:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__umulhisi3>
     e4a:	6d 87       	std	Y+13, r22	; 0x0d
     e4c:	7e 87       	std	Y+14, r23	; 0x0e
     e4e:	8f 87       	std	Y+15, r24	; 0x0f
     e50:	98 8b       	std	Y+16, r25	; 0x10
     e52:	ba 89       	ldd	r27, Y+18	; 0x12
     e54:	2b 2f       	mov	r18, r27
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	ac e3       	ldi	r26, 0x3C	; 60
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__umulhisi3>
     e60:	2d 85       	ldd	r18, Y+13	; 0x0d
     e62:	3e 85       	ldd	r19, Y+14	; 0x0e
     e64:	4f 85       	ldd	r20, Y+15	; 0x0f
     e66:	58 89       	ldd	r21, Y+16	; 0x10
     e68:	26 0f       	add	r18, r22
     e6a:	37 1f       	adc	r19, r23
     e6c:	48 1f       	adc	r20, r24
     e6e:	59 1f       	adc	r21, r25
     e70:	da 01       	movw	r26, r20
     e72:	c9 01       	movw	r24, r18
     e74:	3b 89       	ldd	r19, Y+19	; 0x13
     e76:	83 0f       	add	r24, r19
     e78:	91 1d       	adc	r25, r1
     e7a:	a1 1d       	adc	r26, r1
     e7c:	b1 1d       	adc	r27, r1
     e7e:	48 0e       	add	r4, r24
     e80:	59 1e       	adc	r5, r25
     e82:	6a 1e       	adc	r6, r26
     e84:	7b 1e       	adc	r7, r27
     e86:	84 0c       	add	r8, r4
     e88:	95 1c       	adc	r9, r5
     e8a:	a6 1c       	adc	r10, r6
     e8c:	b7 1c       	adc	r11, r7
     e8e:	c8 0c       	add	r12, r8
     e90:	d9 1c       	adc	r13, r9
     e92:	ea 1c       	adc	r14, r10
     e94:	fb 1c       	adc	r15, r11
     e96:	8c 89       	ldd	r24, Y+20	; 0x14
     e98:	9d 89       	ldd	r25, Y+21	; 0x15
     e9a:	ae 89       	ldd	r26, Y+22	; 0x16
     e9c:	bf 89       	ldd	r27, Y+23	; 0x17
     e9e:	c8 0e       	add	r12, r24
     ea0:	d9 1e       	adc	r13, r25
     ea2:	ea 1e       	adc	r14, r26
     ea4:	fb 1e       	adc	r15, r27
     ea6:	d8 01       	movw	r26, r16
     ea8:	20 e8       	ldi	r18, 0x80	; 128
     eaa:	31 e5       	ldi	r19, 0x51	; 81
     eac:	41 e0       	ldi	r20, 0x01	; 1
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__muluhisi3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	8c 0d       	add	r24, r12
     eba:	9d 1d       	adc	r25, r13
     ebc:	ae 1d       	adc	r26, r14
     ebe:	bf 1d       	adc	r27, r15
     ec0:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <rtc_base>
     ec4:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <rtc_base+0x1>
     ec8:	a0 93 9f 04 	sts	0x049F, r26	; 0x80049f <rtc_base+0x2>
     ecc:	b0 93 a0 04 	sts	0x04A0, r27	; 0x8004a0 <rtc_base+0x3>
     ed0:	67 96       	adiw	r28, 0x17	; 23
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	df 90       	pop	r13
     eea:	cf 90       	pop	r12
     eec:	bf 90       	pop	r11
     eee:	af 90       	pop	r10
     ef0:	9f 90       	pop	r9
     ef2:	8f 90       	pop	r8
     ef4:	7f 90       	pop	r7
     ef6:	6f 90       	pop	r6
     ef8:	5f 90       	pop	r5
     efa:	4f 90       	pop	r4
     efc:	3f 90       	pop	r3
     efe:	2f 90       	pop	r2
     f00:	0c 94 8d 09 	jmp	0x131a	; 0x131a <timer1_clear>

00000f04 <get_month>:
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	68 97       	sbiw	r28, 0x18	; 24
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	7b 01       	movw	r14, r22
     f22:	2c e0       	ldi	r18, 0x0C	; 12
     f24:	ed e8       	ldi	r30, 0x8D	; 141
     f26:	f1 e0       	ldi	r31, 0x01	; 1
     f28:	de 01       	movw	r26, r28
     f2a:	1d 96       	adiw	r26, 0x0d	; 13
     f2c:	01 90       	ld	r0, Z+
     f2e:	0d 92       	st	X+, r0
     f30:	2a 95       	dec	r18
     f32:	e1 f7       	brne	.-8      	; 0xf2c <get_month+0x28>
     f34:	8e 01       	movw	r16, r28
     f36:	0f 5f       	subi	r16, 0xFF	; 255
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	2c e0       	ldi	r18, 0x0C	; 12
     f3c:	f8 01       	movw	r30, r16
     f3e:	11 92       	st	Z+, r1
     f40:	2a 95       	dec	r18
     f42:	e9 f7       	brne	.-6      	; 0xf3e <get_month+0x3a>
     f44:	0e 94 03 06 	call	0xc06	; 0xc06 <is_leapyear>
     f48:	8a 83       	std	Y+2, r24	; 0x02
     f4a:	de 01       	movw	r26, r28
     f4c:	1d 96       	adiw	r26, 0x0d	; 13
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	f7 01       	movw	r30, r14
     f52:	40 81       	ld	r20, Z
     f54:	51 81       	ldd	r21, Z+1	; 0x01
     f56:	9d 91       	ld	r25, X+
     f58:	f8 01       	movw	r30, r16
     f5a:	21 91       	ld	r18, Z+
     f5c:	8f 01       	movw	r16, r30
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	29 0f       	add	r18, r25
     f62:	31 1d       	adc	r19, r1
     f64:	42 17       	cp	r20, r18
     f66:	53 07       	cpc	r21, r19
     f68:	40 f0       	brcs	.+16     	; 0xf7a <get_month+0x76>
     f6a:	42 1b       	sub	r20, r18
     f6c:	53 0b       	sbc	r21, r19
     f6e:	f7 01       	movw	r30, r14
     f70:	51 83       	std	Z+1, r21	; 0x01
     f72:	40 83       	st	Z, r20
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	8c 30       	cpi	r24, 0x0C	; 12
     f78:	59 f7       	brne	.-42     	; 0xf50 <get_month+0x4c>
     f7a:	68 96       	adiw	r28, 0x18	; 24
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	08 95       	ret

00000f94 <rtc_num2datestr>:
     f94:	4f 92       	push	r4
     f96:	5f 92       	push	r5
     f98:	6f 92       	push	r6
     f9a:	7f 92       	push	r7
     f9c:	8f 92       	push	r8
     f9e:	9f 92       	push	r9
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <rtc_num2datestr+0x1e>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	2b 01       	movw	r4, r22
     fb8:	3c 01       	movw	r6, r24
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	20 e8       	ldi	r18, 0x80	; 128
     fc4:	42 16       	cp	r4, r18
     fc6:	29 e5       	ldi	r18, 0x59	; 89
     fc8:	52 06       	cpc	r5, r18
     fca:	20 e6       	ldi	r18, 0x60	; 96
     fcc:	62 06       	cpc	r6, r18
     fce:	20 ef       	ldi	r18, 0xF0	; 240
     fd0:	72 06       	cpc	r7, r18
     fd2:	18 f4       	brcc	.+6      	; 0xfda <rtc_num2datestr+0x46>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	dc 01       	movw	r26, r24
     fda:	20 e9       	ldi	r18, 0x90	; 144
     fdc:	31 e0       	ldi	r19, 0x01	; 1
     fde:	82 9f       	mul	r24, r18
     fe0:	50 01       	movw	r10, r0
     fe2:	83 9f       	mul	r24, r19
     fe4:	b0 0c       	add	r11, r0
     fe6:	92 9f       	mul	r25, r18
     fe8:	b0 0c       	add	r11, r0
     fea:	11 24       	eor	r1, r1
     fec:	80 e3       	ldi	r24, 0x30	; 48
     fee:	a8 1a       	sub	r10, r24
     ff0:	88 ef       	ldi	r24, 0xF8	; 248
     ff2:	b8 0a       	sbc	r11, r24
     ff4:	c1 2c       	mov	r12, r1
     ff6:	d1 2c       	mov	r13, r1
     ff8:	76 01       	movw	r14, r12
     ffa:	c3 94       	inc	r12
     ffc:	20 e8       	ldi	r18, 0x80	; 128
     ffe:	42 16       	cp	r4, r18
    1000:	29 e5       	ldi	r18, 0x59	; 89
    1002:	52 06       	cpc	r5, r18
    1004:	20 e6       	ldi	r18, 0x60	; 96
    1006:	62 06       	cpc	r6, r18
    1008:	20 ef       	ldi	r18, 0xF0	; 240
    100a:	72 06       	cpc	r7, r18
    100c:	18 f4       	brcc	.+6      	; 0x1014 <rtc_num2datestr+0x80>
    100e:	c1 2c       	mov	r12, r1
    1010:	d1 2c       	mov	r13, r1
    1012:	76 01       	movw	r14, r12
    1014:	a7 01       	movw	r20, r14
    1016:	96 01       	movw	r18, r12
    1018:	60 e8       	ldi	r22, 0x80	; 128
    101a:	79 e5       	ldi	r23, 0x59	; 89
    101c:	80 e6       	ldi	r24, 0x60	; 96
    101e:	90 ef       	ldi	r25, 0xF0	; 240
    1020:	0e 94 b5 0c 	call	0x196a	; 0x196a <__mulsi3>
    1024:	73 01       	movw	r14, r6
    1026:	62 01       	movw	r12, r4
    1028:	c6 1a       	sub	r12, r22
    102a:	d7 0a       	sbc	r13, r23
    102c:	e8 0a       	sbc	r14, r24
    102e:	f9 0a       	sbc	r15, r25
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a0 e0       	ldi	r26, 0x00	; 0
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	c1 14       	cp	r12, r1
    103a:	22 ec       	ldi	r18, 0xC2	; 194
    103c:	d2 06       	cpc	r13, r18
    103e:	27 e1       	ldi	r18, 0x17	; 23
    1040:	e2 06       	cpc	r14, r18
    1042:	2c eb       	ldi	r18, 0xBC	; 188
    1044:	f2 06       	cpc	r15, r18
    1046:	18 f4       	brcc	.+6      	; 0x104e <rtc_num2datestr+0xba>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	dc 01       	movw	r26, r24
    104e:	44 e6       	ldi	r20, 0x64	; 100
    1050:	48 9f       	mul	r20, r24
    1052:	90 01       	movw	r18, r0
    1054:	49 9f       	mul	r20, r25
    1056:	30 0d       	add	r19, r0
    1058:	11 24       	eor	r1, r1
    105a:	a2 0e       	add	r10, r18
    105c:	b3 1e       	adc	r11, r19
    105e:	21 e0       	ldi	r18, 0x01	; 1
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	c1 14       	cp	r12, r1
    1068:	82 ec       	ldi	r24, 0xC2	; 194
    106a:	d8 06       	cpc	r13, r24
    106c:	87 e1       	ldi	r24, 0x17	; 23
    106e:	e8 06       	cpc	r14, r24
    1070:	8c eb       	ldi	r24, 0xBC	; 188
    1072:	f8 06       	cpc	r15, r24
    1074:	18 f4       	brcc	.+6      	; 0x107c <rtc_num2datestr+0xe8>
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	a9 01       	movw	r20, r18
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	72 ec       	ldi	r23, 0xC2	; 194
    1080:	87 e1       	ldi	r24, 0x17	; 23
    1082:	9c eb       	ldi	r25, 0xBC	; 188
    1084:	0e 94 b5 0c 	call	0x196a	; 0x196a <__mulsi3>
    1088:	a7 01       	movw	r20, r14
    108a:	96 01       	movw	r18, r12
    108c:	26 1b       	sub	r18, r22
    108e:	37 0b       	sbc	r19, r23
    1090:	48 0b       	sbc	r20, r24
    1092:	59 0b       	sbc	r21, r25
    1094:	ca 01       	movw	r24, r20
    1096:	b9 01       	movw	r22, r18
    1098:	20 e8       	ldi	r18, 0x80	; 128
    109a:	3f e1       	ldi	r19, 0x1F	; 31
    109c:	46 e8       	ldi	r20, 0x86	; 134
    109e:	57 e0       	ldi	r21, 0x07	; 7
    10a0:	0e 94 ed 0c 	call	0x19da	; 0x19da <__udivmodsi4>
    10a4:	22 0f       	add	r18, r18
    10a6:	33 1f       	adc	r19, r19
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	a2 0e       	add	r10, r18
    10ae:	b3 1e       	adc	r11, r19
    10b0:	20 e8       	ldi	r18, 0x80	; 128
    10b2:	33 e3       	ldi	r19, 0x33	; 51
    10b4:	41 ee       	ldi	r20, 0xE1	; 225
    10b6:	51 e0       	ldi	r21, 0x01	; 1
    10b8:	0e 94 ed 0c 	call	0x19da	; 0x19da <__udivmodsi4>
    10bc:	75 01       	movw	r14, r10
    10be:	e2 0e       	add	r14, r18
    10c0:	f3 1e       	adc	r15, r19
    10c2:	20 e8       	ldi	r18, 0x80	; 128
    10c4:	31 e5       	ldi	r19, 0x51	; 81
    10c6:	41 e0       	ldi	r20, 0x01	; 1
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	0e 94 ed 0c 	call	0x19da	; 0x19da <__udivmodsi4>
    10ce:	4b 01       	movw	r8, r22
    10d0:	5c 01       	movw	r10, r24
    10d2:	3a 83       	std	Y+2, r19	; 0x02
    10d4:	29 83       	std	Y+1, r18	; 0x01
    10d6:	be 01       	movw	r22, r28
    10d8:	6f 5f       	subi	r22, 0xFF	; 255
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	c7 01       	movw	r24, r14
    10de:	0e 94 82 07 	call	0xf04	; 0xf04 <get_month>
    10e2:	d8 2e       	mov	r13, r24
    10e4:	c5 01       	movw	r24, r10
    10e6:	b4 01       	movw	r22, r8
    10e8:	20 e1       	ldi	r18, 0x10	; 16
    10ea:	3e e0       	ldi	r19, 0x0E	; 14
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	0e 94 ed 0c 	call	0x19da	; 0x19da <__udivmodsi4>
    10f4:	29 01       	movw	r4, r18
    10f6:	3a 01       	movw	r6, r20
    10f8:	4b 01       	movw	r8, r22
    10fa:	5c 01       	movw	r10, r24
    10fc:	69 e9       	ldi	r22, 0x99	; 153
    10fe:	71 e0       	ldi	r23, 0x01	; 1
    1100:	89 e4       	ldi	r24, 0x49	; 73
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <str_cpy>
    1108:	6d 2d       	mov	r22, r13
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	6f 5f       	subi	r22, 0xFF	; 255
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	42 e0       	ldi	r20, 0x02	; 2
    1112:	89 e4       	ldi	r24, 0x49	; 73
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <str_writeudec16>
    111a:	69 81       	ldd	r22, Y+1	; 0x01
    111c:	7a 81       	ldd	r23, Y+2	; 0x02
    111e:	6f 5f       	subi	r22, 0xFF	; 255
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	42 e0       	ldi	r20, 0x02	; 2
    1124:	8c e4       	ldi	r24, 0x4C	; 76
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <str_writeudec16>
    112c:	44 e0       	ldi	r20, 0x04	; 4
    112e:	b7 01       	movw	r22, r14
    1130:	8f e4       	ldi	r24, 0x4F	; 79
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <str_writeudec16>
    1138:	42 e0       	ldi	r20, 0x02	; 2
    113a:	b2 01       	movw	r22, r4
    113c:	84 e5       	ldi	r24, 0x54	; 84
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <str_writeudec16>
    1144:	c5 01       	movw	r24, r10
    1146:	b4 01       	movw	r22, r8
    1148:	2c e3       	ldi	r18, 0x3C	; 60
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	0e 94 ed 0c 	call	0x19da	; 0x19da <__udivmodsi4>
    1154:	49 01       	movw	r8, r18
    1156:	5a 01       	movw	r10, r20
    1158:	6b 01       	movw	r12, r22
    115a:	7c 01       	movw	r14, r24
    115c:	42 e0       	ldi	r20, 0x02	; 2
    115e:	b4 01       	movw	r22, r8
    1160:	87 e5       	ldi	r24, 0x57	; 87
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <str_writeudec16>
    1168:	42 e0       	ldi	r20, 0x02	; 2
    116a:	b6 01       	movw	r22, r12
    116c:	8a e5       	ldi	r24, 0x5A	; 90
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <str_writeudec16>
    1174:	89 e4       	ldi	r24, 0x49	; 73
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	df 90       	pop	r13
    1186:	cf 90       	pop	r12
    1188:	bf 90       	pop	r11
    118a:	af 90       	pop	r10
    118c:	9f 90       	pop	r9
    118e:	8f 90       	pop	r8
    1190:	7f 90       	pop	r7
    1192:	6f 90       	pop	r6
    1194:	5f 90       	pop	r5
    1196:	4f 90       	pop	r4
    1198:	08 95       	ret

0000119a <rtc_get_date_string>:
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	0e 94 81 09 	call	0x1302	; 0x1302 <timer1_get>
    11a2:	00 91 9d 04 	lds	r16, 0x049D	; 0x80049d <rtc_base>
    11a6:	10 91 9e 04 	lds	r17, 0x049E	; 0x80049e <rtc_base+0x1>
    11aa:	20 91 9f 04 	lds	r18, 0x049F	; 0x80049f <rtc_base+0x2>
    11ae:	30 91 a0 04 	lds	r19, 0x04A0	; 0x8004a0 <rtc_base+0x3>
    11b2:	60 0f       	add	r22, r16
    11b4:	71 1f       	adc	r23, r17
    11b6:	82 1f       	adc	r24, r18
    11b8:	93 1f       	adc	r25, r19
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <rtc_num2datestr>

000011c2 <str_cpy>:
    11c2:	fc 01       	movw	r30, r24
    11c4:	db 01       	movw	r26, r22
    11c6:	8d 91       	ld	r24, X+
    11c8:	bd 01       	movw	r22, r26
    11ca:	88 23       	and	r24, r24
    11cc:	11 f0       	breq	.+4      	; 0x11d2 <str_cpy+0x10>
    11ce:	81 93       	st	Z+, r24
    11d0:	f9 cf       	rjmp	.-14     	; 0x11c4 <str_cpy+0x2>
    11d2:	10 82       	st	Z, r1
    11d4:	08 95       	ret

000011d6 <str_writeudec16>:
    11d6:	9f 92       	push	r9
    11d8:	af 92       	push	r10
    11da:	bf 92       	push	r11
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <str_writeudec16+0x18>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <str_writeudec16+0x1a>
    11f0:	1f 92       	push	r1
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	fc 01       	movw	r30, r24
    11f8:	6b 01       	movw	r12, r22
    11fa:	9e 01       	movw	r18, r28
    11fc:	2f 5f       	subi	r18, 0xFF	; 255
    11fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1200:	8e 01       	movw	r16, r28
    1202:	0a 5f       	subi	r16, 0xFA	; 250
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	ee 24       	eor	r14, r14
    1208:	e3 94       	inc	r14
    120a:	f1 2c       	mov	r15, r1
    120c:	9a e0       	ldi	r25, 0x0A	; 10
    120e:	99 2e       	mov	r9, r25
    1210:	9e 9c       	mul	r9, r14
    1212:	50 01       	movw	r10, r0
    1214:	9f 9c       	mul	r9, r15
    1216:	b0 0c       	add	r11, r0
    1218:	11 24       	eor	r1, r1
    121a:	c6 01       	movw	r24, r12
    121c:	b5 01       	movw	r22, r10
    121e:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
    1222:	b7 01       	movw	r22, r14
    1224:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
    1228:	d9 01       	movw	r26, r18
    122a:	6d 93       	st	X+, r22
    122c:	9d 01       	movw	r18, r26
    122e:	c6 1a       	sub	r12, r22
    1230:	d1 08       	sbc	r13, r1
    1232:	67 fd       	sbrc	r22, 7
    1234:	d3 94       	inc	r13
    1236:	75 01       	movw	r14, r10
    1238:	a0 17       	cp	r26, r16
    123a:	b1 07       	cpc	r27, r17
    123c:	49 f7       	brne	.-46     	; 0x1210 <str_writeudec16+0x3a>
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	d8 01       	movw	r26, r16
    124a:	2e 91       	ld	r18, -X
    124c:	8d 01       	movw	r16, r26
    124e:	21 11       	cpse	r18, r1
    1250:	05 c0       	rjmp	.+10     	; 0x125c <str_writeudec16+0x86>
    1252:	61 15       	cp	r22, r1
    1254:	71 05       	cpc	r23, r1
    1256:	11 f4       	brne	.+4      	; 0x125c <str_writeudec16+0x86>
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	41 f4       	brne	.+16     	; 0x126c <str_writeudec16+0x96>
    125c:	84 17       	cp	r24, r20
    125e:	95 07       	cpc	r25, r21
    1260:	2c f4       	brge	.+10     	; 0x126c <str_writeudec16+0x96>
    1262:	20 5d       	subi	r18, 0xD0	; 208
    1264:	21 93       	st	Z+, r18
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <str_writeudec16+0x9e>
    126c:	84 17       	cp	r24, r20
    126e:	95 07       	cpc	r25, r21
    1270:	0c f4       	brge	.+2      	; 0x1274 <str_writeudec16+0x9e>
    1272:	31 96       	adiw	r30, 0x01	; 1
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	40 f7       	brcc	.-48     	; 0x1248 <str_writeudec16+0x72>
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	df 90       	pop	r13
    1290:	cf 90       	pop	r12
    1292:	bf 90       	pop	r11
    1294:	af 90       	pop	r10
    1296:	9f 90       	pop	r9
    1298:	08 95       	ret

0000129a <__vector_11>:
    129a:	1f 92       	push	r1
    129c:	0f 92       	push	r0
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	0f 92       	push	r0
    12a2:	11 24       	eor	r1, r1
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <timer1_count>
    12b0:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <timer1_count+0x1>
    12b4:	a0 91 3f 02 	lds	r26, 0x023F	; 0x80023f <timer1_count+0x2>
    12b8:	b0 91 40 02 	lds	r27, 0x0240	; 0x800240 <timer1_count+0x3>
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	a1 1d       	adc	r26, r1
    12c0:	b1 1d       	adc	r27, r1
    12c2:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <timer1_count>
    12c6:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <timer1_count+0x1>
    12ca:	a0 93 3f 02 	sts	0x023F, r26	; 0x80023f <timer1_count+0x2>
    12ce:	b0 93 40 02 	sts	0x0240, r27	; 0x800240 <timer1_count+0x3>
    12d2:	bf 91       	pop	r27
    12d4:	af 91       	pop	r26
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <timer1_init>:
    12e4:	83 e2       	ldi	r24, 0x23	; 35
    12e6:	94 ef       	ldi	r25, 0xF4	; 244
    12e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    12ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    12f0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    12f4:	8c e0       	ldi	r24, 0x0C	; 12
    12f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1300:	08 95       	ret

00001302 <timer1_get>:
    1302:	2f b7       	in	r18, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <timer1_count>
    130a:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <timer1_count+0x1>
    130e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <timer1_count+0x2>
    1312:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <timer1_count+0x3>
    1316:	2f bf       	out	0x3f, r18	; 63
    1318:	08 95       	ret

0000131a <timer1_clear>:
    131a:	8f b7       	in	r24, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <timer1_count>
    1322:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <timer1_count+0x1>
    1326:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <timer1_count+0x2>
    132a:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <timer1_count+0x3>
    132e:	8f bf       	out	0x3f, r24	; 63
    1330:	08 95       	ret

00001332 <uart_init>:
    1332:	0e 94 c3 0b 	call	0x1786	; 0x1786 <serial_init>
    1336:	78 94       	sei
    1338:	08 95       	ret

0000133a <uart_writechar>:
    133a:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <serial_writechar>

0000133e <uart_writestr>:
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	ec 01       	movw	r28, r24
    1344:	89 91       	ld	r24, Y+
    1346:	88 23       	and	r24, r24
    1348:	19 f0       	breq	.+6      	; 0x1350 <uart_writestr+0x12>
    134a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <serial_writechar>
    134e:	fa cf       	rjmp	.-12     	; 0x1344 <uart_writestr+0x6>
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <uart_writehex8>:
    1356:	cf 93       	push	r28
    1358:	c8 2f       	mov	r28, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	24 e0       	ldi	r18, 0x04	; 4
    135e:	95 95       	asr	r25
    1360:	87 95       	ror	r24
    1362:	2a 95       	dec	r18
    1364:	e1 f7       	brne	.-8      	; 0x135e <uart_writehex8+0x8>
    1366:	8a 30       	cpi	r24, 0x0A	; 10
    1368:	10 f4       	brcc	.+4      	; 0x136e <uart_writehex8+0x18>
    136a:	80 5d       	subi	r24, 0xD0	; 208
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <uart_writehex8+0x1a>
    136e:	89 5c       	subi	r24, 0xC9	; 201
    1370:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <serial_writechar>
    1374:	8c 2f       	mov	r24, r28
    1376:	8f 70       	andi	r24, 0x0F	; 15
    1378:	8a 30       	cpi	r24, 0x0A	; 10
    137a:	10 f0       	brcs	.+4      	; 0x1380 <uart_writehex8+0x2a>
    137c:	89 5c       	subi	r24, 0xC9	; 201
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <uart_writehex8+0x2c>
    1380:	80 5d       	subi	r24, 0xD0	; 208
    1382:	cf 91       	pop	r28
    1384:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <serial_writechar>

00001388 <uart_writehex16>:
    1388:	cf 93       	push	r28
    138a:	c8 2f       	mov	r28, r24
    138c:	89 2f       	mov	r24, r25
    138e:	0e 94 ab 09 	call	0x1356	; 0x1356 <uart_writehex8>
    1392:	8c 2f       	mov	r24, r28
    1394:	cf 91       	pop	r28
    1396:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <uart_writehex8>

0000139a <uart_writedec32>:
    139a:	2f 92       	push	r2
    139c:	3f 92       	push	r3
    139e:	4f 92       	push	r4
    13a0:	5f 92       	push	r5
    13a2:	6f 92       	push	r6
    13a4:	7f 92       	push	r7
    13a6:	8f 92       	push	r8
    13a8:	9f 92       	push	r9
    13aa:	af 92       	push	r10
    13ac:	bf 92       	push	r11
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	63 97       	sbiw	r28, 0x13	; 19
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	6b 01       	movw	r12, r22
    13d0:	7c 01       	movw	r14, r24
    13d2:	97 ff       	sbrs	r25, 7
    13d4:	0d c0       	rjmp	.+26     	; 0x13f0 <uart_writedec32+0x56>
    13d6:	f0 94       	com	r15
    13d8:	e0 94       	com	r14
    13da:	d0 94       	com	r13
    13dc:	c0 94       	com	r12
    13de:	c1 1c       	adc	r12, r1
    13e0:	d1 1c       	adc	r13, r1
    13e2:	e1 1c       	adc	r14, r1
    13e4:	f1 1c       	adc	r15, r1
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9b 8b       	std	Y+19, r25	; 0x13
    13ec:	8a 8b       	std	Y+18, r24	; 0x12
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <uart_writedec32+0x5a>
    13f0:	1b 8a       	std	Y+19, r1	; 0x13
    13f2:	1a 8a       	std	Y+18, r1	; 0x12
    13f4:	fe 01       	movw	r30, r28
    13f6:	31 96       	adiw	r30, 0x01	; 1
    13f8:	5f 01       	movw	r10, r30
    13fa:	8e 01       	movw	r16, r28
    13fc:	05 5f       	subi	r16, 0xF5	; 245
    13fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1400:	f9 8b       	std	Y+17, r31	; 0x11
    1402:	e8 8b       	std	Y+16, r30	; 0x10
    1404:	66 24       	eor	r6, r6
    1406:	63 94       	inc	r6
    1408:	71 2c       	mov	r7, r1
    140a:	81 2c       	mov	r8, r1
    140c:	91 2c       	mov	r9, r1
    140e:	aa e0       	ldi	r26, 0x0A	; 10
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	93 01       	movw	r18, r6
    1414:	a4 01       	movw	r20, r8
    1416:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__muluhisi3>
    141a:	1b 01       	movw	r2, r22
    141c:	2c 01       	movw	r4, r24
    141e:	c7 01       	movw	r24, r14
    1420:	b6 01       	movw	r22, r12
    1422:	91 01       	movw	r18, r2
    1424:	a2 01       	movw	r20, r4
    1426:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__divmodsi4>
    142a:	93 01       	movw	r18, r6
    142c:	a4 01       	movw	r20, r8
    142e:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__divmodsi4>
    1432:	e8 89       	ldd	r30, Y+16	; 0x10
    1434:	f9 89       	ldd	r31, Y+17	; 0x11
    1436:	21 93       	st	Z+, r18
    1438:	f9 8b       	std	Y+17, r31	; 0x11
    143a:	e8 8b       	std	Y+16, r30	; 0x10
    143c:	82 2f       	mov	r24, r18
    143e:	22 0f       	add	r18, r18
    1440:	99 0b       	sbc	r25, r25
    1442:	aa 0b       	sbc	r26, r26
    1444:	bb 0b       	sbc	r27, r27
    1446:	c8 1a       	sub	r12, r24
    1448:	d9 0a       	sbc	r13, r25
    144a:	ea 0a       	sbc	r14, r26
    144c:	fb 0a       	sbc	r15, r27
    144e:	31 01       	movw	r6, r2
    1450:	42 01       	movw	r8, r4
    1452:	0e 17       	cp	r16, r30
    1454:	1f 07       	cpc	r17, r31
    1456:	d9 f6       	brne	.-74     	; 0x140e <uart_writedec32+0x74>
    1458:	8a 89       	ldd	r24, Y+18	; 0x12
    145a:	9b 89       	ldd	r25, Y+19	; 0x13
    145c:	89 2b       	or	r24, r25
    145e:	11 f0       	breq	.+4      	; 0x1464 <uart_writedec32+0xca>
    1460:	8d e2       	ldi	r24, 0x2D	; 45
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <uart_writedec32+0xcc>
    1464:	80 e2       	ldi	r24, 0x20	; 32
    1466:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <serial_writechar>
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	f8 01       	movw	r30, r16
    1470:	82 91       	ld	r24, -Z
    1472:	8f 01       	movw	r16, r30
    1474:	81 11       	cpse	r24, r1
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <uart_writedec32+0xea>
    1478:	21 15       	cp	r18, r1
    147a:	31 05       	cpc	r19, r1
    147c:	19 f4       	brne	.+6      	; 0x1484 <uart_writedec32+0xea>
    147e:	ea 15       	cp	r30, r10
    1480:	fb 05       	cpc	r31, r11
    1482:	29 f4       	brne	.+10     	; 0x148e <uart_writedec32+0xf4>
    1484:	80 5d       	subi	r24, 0xD0	; 208
    1486:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <serial_writechar>
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	0a 15       	cp	r16, r10
    1490:	1b 05       	cpc	r17, r11
    1492:	69 f7       	brne	.-38     	; 0x146e <uart_writedec32+0xd4>
    1494:	63 96       	adiw	r28, 0x13	; 19
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	cf 90       	pop	r12
    14b0:	bf 90       	pop	r11
    14b2:	af 90       	pop	r10
    14b4:	9f 90       	pop	r9
    14b6:	8f 90       	pop	r8
    14b8:	7f 90       	pop	r7
    14ba:	6f 90       	pop	r6
    14bc:	5f 90       	pop	r5
    14be:	4f 90       	pop	r4
    14c0:	3f 90       	pop	r3
    14c2:	2f 90       	pop	r2
    14c4:	08 95       	ret

000014c6 <dump_eeprom>:
    14c6:	2f 92       	push	r2
    14c8:	3f 92       	push	r3
    14ca:	4f 92       	push	r4
    14cc:	5f 92       	push	r5
    14ce:	6f 92       	push	r6
    14d0:	7f 92       	push	r7
    14d2:	8f 92       	push	r8
    14d4:	9f 92       	push	r9
    14d6:	af 92       	push	r10
    14d8:	bf 92       	push	r11
    14da:	cf 92       	push	r12
    14dc:	df 92       	push	r13
    14de:	ef 92       	push	r14
    14e0:	ff 92       	push	r15
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	64 97       	sbiw	r28, 0x14	; 20
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	8c 01       	movw	r16, r24
    14fc:	61 15       	cp	r22, r1
    14fe:	71 05       	cpc	r23, r1
    1500:	09 f4       	brne	.+2      	; 0x1504 <dump_eeprom+0x3e>
    1502:	92 c0       	rjmp	.+292    	; 0x1628 <dump_eeprom+0x162>
    1504:	81 2c       	mov	r8, r1
    1506:	91 2c       	mov	r9, r1
    1508:	54 01       	movw	r10, r8
    150a:	cb 01       	movw	r24, r22
    150c:	a0 e0       	ldi	r26, 0x00	; 0
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	89 8b       	std	Y+17, r24	; 0x11
    1512:	9a 8b       	std	Y+18, r25	; 0x12
    1514:	ab 8b       	std	Y+19, r26	; 0x13
    1516:	bc 8b       	std	Y+20, r27	; 0x14
    1518:	de 01       	movw	r26, r28
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	1d 01       	movw	r2, r26
    151e:	89 89       	ldd	r24, Y+17	; 0x11
    1520:	9a 89       	ldd	r25, Y+18	; 0x12
    1522:	ab 89       	ldd	r26, Y+19	; 0x13
    1524:	bc 89       	ldd	r27, Y+20	; 0x14
    1526:	88 16       	cp	r8, r24
    1528:	99 06       	cpc	r9, r25
    152a:	aa 06       	cpc	r10, r26
    152c:	bb 06       	cpc	r11, r27
    152e:	08 f0       	brcs	.+2      	; 0x1532 <dump_eeprom+0x6c>
    1530:	7b c0       	rjmp	.+246    	; 0x1628 <dump_eeprom+0x162>
    1532:	81 2f       	mov	r24, r17
    1534:	0e 94 ab 09 	call	0x1356	; 0x1356 <uart_writehex8>
    1538:	80 2f       	mov	r24, r16
    153a:	80 7f       	andi	r24, 0xF0	; 240
    153c:	0e 94 ab 09 	call	0x1356	; 0x1356 <uart_writehex8>
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	0e 94 9d 09 	call	0x133a	; 0x133a <uart_writechar>
    1546:	61 01       	movw	r12, r2
    1548:	78 01       	movw	r14, r16
    154a:	41 2c       	mov	r4, r1
    154c:	51 2c       	mov	r5, r1
    154e:	32 01       	movw	r6, r4
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	b6 01       	movw	r22, r12
    1554:	c7 01       	movw	r24, r14
    1556:	0e 94 39 01 	call	0x272	; 0x272 <eeprom_readbuf>
    155a:	bf ef       	ldi	r27, 0xFF	; 255
    155c:	eb 1a       	sub	r14, r27
    155e:	fb 0a       	sbc	r15, r27
    1560:	ef ef       	ldi	r30, 0xFF	; 255
    1562:	4e 1a       	sub	r4, r30
    1564:	5e 0a       	sbc	r5, r30
    1566:	6e 0a       	sbc	r6, r30
    1568:	7e 0a       	sbc	r7, r30
    156a:	ff ef       	ldi	r31, 0xFF	; 255
    156c:	8f 1a       	sub	r8, r31
    156e:	9f 0a       	sbc	r9, r31
    1570:	af 0a       	sbc	r10, r31
    1572:	bf 0a       	sbc	r11, r31
    1574:	89 89       	ldd	r24, Y+17	; 0x11
    1576:	9a 89       	ldd	r25, Y+18	; 0x12
    1578:	ab 89       	ldd	r26, Y+19	; 0x13
    157a:	bc 89       	ldd	r27, Y+20	; 0x14
    157c:	88 16       	cp	r8, r24
    157e:	99 06       	cpc	r9, r25
    1580:	aa 06       	cpc	r10, r26
    1582:	bb 06       	cpc	r11, r27
    1584:	50 f0       	brcs	.+20     	; 0x159a <dump_eeprom+0xd4>
    1586:	68 01       	movw	r12, r16
    1588:	9f e0       	ldi	r25, 0x0F	; 15
    158a:	c9 22       	and	r12, r25
    158c:	dd 24       	eor	r13, r13
    158e:	00 e0       	ldi	r16, 0x00	; 0
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	32 01       	movw	r6, r4
    1594:	6c 0c       	add	r6, r12
    1596:	7d 1c       	adc	r7, r13
    1598:	09 c0       	rjmp	.+18     	; 0x15ac <dump_eeprom+0xe6>
    159a:	af ef       	ldi	r26, 0xFF	; 255
    159c:	ca 1a       	sub	r12, r26
    159e:	da 0a       	sbc	r13, r26
    15a0:	c7 01       	movw	r24, r14
    15a2:	8f 70       	andi	r24, 0x0F	; 15
    15a4:	99 27       	eor	r25, r25
    15a6:	89 2b       	or	r24, r25
    15a8:	99 f6       	brne	.-90     	; 0x1550 <dump_eeprom+0x8a>
    15aa:	ed cf       	rjmp	.-38     	; 0x1586 <dump_eeprom+0xc0>
    15ac:	0c 15       	cp	r16, r12
    15ae:	1d 05       	cpc	r17, r13
    15b0:	18 f0       	brcs	.+6      	; 0x15b8 <dump_eeprom+0xf2>
    15b2:	06 15       	cp	r16, r6
    15b4:	17 05       	cpc	r17, r7
    15b6:	28 f0       	brcs	.+10     	; 0x15c2 <dump_eeprom+0xfc>
    15b8:	8d ea       	ldi	r24, 0xAD	; 173
    15ba:	91 e0       	ldi	r25, 0x01	; 1
    15bc:	0e 94 9f 09 	call	0x133e	; 0x133e <uart_writestr>
    15c0:	0b c0       	rjmp	.+22     	; 0x15d8 <dump_eeprom+0x112>
    15c2:	f8 01       	movw	r30, r16
    15c4:	ec 19       	sub	r30, r12
    15c6:	fd 09       	sbc	r31, r13
    15c8:	e2 0d       	add	r30, r2
    15ca:	f3 1d       	adc	r31, r3
    15cc:	80 81       	ld	r24, Z
    15ce:	0e 94 ab 09 	call	0x1356	; 0x1356 <uart_writehex8>
    15d2:	80 e2       	ldi	r24, 0x20	; 32
    15d4:	0e 94 9d 09 	call	0x133a	; 0x133a <uart_writechar>
    15d8:	0f 5f       	subi	r16, 0xFF	; 255
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
    15dc:	00 31       	cpi	r16, 0x10	; 16
    15de:	11 05       	cpc	r17, r1
    15e0:	29 f7       	brne	.-54     	; 0x15ac <dump_eeprom+0xe6>
    15e2:	00 e0       	ldi	r16, 0x00	; 0
    15e4:	10 e0       	ldi	r17, 0x00	; 0
    15e6:	c0 16       	cp	r12, r16
    15e8:	d1 06       	cpc	r13, r17
    15ea:	31 f0       	breq	.+12     	; 0x15f8 <dump_eeprom+0x132>
    15ec:	80 e2       	ldi	r24, 0x20	; 32
    15ee:	0e 94 9d 09 	call	0x133a	; 0x133a <uart_writechar>
    15f2:	0f 5f       	subi	r16, 0xFF	; 255
    15f4:	1f 4f       	sbci	r17, 0xFF	; 255
    15f6:	f7 cf       	rjmp	.-18     	; 0x15e6 <dump_eeprom+0x120>
    15f8:	81 01       	movw	r16, r2
    15fa:	c8 01       	movw	r24, r16
    15fc:	82 19       	sub	r24, r2
    15fe:	93 09       	sbc	r25, r3
    1600:	84 15       	cp	r24, r4
    1602:	95 05       	cpc	r25, r5
    1604:	58 f4       	brcc	.+22     	; 0x161c <dump_eeprom+0x156>
    1606:	f8 01       	movw	r30, r16
    1608:	81 91       	ld	r24, Z+
    160a:	8f 01       	movw	r16, r30
    160c:	90 ee       	ldi	r25, 0xE0	; 224
    160e:	98 0f       	add	r25, r24
    1610:	90 36       	cpi	r25, 0x60	; 96
    1612:	08 f0       	brcs	.+2      	; 0x1616 <dump_eeprom+0x150>
    1614:	8e e2       	ldi	r24, 0x2E	; 46
    1616:	0e 94 9d 09 	call	0x133a	; 0x133a <uart_writechar>
    161a:	ef cf       	rjmp	.-34     	; 0x15fa <dump_eeprom+0x134>
    161c:	81 eb       	ldi	r24, 0xB1	; 177
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	0e 94 9f 09 	call	0x133e	; 0x133e <uart_writestr>
    1624:	87 01       	movw	r16, r14
    1626:	7b cf       	rjmp	.-266    	; 0x151e <dump_eeprom+0x58>
    1628:	64 96       	adiw	r28, 0x14	; 20
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	cf 90       	pop	r12
    1644:	bf 90       	pop	r11
    1646:	af 90       	pop	r10
    1648:	9f 90       	pop	r9
    164a:	8f 90       	pop	r8
    164c:	7f 90       	pop	r7
    164e:	6f 90       	pop	r6
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	3f 90       	pop	r3
    1656:	2f 90       	pop	r2
    1658:	08 95       	ret

0000165a <__vector_14>:
    165a:	1f 92       	push	r1
    165c:	0f 92       	push	r0
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	0f 92       	push	r0
    1662:	11 24       	eor	r1, r1
    1664:	2f 93       	push	r18
    1666:	3f 93       	push	r19
    1668:	8f 93       	push	r24
    166a:	9f 93       	push	r25
    166c:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <delay_count>
    1670:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <delay_count+0x1>
    1674:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <delay_limit>
    1678:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <delay_limit+0x1>
    167c:	28 17       	cp	r18, r24
    167e:	39 07       	cpc	r19, r25
    1680:	49 f0       	breq	.+18     	; 0x1694 <__vector_14+0x3a>
    1682:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <delay_count>
    1686:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <delay_count+0x1>
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <delay_count+0x1>
    1690:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <delay_count>
    1694:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <delay_count+0x2>
    1698:	30 91 4a 02 	lds	r19, 0x024A	; 0x80024a <delay_count+0x3>
    169c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <delay_limit+0x2>
    16a0:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <delay_limit+0x3>
    16a4:	28 17       	cp	r18, r24
    16a6:	39 07       	cpc	r19, r25
    16a8:	49 f0       	breq	.+18     	; 0x16bc <__vector_14+0x62>
    16aa:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <delay_count+0x2>
    16ae:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <delay_count+0x3>
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <delay_count+0x3>
    16b8:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <delay_count+0x2>
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	3f 91       	pop	r19
    16c2:	2f 91       	pop	r18
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0
    16ca:	1f 90       	pop	r1
    16cc:	18 95       	reti

000016ce <delay_init>:
    16ce:	89 ef       	ldi	r24, 0xF9	; 249
    16d0:	87 bd       	out	0x27, r24	; 39
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	84 bd       	out	0x24, r24	; 36
    16d6:	93 e0       	ldi	r25, 0x03	; 3
    16d8:	95 bd       	out	0x25, r25	; 37
    16da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    16de:	08 95       	ret

000016e0 <delay_get>:
    16e0:	82 30       	cpi	r24, 0x02	; 2
    16e2:	91 05       	cpc	r25, r1
    16e4:	50 f4       	brcc	.+20     	; 0x16fa <delay_get+0x1a>
    16e6:	f8 94       	cli
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	fc 01       	movw	r30, r24
    16ee:	e9 5b       	subi	r30, 0xB9	; 185
    16f0:	fd 4f       	sbci	r31, 0xFD	; 253
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	78 94       	sei
    16f8:	08 95       	ret
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	08 95       	ret

00001700 <delay_isdone>:
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	91 05       	cpc	r25, r1
    1704:	98 f4       	brcc	.+38     	; 0x172c <delay_isdone+0x2c>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	fc 01       	movw	r30, r24
    170c:	e9 5b       	subi	r30, 0xB9	; 185
    170e:	fd 4f       	sbci	r31, 0xFD	; 253
    1710:	20 81       	ld	r18, Z
    1712:	31 81       	ldd	r19, Z+1	; 0x01
    1714:	fc 01       	movw	r30, r24
    1716:	ed 5b       	subi	r30, 0xBD	; 189
    1718:	fd 4f       	sbci	r31, 0xFD	; 253
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	40 81       	ld	r20, Z
    1720:	51 81       	ldd	r21, Z+1	; 0x01
    1722:	42 17       	cp	r20, r18
    1724:	53 07       	cpc	r21, r19
    1726:	21 f0       	breq	.+8      	; 0x1730 <delay_isdone+0x30>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	08 95       	ret
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	08 95       	ret

00001732 <delay_set>:
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	ec 01       	movw	r28, r24
    173c:	8b 01       	movw	r16, r22
    173e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <initialized.1590>
    1742:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <initialized.1590+0x1>
    1746:	89 2b       	or	r24, r25
    1748:	41 f4       	brne	.+16     	; 0x175a <delay_set+0x28>
    174a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <delay_init>
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <initialized.1590+0x1>
    1756:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <initialized.1590>
    175a:	c2 30       	cpi	r28, 0x02	; 2
    175c:	d1 05       	cpc	r29, r1
    175e:	70 f4       	brcc	.+28     	; 0x177c <delay_set+0x4a>
    1760:	8f b7       	in	r24, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	cc 0f       	add	r28, r28
    1766:	dd 1f       	adc	r29, r29
    1768:	fe 01       	movw	r30, r28
    176a:	ed 5b       	subi	r30, 0xBD	; 189
    176c:	fd 4f       	sbci	r31, 0xFD	; 253
    176e:	11 83       	std	Z+1, r17	; 0x01
    1770:	00 83       	st	Z, r16
    1772:	c9 5b       	subi	r28, 0xB9	; 185
    1774:	dd 4f       	sbci	r29, 0xFD	; 253
    1776:	19 82       	std	Y+1, r1	; 0x01
    1778:	18 82       	st	Y, r1
    177a:	8f bf       	out	0x3f, r24	; 63
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	08 95       	ret

00001786 <serial_init>:
    1786:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    178a:	87 e6       	ldi	r24, 0x67	; 103
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1792:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1796:	e1 ec       	ldi	r30, 0xC1	; 193
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	88 e1       	ldi	r24, 0x18	; 24
    179c:	80 83       	st	Z, r24
    179e:	86 e0       	ldi	r24, 0x06	; 6
    17a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    17a4:	80 81       	ld	r24, Z
    17a6:	80 6a       	ori	r24, 0xA0	; 160
    17a8:	80 83       	st	Z, r24
    17aa:	08 95       	ret

000017ac <__vector_18>:
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	2f 93       	push	r18
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	ef 93       	push	r30
    17be:	ff 93       	push	r31
    17c0:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <rxtail>
    17c4:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <rxhead>
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	82 1b       	sub	r24, r18
    17cc:	91 09       	sbc	r25, r1
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	8f 73       	andi	r24, 0x3F	; 63
    17d2:	99 27       	eor	r25, r25
    17d4:	89 2b       	or	r24, r25
    17d6:	79 f0       	breq	.+30     	; 0x17f6 <__vector_18+0x4a>
    17d8:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <rxhead>
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    17e2:	ef 55       	subi	r30, 0x5F	; 95
    17e4:	fb 4f       	sbci	r31, 0xFB	; 251
    17e6:	80 83       	st	Z, r24
    17e8:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <rxhead>
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
    17ee:	8f 73       	andi	r24, 0x3F	; 63
    17f0:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <rxhead>
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <__vector_18+0x4e>
    17f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    17fa:	ff 91       	pop	r31
    17fc:	ef 91       	pop	r30
    17fe:	9f 91       	pop	r25
    1800:	8f 91       	pop	r24
    1802:	2f 91       	pop	r18
    1804:	0f 90       	pop	r0
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	0f 90       	pop	r0
    180a:	1f 90       	pop	r1
    180c:	18 95       	reti

0000180e <__vector_19>:
    180e:	1f 92       	push	r1
    1810:	0f 92       	push	r0
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	0f 92       	push	r0
    1816:	11 24       	eor	r1, r1
    1818:	2f 93       	push	r18
    181a:	8f 93       	push	r24
    181c:	9f 93       	push	r25
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    1822:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <txhead>
    1826:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <txtail>
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	82 1b       	sub	r24, r18
    182e:	91 09       	sbc	r25, r1
    1830:	8f 73       	andi	r24, 0x3F	; 63
    1832:	99 27       	eor	r25, r25
    1834:	89 2b       	or	r24, r25
    1836:	79 f0       	breq	.+30     	; 0x1856 <__vector_19+0x48>
    1838:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <txtail>
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	ef 51       	subi	r30, 0x1F	; 31
    1840:	fb 4f       	sbci	r31, 0xFB	; 251
    1842:	80 81       	ld	r24, Z
    1844:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1848:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <txtail>
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	8f 73       	andi	r24, 0x3F	; 63
    1850:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <txtail>
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <__vector_19+0x52>
    1856:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    185a:	8f 7d       	andi	r24, 0xDF	; 223
    185c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1860:	ff 91       	pop	r31
    1862:	ef 91       	pop	r30
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <serial_rxchars>:
    1874:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <rxhead>
    1878:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <rxtail>
    187c:	89 1b       	sub	r24, r25
    187e:	8f 73       	andi	r24, 0x3F	; 63
    1880:	08 95       	ret

00001882 <serial_popchar>:
    1882:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <rxhead>
    1886:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <rxtail>
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	82 1b       	sub	r24, r18
    188e:	91 09       	sbc	r25, r1
    1890:	8f 73       	andi	r24, 0x3F	; 63
    1892:	99 27       	eor	r25, r25
    1894:	89 2b       	or	r24, r25
    1896:	69 f0       	breq	.+26     	; 0x18b2 <serial_popchar+0x30>
    1898:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <rxtail>
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	ef 55       	subi	r30, 0x5F	; 95
    18a0:	fb 4f       	sbci	r31, 0xFB	; 251
    18a2:	80 81       	ld	r24, Z
    18a4:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <rxtail>
    18a8:	9f 5f       	subi	r25, 0xFF	; 255
    18aa:	9f 73       	andi	r25, 0x3F	; 63
    18ac:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <rxtail>
    18b0:	08 95       	ret
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	08 95       	ret

000018b6 <serial_writechar>:
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	07 fe       	sbrs	r0, 7
    18ba:	0e c0       	rjmp	.+28     	; 0x18d8 <serial_writechar+0x22>
    18bc:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <txtail>
    18c0:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <txhead>
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	29 1b       	sub	r18, r25
    18c8:	31 09       	sbc	r19, r1
    18ca:	21 50       	subi	r18, 0x01	; 1
    18cc:	31 09       	sbc	r19, r1
    18ce:	2f 73       	andi	r18, 0x3F	; 63
    18d0:	33 27       	eor	r19, r19
    18d2:	23 2b       	or	r18, r19
    18d4:	99 f3       	breq	.-26     	; 0x18bc <serial_writechar+0x6>
    18d6:	0d c0       	rjmp	.+26     	; 0x18f2 <serial_writechar+0x3c>
    18d8:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <txtail>
    18dc:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <txhead>
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	29 1b       	sub	r18, r25
    18e4:	31 09       	sbc	r19, r1
    18e6:	21 50       	subi	r18, 0x01	; 1
    18e8:	31 09       	sbc	r19, r1
    18ea:	2f 73       	andi	r18, 0x3F	; 63
    18ec:	33 27       	eor	r19, r19
    18ee:	23 2b       	or	r18, r19
    18f0:	61 f0       	breq	.+24     	; 0x190a <serial_writechar+0x54>
    18f2:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <txhead>
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	ef 51       	subi	r30, 0x1F	; 31
    18fa:	fb 4f       	sbci	r31, 0xFB	; 251
    18fc:	80 83       	st	Z, r24
    18fe:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <txhead>
    1902:	8f 5f       	subi	r24, 0xFF	; 255
    1904:	8f 73       	andi	r24, 0x3F	; 63
    1906:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <txhead>
    190a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    190e:	80 62       	ori	r24, 0x20	; 32
    1910:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1914:	08 95       	ret

00001916 <serial_writestr>:
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	ec 01       	movw	r28, r24
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	11 e0       	ldi	r17, 0x01	; 1
    1922:	18 0f       	add	r17, r24
    1924:	fe 01       	movw	r30, r28
    1926:	e8 0f       	add	r30, r24
    1928:	f1 1d       	adc	r31, r1
    192a:	80 81       	ld	r24, Z
    192c:	88 23       	and	r24, r24
    192e:	21 f0       	breq	.+8      	; 0x1938 <serial_writestr+0x22>
    1930:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <serial_writechar>
    1934:	81 2f       	mov	r24, r17
    1936:	f4 cf       	rjmp	.-24     	; 0x1920 <serial_writestr+0xa>
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	08 95       	ret

00001940 <serial_writestr_P>:
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	ec 01       	movw	r28, r24
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	11 e0       	ldi	r17, 0x01	; 1
    194c:	18 0f       	add	r17, r24
    194e:	fe 01       	movw	r30, r28
    1950:	e8 0f       	add	r30, r24
    1952:	f1 1d       	adc	r31, r1
    1954:	84 91       	lpm	r24, Z
    1956:	88 23       	and	r24, r24
    1958:	21 f0       	breq	.+8      	; 0x1962 <serial_writestr_P+0x22>
    195a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <serial_writechar>
    195e:	81 2f       	mov	r24, r17
    1960:	f4 cf       	rjmp	.-24     	; 0x194a <serial_writestr_P+0xa>
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	08 95       	ret

0000196a <__mulsi3>:
    196a:	db 01       	movw	r26, r22
    196c:	8f 93       	push	r24
    196e:	9f 93       	push	r25
    1970:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__muluhisi3>
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	a2 9f       	mul	r26, r18
    197a:	80 0d       	add	r24, r0
    197c:	91 1d       	adc	r25, r1
    197e:	a3 9f       	mul	r26, r19
    1980:	90 0d       	add	r25, r0
    1982:	b2 9f       	mul	r27, r18
    1984:	90 0d       	add	r25, r0
    1986:	11 24       	eor	r1, r1
    1988:	08 95       	ret

0000198a <__udivmodhi4>:
    198a:	aa 1b       	sub	r26, r26
    198c:	bb 1b       	sub	r27, r27
    198e:	51 e1       	ldi	r21, 0x11	; 17
    1990:	07 c0       	rjmp	.+14     	; 0x19a0 <__udivmodhi4_ep>

00001992 <__udivmodhi4_loop>:
    1992:	aa 1f       	adc	r26, r26
    1994:	bb 1f       	adc	r27, r27
    1996:	a6 17       	cp	r26, r22
    1998:	b7 07       	cpc	r27, r23
    199a:	10 f0       	brcs	.+4      	; 0x19a0 <__udivmodhi4_ep>
    199c:	a6 1b       	sub	r26, r22
    199e:	b7 0b       	sbc	r27, r23

000019a0 <__udivmodhi4_ep>:
    19a0:	88 1f       	adc	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	5a 95       	dec	r21
    19a6:	a9 f7       	brne	.-22     	; 0x1992 <__udivmodhi4_loop>
    19a8:	80 95       	com	r24
    19aa:	90 95       	com	r25
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	08 95       	ret

000019b2 <__divmodhi4>:
    19b2:	97 fb       	bst	r25, 7
    19b4:	07 2e       	mov	r0, r23
    19b6:	16 f4       	brtc	.+4      	; 0x19bc <__divmodhi4+0xa>
    19b8:	00 94       	com	r0
    19ba:	07 d0       	rcall	.+14     	; 0x19ca <__divmodhi4_neg1>
    19bc:	77 fd       	sbrc	r23, 7
    19be:	09 d0       	rcall	.+18     	; 0x19d2 <__divmodhi4_neg2>
    19c0:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
    19c4:	07 fc       	sbrc	r0, 7
    19c6:	05 d0       	rcall	.+10     	; 0x19d2 <__divmodhi4_neg2>
    19c8:	3e f4       	brtc	.+14     	; 0x19d8 <__divmodhi4_exit>

000019ca <__divmodhi4_neg1>:
    19ca:	90 95       	com	r25
    19cc:	81 95       	neg	r24
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	08 95       	ret

000019d2 <__divmodhi4_neg2>:
    19d2:	70 95       	com	r23
    19d4:	61 95       	neg	r22
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255

000019d8 <__divmodhi4_exit>:
    19d8:	08 95       	ret

000019da <__udivmodsi4>:
    19da:	a1 e2       	ldi	r26, 0x21	; 33
    19dc:	1a 2e       	mov	r1, r26
    19de:	aa 1b       	sub	r26, r26
    19e0:	bb 1b       	sub	r27, r27
    19e2:	fd 01       	movw	r30, r26
    19e4:	0d c0       	rjmp	.+26     	; 0x1a00 <__udivmodsi4_ep>

000019e6 <__udivmodsi4_loop>:
    19e6:	aa 1f       	adc	r26, r26
    19e8:	bb 1f       	adc	r27, r27
    19ea:	ee 1f       	adc	r30, r30
    19ec:	ff 1f       	adc	r31, r31
    19ee:	a2 17       	cp	r26, r18
    19f0:	b3 07       	cpc	r27, r19
    19f2:	e4 07       	cpc	r30, r20
    19f4:	f5 07       	cpc	r31, r21
    19f6:	20 f0       	brcs	.+8      	; 0x1a00 <__udivmodsi4_ep>
    19f8:	a2 1b       	sub	r26, r18
    19fa:	b3 0b       	sbc	r27, r19
    19fc:	e4 0b       	sbc	r30, r20
    19fe:	f5 0b       	sbc	r31, r21

00001a00 <__udivmodsi4_ep>:
    1a00:	66 1f       	adc	r22, r22
    1a02:	77 1f       	adc	r23, r23
    1a04:	88 1f       	adc	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	1a 94       	dec	r1
    1a0a:	69 f7       	brne	.-38     	; 0x19e6 <__udivmodsi4_loop>
    1a0c:	60 95       	com	r22
    1a0e:	70 95       	com	r23
    1a10:	80 95       	com	r24
    1a12:	90 95       	com	r25
    1a14:	9b 01       	movw	r18, r22
    1a16:	ac 01       	movw	r20, r24
    1a18:	bd 01       	movw	r22, r26
    1a1a:	cf 01       	movw	r24, r30
    1a1c:	08 95       	ret

00001a1e <__divmodsi4>:
    1a1e:	05 2e       	mov	r0, r21
    1a20:	97 fb       	bst	r25, 7
    1a22:	1e f4       	brtc	.+6      	; 0x1a2a <__divmodsi4+0xc>
    1a24:	00 94       	com	r0
    1a26:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__negsi2>
    1a2a:	57 fd       	sbrc	r21, 7
    1a2c:	07 d0       	rcall	.+14     	; 0x1a3c <__divmodsi4_neg2>
    1a2e:	0e 94 ed 0c 	call	0x19da	; 0x19da <__udivmodsi4>
    1a32:	07 fc       	sbrc	r0, 7
    1a34:	03 d0       	rcall	.+6      	; 0x1a3c <__divmodsi4_neg2>
    1a36:	4e f4       	brtc	.+18     	; 0x1a4a <__divmodsi4_exit>
    1a38:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__negsi2>

00001a3c <__divmodsi4_neg2>:
    1a3c:	50 95       	com	r21
    1a3e:	40 95       	com	r20
    1a40:	30 95       	com	r19
    1a42:	21 95       	neg	r18
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    1a46:	4f 4f       	sbci	r20, 0xFF	; 255
    1a48:	5f 4f       	sbci	r21, 0xFF	; 255

00001a4a <__divmodsi4_exit>:
    1a4a:	08 95       	ret

00001a4c <__negsi2>:
    1a4c:	90 95       	com	r25
    1a4e:	80 95       	com	r24
    1a50:	70 95       	com	r23
    1a52:	61 95       	neg	r22
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	8f 4f       	sbci	r24, 0xFF	; 255
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	08 95       	ret

00001a5c <__umulhisi3>:
    1a5c:	a2 9f       	mul	r26, r18
    1a5e:	b0 01       	movw	r22, r0
    1a60:	b3 9f       	mul	r27, r19
    1a62:	c0 01       	movw	r24, r0
    1a64:	a3 9f       	mul	r26, r19
    1a66:	70 0d       	add	r23, r0
    1a68:	81 1d       	adc	r24, r1
    1a6a:	11 24       	eor	r1, r1
    1a6c:	91 1d       	adc	r25, r1
    1a6e:	b2 9f       	mul	r27, r18
    1a70:	70 0d       	add	r23, r0
    1a72:	81 1d       	adc	r24, r1
    1a74:	11 24       	eor	r1, r1
    1a76:	91 1d       	adc	r25, r1
    1a78:	08 95       	ret

00001a7a <__muluhisi3>:
    1a7a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__umulhisi3>
    1a7e:	a5 9f       	mul	r26, r21
    1a80:	90 0d       	add	r25, r0
    1a82:	b4 9f       	mul	r27, r20
    1a84:	90 0d       	add	r25, r0
    1a86:	a4 9f       	mul	r26, r20
    1a88:	80 0d       	add	r24, r0
    1a8a:	91 1d       	adc	r25, r1
    1a8c:	11 24       	eor	r1, r1
    1a8e:	08 95       	ret

00001a90 <_exit>:
    1a90:	f8 94       	cli

00001a92 <__stop_program>:
    1a92:	ff cf       	rjmp	.-2      	; 0x1a92 <__stop_program>
